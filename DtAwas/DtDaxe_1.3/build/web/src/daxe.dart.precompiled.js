// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
if (typeof($dart_deferred_initializers) === "undefined") $dart_deferred_initializers = Object.create(null);
(function($) {
function dart() {
  this.x = 0;
  delete this.x;
}
var A = new dart;
var B = new dart;
var C = new dart;
var D = new dart;
var E = new dart;
var F = new dart;
var G = new dart;
var H = new dart;
var J = new dart;
var K = new dart;
var L = new dart;
var M = new dart;
var N = new dart;
var O = new dart;
var P = new dart;
var Q = new dart;
var R = new dart;
var S = new dart;
var T = new dart;
var U = new dart;
var V = new dart;
var W = new dart;
var X = new dart;
var Y = new dart;
var Z = new dart;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = Object.create(null);

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = Object.create(null);
    x.x = 0;
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    if (fields instanceof Array)
      fields = fields[0];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["Strings", "strings.dart", , R, {
  "^": "",
  Strings_load: function() {
    var t1, completer;
    t1 = P.bool;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
    t1 = window.navigator;
    t1.toString;
    t1 = T.Intl_canonicalizedLocale(t1.language || t1.userLanguage);
    $.Intl_systemLocale = t1;
    P._Future$immediate(t1, null).then$1(new R.Strings_load_closure(completer));
    return completer.future;
  },
  Strings_get: function(key) {
    return $.Strings_map.$index(0, key);
  },
  Strings_load_closure: {
    "^": "Closure:0;completer_0",
    call$1: function(sl) {
      var t1, language, fullFilePath, request, t2;
      if (sl != null) {
        $.Strings_systemLocale = sl;
        t1 = sl;
      } else {
        $.Strings_systemLocale = "en";
        t1 = "en";
      }
      t1 = J.split$1$s(t1, "_");
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      language = t1[0];
      fullFilePath = $.Strings_resourcePath + "_" + H.S(language) + ".properties";
      request = new XMLHttpRequest();
      C.HttpRequest_methods.open$2(request, "GET", fullFilePath);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "load", false), [null]);
      t2 = this.completer_0;
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new R.Strings_load__closure(t2, request)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new R.Strings_load__closure0(t2)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      request.send();
    },
    $isFunction: true
  },
  Strings_load__closure: {
    "^": "Closure:8;completer_1,request_2",
    call$1: function($event) {
      var txt, lines, t1, line, ind, key, value;
      txt = this.request_2.responseText;
      $.Strings_map = P.HashMap_HashMap(null, null, null, P.String, P.String);
      lines = txt.split("\n");
      for (t1 = new H.ListIterator(lines, lines.length, 0, null); t1.moveNext$0();) {
        line = t1._current;
        if (J.getInterceptor$s(line).startsWith$1(line, "#"))
          continue;
        ind = C.JSString_methods.indexOf$1(line, "=");
        if (ind === -1)
          continue;
        key = C.JSString_methods.trim$0(C.JSString_methods.substring$2(line, 0, ind));
        value = C.JSString_methods.trim$0(C.JSString_methods.substring$1(line, ind + 1));
        $.Strings_map.$indexSet(0, key, value);
      }
      this.completer_1.complete$1(0, true);
    },
    $isFunction: true
  },
  Strings_load__closure0: {
    "^": "Closure:8;completer_3",
    call$1: function($event) {
      this.completer_3.completeError$1("Error when reading the strings in " + $.Strings_resourcePath);
    },
    $isFunction: true
  }
}],
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    "%": "CanvasGradient|CanvasPattern|DOMImplementation|MediaError|MediaKeyError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString|TextMetrics"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    }
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;",
    toString$0: function(receiver) {
      return String(receiver);
    }
  },
  JSArray: {
    "^": "Interceptor;",
    checkMutable$1: function(receiver, reason) {
      if (!!receiver.immutable$list)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    checkGrowable$1: function(receiver, reason) {
      if (!!receiver.fixed$length)
        throw H.wrapException(P.UnsupportedError$(reason));
    },
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    insert$2: function(receiver, index, value) {
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      this.checkGrowable$1(receiver, "insert");
      receiver.splice(index, 0, value);
    },
    remove$1: function(receiver, element) {
      var i;
      this.checkGrowable$1(receiver, "remove");
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = new H.ListIterator(collection, collection.length, 0, null); t1.moveNext$0();)
        this.add$1(receiver, t1._current);
    },
    forEach$1: function(receiver, f) {
      var t1, $length, i;
      t1 = new J.JSArray_forEach_getLength(receiver);
      $length = t1.call$0();
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        f.call$1(receiver[i]);
        if ($length !== t1.call$0())
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    removeRange$2: function(receiver, start, end) {
      var receiverLength;
      this.checkGrowable$1(receiver, "removeRange");
      receiverLength = receiver.length;
      if (start < 0 || start > receiverLength)
        throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
      if (end < start || end > receiverLength)
        throw H.wrapException(P.RangeError$range(end, start, receiverLength));
      H.Lists_copy(receiver, end, receiver, start, receiverLength - end);
      this.set$length(receiver, receiverLength - (end - start));
    },
    indexOf$2: function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, receiver.length, 0, null);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      this.checkGrowable$1(receiver, "set length");
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      this.checkMutable$1(receiver, "indexed set");
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  JSArray_forEach_getLength: {
    "^": "Closure:9;this_0",
    call$0: function() {
      return this.this_0.length;
    },
    $isFunction: true
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    abs$0: function(receiver) {
      return Math.abs(receiver);
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toDouble$0: function(receiver) {
      return receiver;
    },
    toRadixString$1: function(receiver, radix) {
      H.checkNum(radix);
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else
        return this.toInt$0(receiver / other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    $is$double: true,
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    allMatches$2: function(receiver, string, start) {
      H.checkString(string);
      H.checkInt(start);
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      return H.allMatchesInStringUnchecked(receiver, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this.codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, string, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength, t1;
      H.checkString(other);
      otherLength = other.length;
      t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceAll$2: function(receiver, from, to) {
      H.checkString(to);
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      return receiver.split(pattern);
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      H.checkInt(index);
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      endIndex = index + pattern.length;
      if (endIndex > receiver.length)
        return false;
      return pattern === receiver.substring(index, endIndex);
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      H.checkInt(startIndex);
      if (endIndex == null)
        endIndex = receiver.length;
      H.checkInt(endIndex);
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, match, t2, i;
      if (pattern == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, start);
      t1 = J.getInterceptor(pattern);
      if (!!t1.$isJSSyntaxRegExp) {
        match = pattern._execGlobal$2(receiver, start);
        return match == null ? -1 : match._match.index;
      }
      for (t2 = receiver.length, i = start; i <= t2; ++i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      if (pattern == null)
        H.throwExpression(P.ArgumentError$(null));
      start = receiver.length;
      if (typeof pattern === "string") {
        t1 = pattern.length;
        t2 = receiver.length;
        if (start + t1 > t2)
          start = t2 - t1;
        return receiver.lastIndexOf(pattern, start);
      }
      for (t1 = J.getInterceptor$s(pattern), i = start; i >= 0; --i)
        if (t1.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (other == null)
        H.throwExpression(P.ArgumentError$(null));
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var index0, codeUnit;
        for (; index > 0; index = index0) {
          index0 = index - 1;
          codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;__interceptors$_string",
    get$length: function(_) {
      return this.__interceptors$_string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this.__interceptors$_string, i);
    },
    $asUnmodifiableListBase: function() {
      return [P.$int];
    },
    $asListBase: function() {
      return [P.$int];
    },
    $asObject_ListMixin: function() {
      return [P.$int];
    },
    $asList: function() {
      return [P.$int];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : H.IsolateNatives__getJSFunctionFromName(functionName);
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, new H.CapabilityImpl(H.random64()), new H.CapabilityImpl(H.random64()), false, false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, true, P.LinkedHashSet_LinkedHashSet(null, null, null, null));
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  },
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        self.console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__getJSFunctionFromName: function(functionName) {
    return init.globalFunctions[functionName]();
  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri, context);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure:10;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    },
    $isFunction: true
  },
  startRootIsolate_closure0: {
    "^": "Closure:10;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    },
    $isFunction: true
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3;
      t1 = self.window == null;
      t2 = self.Worker;
      t3 = t1 && !!self.postMessage;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      this.topEventLoop = new H._EventLoop(P.ListQueue$(null, H._IsolateEvent), 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        self.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        self.dartPrint = self.dartPrint || function(serialize) {
          return function(object) {
            if (self.console && self.console.log) {
              self.console.log(object);
            } else {
              self.postMessage(serialize(object));
            }
          };
        }(H._Manager__serializePrintMessage);
      }
    },
    static: {_Manager__serializePrintMessage: function(object) {
        return H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", object], null, null));
      }}
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,initialized,isPaused,delayedEvents,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal,errorPorts",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = P.ListQueue$(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(this.get$kill());
    },
    handleUncaughtError$2: function(error, stackTrace) {
      var t1, message, t2;
      t1 = this.errorPorts;
      if (t1._collection$_length === 0) {
        if (this.errorsAreFatal === true && this === init.globalState.rootContext)
          return;
        if (self.console && self.console.error)
          self.console.error(error, stackTrace);
        else {
          P.print(error);
          if (stackTrace != null)
            P.print(stackTrace);
        }
        return;
      }
      message = Array(2);
      message.fixed$length = init;
      message[0] = J.toString$0(error);
      message[1] = stackTrace == null ? null : J.toString$0(stackTrace);
      for (t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();)
        J.send$1$x(t2._collection$_current, message);
    },
    eval$1: function(code) {
      var old, result, e, s, exception, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.handleUncaughtError$2(e, s);
        if (this.errorsAreFatal === true) {
          this.kill$0();
          if (this === init.globalState.rootContext)
            throw exception;
        }
      }
 finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused || !this.initialized)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current._close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      this.errorPorts.clear$0(0);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 2]
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure:2;responsePort_0",
    call$0: function() {
      J.send$1$x(this.responsePort_0, null);
    },
    $isFunction: true
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if (self.window != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure:2;this_0",
    call$0: function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    },
    $isFunction: true
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message>",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.isPaused) {
        t1.delayedEvents.push(this);
        return;
      }
      t1.eval$1(this.fn);
    }
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure:10;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    },
    $isFunction: true
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure:2;topLevel_0,args_1,message_2,isSpawnUri_3,context_4",
    call$0: function() {
      var t1, t2, t3;
      this.context_4.initialized = true;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    },
    $isFunction: true
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        t1 = t1.msg_0;
        t2 = J.getInterceptor$asx(t1);
        switch (t2.$index(t1, 0)) {
          case "pause":
            isolate.addPause$2(t2.$index(t1, 1), t2.$index(t1, 2));
            break;
          case "resume":
            isolate.removePause$1(t2.$index(t1, 1));
            break;
          case "add-ondone":
            isolate.addDoneListener$1(t2.$index(t1, 1));
            break;
          case "remove-ondone":
            isolate.removeDoneListener$1(t2.$index(t1, 1));
            break;
          case "set-errors-fatal":
            isolate.setErrorsFatal$2(t2.$index(t1, 1), t2.$index(t1, 2));
            break;
          case "ping":
            isolate.handlePing$2(t2.$index(t1, 1), t2.$index(t1, 2));
            break;
          case "kill":
            isolate.handleKill$2(t2.$index(t1, 1), t2.$index(t1, 2));
            break;
          case "getErrors":
            t1 = t2.$index(t1, 1);
            isolate.errorPorts.add$1(0, t1);
            break;
          case "stopErrors":
            t1 = t2.$index(t1, 1);
            isolate.errorPorts.remove$1(0, t1);
            break;
        }
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$__isolate_helper$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure:10;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        t1.__isolate_helper$_add$1(this.box_0.msg_0);
      }
    },
    $isFunction: true
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = this._workerId;
      if (typeof t1 !== "number")
        return t1.$shl();
      t2 = this._isolateId;
      if (typeof t2 !== "number")
        return t2.$shl();
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 << 16 ^ t2 << 8 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;__isolate_helper$_id<,_handler,_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    _close$0: function() {
      this._isClosed = true;
      this._handler = null;
    },
    __isolate_helper$_add$1: function(dataEvent) {
      if (this._isClosed)
        return;
      this._handler$1(dataEvent);
    },
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$__isolate_helper$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x.__isolate_helper$_id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    },
    visitFunction$1: function(topLevelFunction) {
      var $name = !!topLevelFunction.$isClosure ? topLevelFunction.$name : null;
      if ($name == null)
        throw H.wrapException(P.UnsupportedError$("only top-level functions can be sent."));
      return ["function", $name];
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x.__isolate_helper$_id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    },
    visitFunction$1: function(topLevelFunction) {
      var $name = !!topLevelFunction.$isClosure ? topLevelFunction.$name : null;
      if ($name == null)
        throw H.wrapException(P.UnsupportedError$("only top-level functions can be sent."));
      return H.IsolateNatives__getJSFunctionFromName($name);
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    },
    deserializeFunction$1: function(list) {
      return H.IsolateNatives__getJSFunctionFromName(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      if (!!t1.$isFunction)
        return this.visitFunction$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitFunction$1: function(f) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure:11;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    },
    $isFunction: true
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitFunction$1: function(f) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        case "function":
          return this.deserializeFunction$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if (self.setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        var t1 = this._handle;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setInterval(H.convertDartClosureToJS(new H.TimerImpl$periodic_closure(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = self.setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else if (self.setTimeout != null) {
        ++init.globalState.topEventLoop._activeJsAsyncCount;
        this._handle = self.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
      } else
        throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }, TimerImpl$periodic: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(false, false, null);
        t1.TimerImpl$periodic$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure:2;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    },
    $isFunction: true
  },
  TimerImpl_internalCallback0: {
    "^": "Closure:2;this_2,callback_3",
    call$0: function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    },
    $isFunction: true
  },
  TimerImpl$periodic_closure: {
    "^": "Closure:10;this_0,callback_1",
    call$0: function() {
      this.callback_1.call$1(this.this_0);
    },
    $isFunction: true
  },
  CapabilityImpl: {
    "^": "Object;__isolate_helper$_id<",
    get$hashCode: function(_) {
      var hash = this.__isolate_helper$_id;
      if (typeof hash !== "number")
        return hash.$shr();
      hash = C.JSNumber_methods._shrOtherPositive$1(hash, 0) ^ C.JSNumber_methods._tdivFast$1(hash, 4294967296);
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this.__isolate_helper$_id;
        t2 = other.__isolate_helper$_id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string, null, null));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 0],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    H.checkString(source);
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (C.JSString_methods.codeUnitAt$1(digitsPart, i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    H.checkString(source);
    handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [P.$int];
    for (t1 = new H.ListIterator(codePoints, codePoints.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = new H.ListIterator(charCodes, charCodes.length, 0, null); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  checkNum: function(value) {
    if (typeof value !== "number")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkInt: function(value) {
    if (typeof value !== "number" || Math.floor(value) !== value)
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  checkString: function(value) {
    if (typeof value !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return value;
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: function() {
    return J.toString$0(this.dartException);
  },
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  },
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  random64: function() {
    return (Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296;
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto = Object.getPrototypeOf(obj);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_oRe();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  allMatchesInStringUnchecked: function(needle, haystack, startIndex) {
    var result, $length, patternLength, position, endIndex;
    result = H.setRuntimeTypeInfo([], [P.Match]);
    $length = haystack.length;
    patternLength = needle.length;
    for (; true;) {
      position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
      if (position === -1)
        break;
      result.push(new H.StringMatch(position, haystack, needle));
      endIndex = position + patternLength;
      if (endIndex === $length)
        break;
      else
        startIndex = position === endIndex ? startIndex + 1 : endIndex;
    }
    return result;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    var t1;
    if (typeof other === "string")
      return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
    else {
      t1 = J.getInterceptor(other);
      if (!!t1.$isJSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(H.checkString(t1));
      } else
        return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
    }
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1, nativeRegexp;
    H.checkString(to);
    if (typeof from === "string")
      if (from === "")
        if (receiver === "")
          return to;
        else {
          result = P.StringBuffer$("");
          $length = receiver.length;
          result.write$1(to);
          for (i = 0; i < $length; ++i) {
            t1 = receiver[i];
            t1 = result._contents += t1;
            result._contents = t1 + to;
          }
          t1 = result._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        }
      else
        return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace(/\$/g, "$$$$"));
    else if (!!J.getInterceptor(from).$isJSSyntaxRegExp) {
      nativeRegexp = from.get$_nativeGlobalVersion();
      nativeRegexp.lastIndex = 0;
      return receiver.replace(nativeRegexp, to.replace(/\$/g, "$$$$"));
    } else
      throw H.wrapException("String.replaceAll(Pattern) UNIMPLEMENTED");
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data>,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure:12;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    },
    $isFunction: true
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure:10;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    },
    $isFunction: true
  },
  invokeClosure_closure0: {
    "^": "Closure:10;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    },
    $isFunction: true
  },
  invokeClosure_closure1: {
    "^": "Closure:10;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    },
    $isFunction: true
  },
  invokeClosure_closure2: {
    "^": "Closure:10;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    },
    $isFunction: true
  },
  invokeClosure_closure3: {
    "^": "Closure:10;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    },
    $isFunction: true
  },
  Closure: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isClosure: true,
    $isFunction: true,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,__js_helper$_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this.__js_helper$_target === other.__js_helper$_target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      t1 = H.Primitives_objectHashCode(this.__js_helper$_target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      return (receiverHashCode ^ t1) >>> 0;
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message>",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = Object.create(null);
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  initHooks_closure: {
    "^": "Closure:12;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    },
    $isFunction: true
  },
  initHooks_closure0: {
    "^": "Closure:13;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    },
    $isFunction: true
  },
  initHooks_closure1: {
    "^": "Closure:0;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    },
    $isFunction: true
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    get$_nativeAnchoredVersion: function() {
      var t1 = this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
      this._nativeAnchoredRegExp = t1;
      return t1;
    },
    hasMatch$1: function(string) {
      return this._nativeRegExp.test(H.checkString(string));
    },
    allMatches$2: function(_, string, start) {
      H.checkString(string);
      H.checkInt(start);
      if (start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1: function($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match, t1, t2;
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      t1 = match.length;
      t2 = t1 - 1;
      if (t2 < 0)
        return H.ioore(match, t2);
      if (match[t2] != null)
        return;
      C.JSArray_methods.set$length(match, t2);
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      return this._execAnchored$2(string, start);
    },
    $isJSSyntaxRegExp: true,
    $isRegExp: true,
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        H.checkString(source);
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + source + ", " + errorMessage, null, null));
      }}
  },
  _MatchImplementation: {
    "^": "Object;pattern,_match",
    group$1: function(index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "^": "IterableBase;_re,_string,_start",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, this._start, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,_string,_nextIndex,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, match, t3, nextIndex;
      t1 = this._string;
      if (t1 == null)
        return false;
      t2 = this._nextIndex;
      if (t2 <= t1.length) {
        match = this._regExp._execGlobal$2(t1, t2);
        if (match != null) {
          this.__js_helper$_current = match;
          t1 = match._match;
          t2 = t1.index;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          t3 = J.get$length$asx(t1[0]);
          if (typeof t3 !== "number")
            return H.iae(t3);
          nextIndex = t2 + t3;
          this._nextIndex = t1.index === nextIndex ? nextIndex + 1 : nextIndex;
          return true;
        }
      }
      this.__js_helper$_current = null;
      this._string = null;
      return false;
    }
  },
  StringMatch: {
    "^": "Object;start,input,pattern",
    $index: function(_, g) {
      return this.group$1(g);
    },
    group$1: function(group_) {
      if (group_ !== 0)
        throw H.wrapException(P.RangeError$value(group_));
      return this.pattern;
    }
  }
}],
["crypto", "package:crypto/crypto.dart", , M, {
  "^": "",
  _CryptoUtils_bytesToBase64: function(bytes, urlSafe, addLineSeparator) {
    var len, lookup, remainderLength, chunkLength, t1, t2, outputLen, out, j, i, c, i0, t3, t4, x, j0, y;
    len = bytes.length;
    if (len === 0)
      return "";
    lookup = urlSafe ? "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_" : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    remainderLength = C.JSInt_methods.remainder$1(len, 3);
    chunkLength = len - remainderLength;
    t1 = C.JSInt_methods._tdivFast$1(len, 3);
    t2 = remainderLength > 0 ? 4 : 0;
    outputLen = t1 * 4 + t2;
    if (addLineSeparator)
      outputLen += C.JSInt_methods._tdivFast$1(outputLen - 1, 76) << 1 >>> 0;
    t1 = Array(outputLen);
    t1.fixed$length = init;
    out = H.setRuntimeTypeInfo(t1, [P.$int]);
    for (t1 = out.length, t2 = outputLen - 2, j = 0, i = 0, c = 0; i < chunkLength; i = i0) {
      i0 = i + 1;
      if (i >= len)
        return H.ioore(bytes, i);
      t3 = bytes[i];
      i = i0 + 1;
      if (i0 >= len)
        return H.ioore(bytes, i0);
      t4 = bytes[i0];
      i0 = i + 1;
      if (i >= len)
        return H.ioore(bytes, i);
      x = t3 << 16 & 16777215 | t4 << 8 & 16777215 | bytes[i];
      j0 = j + 1;
      t4 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 18);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t4;
      j = j0 + 1;
      t4 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 12 & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t4;
      j0 = j + 1;
      t4 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 6 & 63);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t4;
      j = j0 + 1;
      t4 = C.JSString_methods.codeUnitAt$1(lookup, x & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t4;
      if (addLineSeparator) {
        ++c;
        t3 = c === 19 && j < t2;
      } else
        t3 = false;
      if (t3) {
        j0 = j + 1;
        if (j >= t1)
          return H.ioore(out, j);
        out[j] = 13;
        j = j0 + 1;
        if (j0 >= t1)
          return H.ioore(out, j0);
        out[j0] = 10;
        c = 0;
      }
    }
    if (remainderLength === 1) {
      if (i >= len)
        return H.ioore(bytes, i);
      x = bytes[i];
      j0 = j + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 2);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      j = j0 + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x << 4 & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t2;
      j0 = j + 1;
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = 61;
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = 61;
    } else if (remainderLength === 2) {
      if (i >= len)
        return H.ioore(bytes, i);
      x = bytes[i];
      t2 = i + 1;
      if (t2 >= len)
        return H.ioore(bytes, t2);
      y = bytes[t2];
      j0 = j + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, x >>> 2);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      j = j0 + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, (x << 4 | y >>> 4) & 63);
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = t2;
      j0 = j + 1;
      t2 = C.JSString_methods.codeUnitAt$1(lookup, y << 2 & 63);
      if (j >= t1)
        return H.ioore(out, j);
      out[j] = t2;
      if (j0 >= t1)
        return H.ioore(out, j0);
      out[j0] = 61;
    }
    return P.String_String$fromCharCodes(out);
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooMany: function() {
    return new P.StateError("Too many elements");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var i, j, t1;
    if (srcStart < dstStart)
      for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
    else
      for (t1 = srcStart + count, j = dstStart, i = srcStart; i < t1; ++i, ++j) {
        if (i < 0 || i >= src.length)
          return H.ioore(src, i);
        C.JSArray_methods.$indexSet(dst, j, src[i]);
      }
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var t1, i;
    t1 = a.length;
    if (typeof startIndex !== "number")
      return startIndex.$ge();
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < endIndex; ++i) {
      if (i >>> 0 !== i || i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Lists_lastIndexOf: function(a, element, startIndex) {
    var t1, i;
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Symbol_getName: function(symbol) {
    return symbol.get$_name();
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return new H.ListIterator(this, this.get$length(this), 0, null);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$first: function(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(0, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    toList$1$growable: function(_, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(this)), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      for (i = 0; i < this.get$length(this); ++i) {
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,__internal$_start,_endOrLength",
    get$_endIndex: function() {
      var $length = J.get$length$asx(this._iterable);
      return $length;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this.__internal$_start;
      if (t1 >= $length)
        return 0;
      return $length - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, t1;
      realIndex = this.get$_startIndex() + index;
      if (index >= 0) {
        t1 = this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1 = this.__internal$_start;
      if (t1 < 0)
        throw H.wrapException(P.RangeError$value(t1));
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,__internal$_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    }
  },
  MappedListIterable: {
    "^": "ListIterable;__internal$_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this.__internal$_source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  IterableMixinWorkaround: {
    "^": "Object;",
    static: {IterableMixinWorkaround_any: function(iterable, f) {
        var t1;
        for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();)
          if (f.call$1(t1._current) === true)
            return true;
        return false;
      }, IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
        var t1, element;
        for (t1 = new H.ListIterator(iterable, iterable.length, 0, null); t1.moveNext$0();) {
          element = t1._current;
          if (test.call$1(element) === true)
            return element;
        }
        throw H.wrapException(H.IterableElementError_noElement());
      }, IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
        var $length;
        if (start < 0 || start > list.length)
          H.throwExpression(P.RangeError$range(start, 0, list.length));
        if (end < start || end > list.length)
          H.throwExpression(P.RangeError$range(end, start, list.length));
        $length = end - start;
        if ($length === 0)
          return;
        if (skipCount < 0)
          throw H.wrapException(P.ArgumentError$(skipCount));
        if (skipCount + $length > from.length)
          throw H.wrapException(H.IterableElementError_tooFew());
        H.Lists_copy(from, skipCount, list, start, $length);
      }}
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ReversedListIterable: {
    "^": "ListIterable;__internal$_source",
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_source);
    },
    elementAt$1: function(_, index) {
      var t1, t2;
      t1 = this.__internal$_source;
      t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    var t1, div, span;
    t1 = {};
    if (self.scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    if (self.MutationObserver != null && self.document != null) {
      div = self.document.createElement("div");
      span = self.document.createElement("span");
      t1.storedCallback_0 = null;
      new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
      return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
    } else if (self.setImmediate != null)
      return P._AsyncRun__scheduleImmediateWithSetImmediate$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 1],
  _AsyncRun__scheduleImmediateWithSetImmediate: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateWithSetImmediate$closure", 2, 0, 1],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P.Timer__createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 1],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_Future$error: function(error, stackTrace, $T) {
    var t1 = $.Zone__current;
    if (t1 !== C.C__RootZone)
      t1.toString;
    t1 = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, null, null, null), [$T]);
    t1._async$_Future$immediateError$2(error, stackTrace, $T);
    return t1;
  },
  Future_wait: function(futures, eagerError) {
    var t1, result, t2, t3, values;
    t1 = {};
    result = P._Future$(P.List);
    t1.values_0 = null;
    t1.remaining_1 = 0;
    t1.error_2 = null;
    t1.stackTrace_3 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError, result);
    for (t3 = new H.ListIterator(futures, futures.length, 0, null); t3.moveNext$0();)
      t3._current.then$2$onError(new P.Future_wait_closure(t1, eagerError, result, t1.remaining_1++), t2);
    t2 = t1.remaining_1;
    if (t2 === 0)
      return P._Future$immediate(C.List_empty, null);
    values = Array(t2);
    values.fixed$length = init;
    t1.values_0 = values;
    return result;
  },
  _asyncRunCallbackLoop: function() {
    var t1, t2;
    for (; t1 = $._nextCallback, t1 != null;) {
      $._lastPriorityCallback = null;
      t2 = t1.get$next();
      $._nextCallback = t2;
      if (t2 == null)
        $._lastCallback = null;
      t1.callback$0();
    }
  },
  _asyncRunCallback: [function() {
    $._isInCallbackLoop = true;
    try {
      P._asyncRunCallbackLoop();
    } finally {
      $._lastPriorityCallback = null;
      $._isInCallbackLoop = false;
      if ($._nextCallback != null)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    }
  }, "call$0", "_asyncRunCallback$closure", 0, 0, 2],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, replacement, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      $.Zone__current.toString;
      replacement = null;
      if (replacement == null)
        onError.call$2(e, s);
      else
        onError.call$2(J.get$error$x(replacement), replacement.get$stackTrace());
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
    else
      future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    var cancelFuture = subscription.cancel$0();
    if (!!J.getInterceptor(cancelFuture).$isFuture)
      cancelFuture.whenComplete$1(new P._cancelAndValue_closure(future, value));
    else
      future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createTimer(duration, callback);
    }
    return P.Timer__createTimer(duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  Timer_Timer$periodic: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P.Timer__createPeriodicTimer(duration, callback);
    }
    return P.Timer__createPeriodicTimer(duration, t1.bindUnaryCallback$2$runGuarded(callback, true));
  },
  Timer__createTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Timer__createPeriodicTimer: function(duration, callback) {
    var milliseconds = C.JSNumber_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    var entry, t1, t2;
    entry = new P._AsyncCallbackEntry(new P._rootHandleUncaughtError_closure(error, stackTrace), null);
    t1 = $._nextCallback;
    if (t1 == null) {
      $._lastPriorityCallback = entry;
      $._lastCallback = entry;
      $._nextCallback = entry;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._lastPriorityCallback = entry;
        $._nextCallback = entry;
      } else {
        entry.next = t2.next;
        t2.next = entry;
        $._lastPriorityCallback = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    }
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    var t1, newEntry;
    if (C.C__RootZone !== zone)
      f = zone.bindCallback$1(f);
    if ($._nextCallback == null) {
      t1 = new P._AsyncCallbackEntry(f, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      if (!$._isInCallbackLoop)
        $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      newEntry = new P._AsyncCallbackEntry(f, null);
      $._lastCallback.next = newEntry;
      $._lastCallback = newEntry;
    }
  },
  _AsyncRun__initializeScheduleImmediate_internalCallback: {
    "^": "Closure:12;box_0",
    call$1: function(_) {
      var t1, f;
      H.leaveJsAsync();
      t1 = this.box_0;
      f = t1.storedCallback_0;
      t1.storedCallback_0 = null;
      f.call$0();
    },
    $isFunction: true
  },
  _AsyncRun__initializeScheduleImmediate_closure: {
    "^": "Closure:14;box_0,div_1,span_2",
    call$1: function(callback) {
      var t1, t2;
      ++init.globalState.topEventLoop._activeJsAsyncCount;
      this.box_0.storedCallback_0 = callback;
      t1 = this.div_1;
      t2 = this.span_2;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $isFunction: true
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure:10;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    },
    $isFunction: true
  },
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: {
    "^": "Closure:10;callback_0",
    call$0: function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    },
    $isFunction: true
  },
  _UncaughtAsyncError: {
    "^": "AsyncError;error,stackTrace",
    toString$0: function(_) {
      var result, t1;
      result = "Uncaught Error: " + H.S(this.error);
      t1 = this.stackTrace;
      return t1 != null ? result + ("\nStack Trace:\n" + H.S(t1)) : result;
    },
    static: {_UncaughtAsyncError$: function(error, stackTrace) {
        return new P._UncaughtAsyncError(error, P._UncaughtAsyncError__getBestStackTrace(error, stackTrace));
      }, _UncaughtAsyncError__getBestStackTrace: function(error, stackTrace) {
        if (stackTrace != null)
          return stackTrace;
        if (!!J.getInterceptor(error).$isError)
          return error.get$stackTrace();
        return;
      }}
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_wait_handleError: {
    "^": "Closure:11;box_0,eagerError_1,result_2",
    call$2: function(theError, theStackTrace) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = t1.values_0;
      t1.values_0 = null;
      t3 = --t1.remaining_1;
      if (t2 != null)
        if (t3 === 0 || this.eagerError_1)
          this.result_2._completeError$2(theError, theStackTrace);
        else {
          t1.error_2 = theError;
          t1.stackTrace_3 = theStackTrace;
        }
      else if (t3 === 0 && !this.eagerError_1)
        this.result_2._completeError$2(t1.error_2, t1.stackTrace_3);
    },
    $isFunction: true
  },
  Future_wait_closure: {
    "^": "Closure:15;box_0,eagerError_3,result_4,pos_5",
    call$1: function(value) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = --t1.remaining_1;
      t3 = t1.values_0;
      if (t3 != null) {
        t1 = this.pos_5;
        if (t1 < 0 || t1 >= t3.length)
          return H.ioore(t3, t1);
        t3[t1] = value;
        if (t2 === 0)
          this.result_4._completeWithValue$1(t3);
      } else if (t2 === 0 && !this.eagerError_3)
        this.result_4._completeError$2(t1.error_2, t1.stackTrace_3);
    },
    $isFunction: true
  },
  _Completer: {
    "^": "Object;",
    completeError$2: [function(error, stackTrace) {
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 16, 17]
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    complete$1: function(_, value) {
      var t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener<,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    whenComplete$1: function(action) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = new P._Future(0, t1, null, null, null, null, null, action);
      result.$builtinTypeInfo = this.$builtinTypeInfo;
      this._addListener$1(result);
      return result;
    },
    _markPendingCompletion$0: function() {
      if (this._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      this._state = 1;
    },
    get$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P.AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener._nextListener = this._resultOrListeners;
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 18, 17],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              this._markPendingCompletion$0();
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      this._markPendingCompletion$0();
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    _async$_Future$immediateError$2: function(error, stackTrace, $T) {
      this._asyncCompleteError$2(error, stackTrace);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target._state = 2;
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target._state = 2;
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners._nextListener = null;
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, t5, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t2 = t1.source_4.get$_zone();
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(null, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners._nextListener != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (t2) {
            t4 = listeners._state === 2;
            if ((t4 ? null : listeners._onValueCallback) == null) {
              t5 = (t4 ? null : listeners._whenCompleteActionCallback) != null;
              t4 = t5;
            } else
              t4 = true;
          } else
            t4 = true;
          if (t4) {
            zone = listeners._zone;
            if (hasError) {
              t4 = t1.source_4.get$_zone().get$errorZone();
              zone.toString;
              t4 = t4 !== zone;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(null, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if ((listeners._state === 2 ? null : listeners._onValueCallback) != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if ((listeners._state === 2 ? null : listeners._whenCompleteActionCallback) != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            listeners._onValueCallback = null;
            listeners._errorTestCallback = null;
            listeners._onErrorCallback = null;
            listeners._whenCompleteActionCallback = null;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners._state = 2;
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            t2 = t3.listenerValueOrError_2;
            listeners._state = 4;
            listeners._resultOrListeners = t2;
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            t2 = J.get$error$x(asyncError);
            t3 = asyncError.get$stackTrace();
            listeners._state = 8;
            listeners._resultOrListeners = new P.AsyncError(t2, t3);
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure:10;this_0,listener_1",
    call$0: function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    },
    $isFunction: true
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure:12;target_0",
    call$1: function(value) {
      this.target_0._completeWithValue$1(value);
    },
    $isFunction: true
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure:19;target_1",
    call$2: function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $isFunction: true
  },
  _Future__asyncComplete_closure: {
    "^": "Closure:10;this_0,coreFuture_1",
    call$0: function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    },
    $isFunction: true
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure:10;this_2,value_3",
    call$0: function() {
      this.this_2._completeWithValue$1(this.value_3);
    },
    $isFunction: true
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure:10;this_0,error_1,stackTrace_2",
    call$0: function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure:20;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, exception;
      try {
        t1 = this.listener_3;
        t1 = t1._state === 2 ? null : t1._onValueCallback;
        this.box_1.listenerValueOrError_2 = this.zone_5.runUnary$2(t1, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P.AsyncError(e, s);
        return false;
      }

    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure:2;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, exception, t2, listenerValueOrError, t3, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1._state === 2 ? null : t1._errorTestCallback;
      matchesTest = true;
      if (test != null)
        try {
          matchesTest = this.zone_7.runUnary$2(test, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1._state === 2 ? null : t1._onErrorCallback;
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2)
            t4.listenerValueOrError_2 = t3.runBinary$3(errorCallback, J.get$error$x(asyncError), asyncError.get$stackTrace());
          else
            t4.listenerValueOrError_2 = t3.runUnary$2(errorCallback, J.get$error$x(asyncError));
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P.AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure:2;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, exception, t3;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.listener_9;
        t2 = t2._state === 2 ? null : t2._whenCompleteActionCallback;
        t1.completeResult_0 = this.zone_10.run$1(t2);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P.AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure:12;box_2,listener_11",
    call$1: function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure:19;box_0,listener_12",
    call$2: function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $isFunction: true
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next<",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.$int);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    }
  },
  Stream_contains_closure: {
    "^": "Closure;box_0,this_1,needle_2,future_3",
    call$1: function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_contains__closure: {
    "^": "Closure:10;needle_4,element_5",
    call$0: function() {
      return J.$eq(this.element_5, this.needle_4);
    },
    $isFunction: true
  },
  Stream_contains__closure0: {
    "^": "Closure:21;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    },
    $isFunction: true
  },
  Stream_contains_closure0: {
    "^": "Closure:10;future_7",
    call$0: function() {
      this.future_7._complete$1(false);
    },
    $isFunction: true
  },
  Stream_forEach_closure: {
    "^": "Closure;box_0,this_1,action_2,future_3",
    call$1: function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure:10;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    },
    $isFunction: true
  },
  Stream_forEach__closure0: {
    "^": "Closure:12;",
    call$1: function(_) {
    },
    $isFunction: true
  },
  Stream_forEach_closure0: {
    "^": "Closure:10;future_6",
    call$0: function() {
      this.future_6._complete$1(null);
    },
    $isFunction: true
  },
  Stream_length_closure: {
    "^": "Closure:12;box_0",
    call$1: function(_) {
      ++this.box_0.count_0;
    },
    $isFunction: true
  },
  Stream_length_closure0: {
    "^": "Closure:10;box_0,future_1",
    call$0: function() {
      this.future_1._complete$1(this.box_0.count_0);
    },
    $isFunction: true
  },
  StreamSubscription: {
    "^": "Object;"
  },
  _EventSink: {
    "^": "Object;"
  },
  _DelayedEvent: {
    "^": "Object;"
  },
  _cancelAndError_closure: {
    "^": "Closure:10;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure:22;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    },
    $isFunction: true
  },
  _cancelAndValue_closure: {
    "^": "Closure:10;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    },
    $isFunction: true
  },
  Timer: {
    "^": "Object;"
  },
  AsyncError: {
    "^": "Object;error>,stackTrace<",
    toString$0: function(_) {
      return J.toString$0(this.error);
    },
    $isError: true
  },
  _Zone: {
    "^": "Object;"
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure:10;error_0,stackTrace_1",
    call$0: function() {
      throw H.wrapException(P._UncaughtAsyncError$(this.error_0, this.stackTrace_1));
    },
    $isFunction: true
  },
  _RootZone: {
    "^": "_Zone;",
    get$parent: function(_) {
      return;
    },
    get$errorZone: function() {
      return this;
    },
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$0();
          return t1;
        }
        t1 = P._rootRun(null, null, this, f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        if (C.C__RootZone === $.Zone__current) {
          t1 = f.call$1(arg);
          return t1;
        }
        t1 = P._rootRunUnary(null, null, this, f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return P._rootHandleUncaughtError(null, null, this, e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindCallback_closure(this, f);
      else
        return new P._RootZone_bindCallback_closure0(this, f);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      if (runGuarded)
        return new P._RootZone_bindUnaryCallback_closure(this, f);
      else
        return new P._RootZone_bindUnaryCallback_closure0(this, f);
    },
    $index: function(_, key) {
      return;
    },
    run$1: function(f) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f);
    },
    runUnary$2: function(f, arg) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2);
    },
    static: {"^": "_RootZone__rootMap,_RootZone__rootDelegate"}
  },
  _RootZone_bindCallback_closure: {
    "^": "Closure:10;this_0,f_1",
    call$0: function() {
      return this.this_0.runGuarded$1(this.f_1);
    },
    $isFunction: true
  },
  _RootZone_bindCallback_closure0: {
    "^": "Closure:10;this_2,f_3",
    call$0: function() {
      return this.this_2.run$1(this.f_3);
    },
    $isFunction: true
  },
  _RootZone_bindUnaryCallback_closure: {
    "^": "Closure:12;this_0,f_1",
    call$1: function(arg) {
      return this.this_0.runUnaryGuarded$2(this.f_1, arg);
    },
    $isFunction: true
  },
  _RootZone_bindUnaryCallback_closure0: {
    "^": "Closure:12;this_2,f_3",
    call$1: function(arg) {
      return this.this_2.runUnary$2(this.f_3, arg);
    },
    $isFunction: true
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 3],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 4],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._HashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
    var t1 = new P._HashSet(0, null, null, null, null);
    t1.$builtinTypeInfo = [$E];
    return t1;
  },
  IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
    var parts, t1;
    if (P.IterableBase__isToStringVisiting(iterable)) {
      if (leftDelimiter === "(" && rightDelimiter === ")")
        return "(...)";
      return leftDelimiter + "..." + rightDelimiter;
    }
    parts = [];
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      P.IterableBase__iterablePartsToStrings(iterable, parts);
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = P.StringBuffer$(leftDelimiter);
    t1.writeAll$2(parts, ", ");
    t1.write$1(rightDelimiter);
    t1 = t1._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
    var buffer, t1;
    if (P.IterableBase__isToStringVisiting(iterable))
      return leftDelimiter + "..." + rightDelimiter;
    buffer = P.StringBuffer$(leftDelimiter);
    t1 = $.get$IterableBase__toStringVisiting();
    t1.push(iterable);
    try {
      buffer.writeAll$2(iterable, ", ");
    } finally {
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    buffer.write$1(rightDelimiter);
    t1 = buffer.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  IterableBase__isToStringVisiting: function(o) {
    var i, t1;
    for (i = 0; t1 = $.get$IterableBase__toStringVisiting(), i < t1.length; ++i) {
      t1 = t1[i];
      if (o == null ? t1 == null : o === t1)
        return true;
    }
    return false;
  },
  IterableBase__iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result;
    t1 = {};
    if (P.IterableBase__isToStringVisiting(m))
      return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$IterableBase__toStringVisiting().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$IterableBase__toStringVisiting();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    t1 = result.get$_contents();
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings;
      if (key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._keys = null;
        }
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure:12;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    },
    $isFunction: true
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      return new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_collection$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_collection$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_collection$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_collection$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell._collection$_value);
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_collection$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_collection$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure:12;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    },
    $isFunction: true
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_collection$_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_collection$_elements",
    get$iterator: function(_) {
      return new P.HashSetIterator(this, this._computeElements$0(), 0, null);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++this._collection$_length;
      this._collection$_elements = null;
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --this._collection$_length;
      this._collection$_elements = null;
      bucket.splice(index, 1);
      return true;
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._collection$_elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._collection$_elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._collection$_elements = null;
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._collection$_elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    static: {_HashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  HashSetIterator: {
    "^": "Object;_set,_collection$_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._collection$_elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._collection$_elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = new P.LinkedHashSetIterator(this, this._modifications, null, null);
      t1._cell = this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_collection$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_collection$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell._next;
      }
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_collection$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_collection$_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_collection$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  UnmodifiableListView: {
    "^": "UnmodifiableListBase;_collection$_source",
    get$length: function(_) {
      return this._collection$_source.length;
    },
    $index: function(_, index) {
      var t1 = this._collection$_source;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }
  },
  HashMap: {
    "^": "Object;",
    $isMap: true
  },
  _HashSetBase: {
    "^": "SetBase;"
  },
  IterableBase: {
    "^": "Object;",
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element;
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        if (remaining === 0)
          return element;
        --remaining;
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  },
  ListBase: {
    "^": "Object_ListMixin;"
  },
  Object_ListMixin: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), 0, null);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, 0);
    },
    contains$1: function(receiver, element) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < this.get$length(receiver); ++i) {
        if (J.$eq(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, t1;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else
        result = H.setRuntimeTypeInfo(Array(this.get$length(receiver)), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    _rangeCheck$2: function(receiver, start, end) {
      if (start < 0 || start > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      if (end < start || end > this.get$length(receiver))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i, t1;
      this._rangeCheck$2(receiver, start, end);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    indexOf$2: function(receiver, element, startIndex) {
      var t1, i;
      t1 = this.get$length(receiver);
      if (typeof startIndex !== "number")
        return startIndex.$ge();
      if (startIndex >= t1)
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (i = startIndex; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i;
      startIndex = this.get$length(receiver) - 1;
      for (i = startIndex; i >= 0; --i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  Maps_mapToString_closure: {
    "^": "Closure:11;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $isFunction: true
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      return new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    add$1: function(_, element) {
      this._add$1(element);
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      C.JSArray_methods.checkMutable$1(newTable, "set range");
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t2 = this._head;
      t1 = this._table;
      C.JSArray_methods.checkMutable$1(newTable, "set range");
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t2, t1, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    static: {"^": "ListQueue__INITIAL_CAPACITY", ListQueue$: function(initialCapacity, $E) {
        var t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [$E]);
        t1.ListQueue$1(initialCapacity, $E);
        return t1;
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  SetMixin: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "") {
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        } while (iterator.moveNext$0());
      } else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        }
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isEfficientLength: true
  },
  SetBase: {
    "^": "SetMixin;"
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDartLazy: function(object) {
    var i;
    if (object == null)
      return;
    if (typeof object != "object")
      return object;
    if (Object.getPrototypeOf(object) !== Array.prototype)
      return new P._JsonMap(object, Object.create(null), null);
    for (i = 0; i < object.length; ++i)
      object[i] = P._convertJsonToDartLazy(object[i]);
    return object;
  },
  _parseJson: function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(P.ArgumentError$(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e), null, null));
    }

    return P._convertJsonToDartLazy(parsed);
  },
  _JsonMap: {
    "^": "Object;_original,_processed,_data",
    $index: function(_, key) {
      var t1, result;
      t1 = this._processed;
      if (t1 == null)
        return this._data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1 === 0;
    },
    get$keys: function() {
      if (this._processed == null)
        return this._data.get$keys();
      var t1 = this._convert$_computeKeys$0();
      return H.SubListIterable$(t1, 0, null, H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0));
    },
    get$values: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._data;
        return t1.get$values(t1);
      }
      return H.MappedIterable_MappedIterable(this._convert$_computeKeys$0(), new P._JsonMap_values_closure(this), null, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original;
      if (this._processed == null)
        this._data.$indexSet(0, key, value);
      else if (this.containsKey$1(key)) {
        processed = this._processed;
        processed[key] = value;
        original = this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(key) {
      if (this._processed == null)
        return this._data.containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value;
      if (this._processed == null)
        return this._data.forEach$1(0, f);
      keys = this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(this._original[key]);
          this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== this._data)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _convert$_computeKeys$0: function() {
      var keys = this._data;
      if (keys == null) {
        keys = Object.keys(this._original);
        this._data = keys;
      }
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key;
      if (this._processed == null)
        return this._data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      keys = this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, this.$index(0, key));
      }
      if (t1 === 0)
        keys.push(null);
      else
        C.JSArray_methods.set$length(keys, 0);
      this._processed = null;
      this._original = null;
      this._data = result;
      return result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $isMap: true,
    $asMap: function() {
      return [null, null];
    }
  },
  _JsonMap_values_closure: {
    "^": "Closure:12;this_0",
    call$1: function(each) {
      return this.this_0.$index(0, each);
    },
    $isFunction: true
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;"
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  },
  JsonDecoder: {
    "^": "Converter;_reviver"
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, encoder, t3;
      t1 = J.getInterceptor$asx(string);
      t2 = t1.get$length(string);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 3;
      if (typeof t2 !== "number" || Math.floor(t2) !== t2)
        H.throwExpression(P.ArgumentError$("Invalid length " + H.S(t2)));
      t2 = new Uint8Array(t2);
      encoder = new P._Utf8Encoder(0, 0, t2);
      if (encoder._fillBuffer$3(string, 0, t1.get$length(string)) !== t1.get$length(string)) {
        t3 = t1.get$length(string);
        if (typeof t3 !== "number")
          return t3.$sub();
        encoder._writeSurrogate$2(t1.codeUnitAt$1(string, t3 - 1), 0);
      }
      return new Uint8Array(t2.subarray(0, C.NativeUint8List_methods._checkSublistArguments$3(t2, 0, encoder._bufferIndex, t2.length)));
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = (J.codeUnitAt$1$s(str, end - 1) & 64512) === 55296;
      } else
        t1 = false;
      if (t1) {
        if (typeof end !== "number")
          return end.$sub();
        --end;
      }
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (this._writeSurrogate$2(codeUnit, C.JSString_methods.codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, t1, decoder;
      buffer = P.StringBuffer$("");
      t1 = this._allowMalformed;
      decoder = new P._Utf8Decoder(t1, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, J.get$length$asx(codeUnits));
      if (decoder._expectedUnits > 0) {
        if (!t1)
          H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence", null, null));
        buffer.write$1(H.Primitives_stringFromCharCode(65533));
        decoder._convert$_value = 0;
        decoder._expectedUnits = 0;
        decoder._extraUnits = 0;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, t3, t4, t5, i, unit, t6, oneBytes, i0;
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t1 = new P._Utf8Decoder_convert_scanOneByteCharacters(endIndex);
      t2 = new P._Utf8Decoder_convert_addSingleBytes(this, codeUnits, startIndex, endIndex);
      $loop$0:
        for (t3 = this._stringSink, t4 = !this._allowMalformed, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                if (typeof unit !== "number")
                  return unit.$and();
                if ((unit & 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSNumber_methods.toRadixString$1(unit, 16), null, null));
                  this._isFirstCharacter = false;
                  t6 = H.Primitives_stringFromCharCode(65533);
                  t3._contents += t6;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              if (value <= C.List_127_2047_65535_1114111[t6]) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), null, null));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279) {
                t6 = H.Primitives_stringFromCharCode(value);
                t3._contents += t6;
              }
              this._isFirstCharacter = false;
            }
          }
          for (; i < endIndex; i = i0) {
            oneBytes = t1.call$2(codeUnits, i);
            if (J.$gt$n(oneBytes, 0)) {
              this._isFirstCharacter = false;
              if (typeof oneBytes !== "number")
                return H.iae(oneBytes);
              i0 = i + oneBytes;
              t2.call$2(i, i0);
              if (i0 === endIndex)
                break;
              i = i0;
            }
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0) === true) {
              if (t4)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + J.toRadixString$1$n(t6.$negate(unit), 16), null, null));
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
            } else {
              if (typeof unit !== "number")
                return unit.$and();
              if ((unit & 224) === 192) {
                value = unit & 31;
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if ((unit & 240) === 224) {
                value = unit & 15;
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if ((unit & 248) === 240 && unit < 245) {
                value = unit & 7;
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + C.JSNumber_methods.toRadixString$1(unit, 16), null, null));
              this._isFirstCharacter = false;
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"^": "_Utf8Decoder__LIMITS"}
  },
  _Utf8Decoder_convert_scanOneByteCharacters: {
    "^": "Closure:23;endIndex_0",
    call$2: function(units, from) {
      var to, t1, i, unit;
      to = this.endIndex_0;
      for (t1 = J.getInterceptor$asx(units), i = from; i < to; ++i) {
        unit = t1.$index(units, i);
        if (typeof unit !== "number")
          return unit.$and();
        if ((unit & 127) !== unit)
          return i - from;
      }
      return to - from;
    },
    $isFunction: true
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure:24;this_1,codeUnits_2,startIndex_3,endIndex_4",
    call$2: function(from, to) {
      var t1, t2, t3;
      t1 = from === 0 && to === J.get$length$asx(this.codeUnits_2);
      t2 = this.this_1;
      t3 = this.codeUnits_2;
      if (t1)
        t2._stringSink.write$1(P.String_String$fromCharCodes(t3));
      else
        t2._stringSink.write$1(P.String_String$fromCharCodes(J.sublist$2$ax(t3, from, to)));
    },
    $isFunction: true
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  _symbolToString: function(symbol) {
    return H.Symbol_getName(symbol);
  },
  Error_safeToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 5],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 6],
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(charCodes.constructor !== Array ? P.List_List$from(charCodes, true, null) : charCodes);
  },
  Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
    var t1, result, bytes, t2, i, $byte, t3;
    t1 = new P.Uri__uriEncode_byteToHex();
    result = P.StringBuffer$("");
    bytes = encoding.get$encoder().convert$1(text);
    for (t2 = bytes.length, i = 0; i < t2; ++i) {
      $byte = bytes[i];
      if ($byte < 128) {
        t3 = $byte >>> 4;
        if (t3 >= 8)
          return H.ioore(canonicalTable, t3);
        t3 = (canonicalTable[t3] & C.JSInt_methods._shlPositive$1(1, $byte & 15)) !== 0;
      } else
        t3 = false;
      if (t3) {
        t3 = H.Primitives_stringFromCharCode($byte);
        result._contents += t3;
      } else if (spaceToPlus && $byte === 32) {
        t3 = H.Primitives_stringFromCharCode(43);
        result._contents += t3;
      } else {
        t3 = H.Primitives_stringFromCharCode(37);
        result._contents += t3;
        t1.call$2($byte, result);
      }
    }
    t1 = result._contents;
    return t1.charCodeAt(0) == 0 ? t1 : t1;
  },
  Uri__hexCharPairToByte: function(s, pos) {
    var $byte, i, charCode;
    for ($byte = 0, i = 0; i < 2; ++i) {
      charCode = C.JSString_methods.codeUnitAt$1(s, pos + i);
      if (48 <= charCode && charCode <= 57)
        $byte = $byte * 16 + charCode - 48;
      else {
        charCode |= 32;
        if (97 <= charCode && charCode <= 102)
          $byte = $byte * 16 + charCode - 87;
        else
          throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
      }
    }
    return $byte;
  },
  Uri__uriDecode: function(text, encoding, plusToSpace) {
    var t1, simple, i, t2, codeUnit, bytes, allowMalformed;
    t1 = J.getInterceptor$asx(text);
    simple = true;
    i = 0;
    while (true) {
      t2 = t1.get$length(text);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2 && simple))
        break;
      codeUnit = t1.codeUnitAt$1(text, i);
      simple = codeUnit !== 37 && codeUnit !== 43;
      ++i;
    }
    if (simple)
      if (encoding === C.Utf8Codec_false || false)
        return text;
      else
        bytes = t1.get$codeUnits(text);
    else {
      bytes = [];
      i = 0;
      while (true) {
        t2 = t1.get$length(text);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        codeUnit = t1.codeUnitAt$1(text, i);
        if (codeUnit > 127)
          throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
        if (codeUnit === 37) {
          if (i + 3 > text.length)
            throw H.wrapException(P.ArgumentError$("Truncated URI"));
          bytes.push(P.Uri__hexCharPairToByte(text, i + 1));
          i += 2;
        } else if (plusToSpace && codeUnit === 43)
          bytes.push(32);
        else
          bytes.push(codeUnit);
        ++i;
      }
    }
    allowMalformed = encoding._allowMalformed;
    return new P.Utf8Decoder(allowMalformed).convert$1(bytes);
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure:25;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(P._symbolToString(key));
    },
    $isFunction: true
  },
  bool: {
    "^": "Object;",
    $isbool: true
  },
  "+bool": 0,
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, C.JSNumber_methods.$sub(this._duration, other.get$_duration()), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSNumber_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSNumber_methods.remainder$1(C.JSNumber_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSNumber_methods.remainder$1(t2, 1000000));
      return H.S(C.JSNumber_methods._tdivFast$1(t2, 3600000000)) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    abs$0: function(_) {
      return P.Duration$(0, 0, Math.abs(this._duration), 0, 0, 0);
    },
    $negate: function(_) {
      return P.Duration$(0, 0, -this._duration, 0, 0, 0);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure:26;",
    call$1: function(n) {
      if (n >= 100000)
        return H.S(n);
      if (n >= 10000)
        return "0" + H.S(n);
      if (n >= 1000)
        return "00" + H.S(n);
      if (n >= 100)
        return "000" + H.S(n);
      if (n >= 10)
        return "0000" + H.S(n);
      return "00000" + H.S(n);
    },
    $isFunction: true
  },
  Duration_toString_twoDigits: {
    "^": "Closure:26;",
    call$1: function(n) {
      if (n >= 10)
        return H.S(n);
      return "0" + H.S(n);
    },
    $isFunction: true
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + start + ".." + H.S(end));
      }}
  },
  UnsupportedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message>",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message>",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(this.modifiedObject)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message>",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    },
    $isException: true
  },
  FormatException: {
    "^": "Object;message>,source,offset>",
    toString$0: function(_) {
      var t1, report;
      t1 = this.message;
      report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      return report;
    },
    $isFormatException: true,
    $isException: true,
    static: {FormatException$: function(message, source, offset) {
        return new P.FormatException(message, source, offset);
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  "+List": 0,
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    }
  },
  Pattern: {
    "^": "Object;"
  },
  Match: {
    "^": "Object;"
  },
  StackTrace: {
    "^": "Object;"
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0) {
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      } else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    StringBuffer$1: function($content) {
      this._contents = $content;
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol: {
    "^": "Object;"
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure:11;",
    call$2: function($byte, buffer) {
      if (typeof $byte !== "number")
        return $byte.$shr();
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", C.JSNumber_methods._shrOtherPositive$1($byte, 4))));
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", $byte & 15)));
    },
    $isFunction: true
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  CanvasElement_CanvasElement: function(height, width) {
    var e = document.createElement("canvas", null);
    if (width != null)
      J.set$width$x(e, width);
    if (height != null)
      J.set$height$x(e, height);
    return e;
  },
  CssStyleDeclaration__camelCase: function(hyphenated) {
    return hyphenated.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, C.JS_CONST_s8I);
  },
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  HttpRequest_getString: function(url, onProgress, withCredentials) {
    return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, method == null ? "GET" : method, url, true);
    if (responseType != null)
      xhr.responseType = responseType;
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "load", false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, "error", false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  },
  ImageElement_ImageElement: function(height, src, width) {
    var e = document.createElement("img", null);
    if (src != null)
      J.set$src$x(e, src);
    if (width != null)
      J.set$width$x(e, width);
    if (height != null)
      J.set$height$x(e, height);
    return e;
  },
  InputElement_InputElement: function(type) {
    var e, exception;
    e = document.createElement("input", null);
    if (type != null)
      try {
        J.set$type$x(e, type);
      } catch (exception) {
        H.unwrapException(exception);
      }

    return e;
  },
  OptionElement_OptionElement$_: function(data, value, defaultSelected, selected) {
    return new Option(data, value, defaultSelected, selected);
  },
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window;
    if (e == null)
      return;
    if ("postMessage" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _convertNativeToDart_XHR_Response: function(o) {
    if (!!J.getInterceptor(o).$isDocument0)
      return o;
    return P.convertNativeToDart_AcceptStructuredClone(o, true);
  },
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element0;",
    "%": "HTMLAppletElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLLegendElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLParagraphElement|HTMLPictureElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLTableCaptionElement|HTMLTableColElement|HTMLTableSectionElement|HTMLTitleElement|HTMLUnknownElement;HTMLElement"
  },
  AnchorElement: {
    "^": "HtmlElement;target=,type},hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAnchorElement"
  },
  ApplicationCacheErrorEvent: {
    "^": "Event;message=",
    "%": "ApplicationCacheErrorEvent"
  },
  AreaElement: {
    "^": "HtmlElement;target=,hostname=,href},port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BRElement: {
    "^": "HtmlElement;",
    $isBRElement: true,
    "%": "HTMLBRElement"
  },
  BaseElement: {
    "^": "HtmlElement;href},target=",
    "%": "HTMLBaseElement"
  },
  Blob: {
    "^": "Interceptor;",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    get$onBlur: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "blur", false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "load", false), [null]);
    },
    get$onScroll: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "scroll", false), [null]);
    },
    $isBodyElement: true,
    $isEventTarget: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;disabled},name%,type},value%",
    $isButtonElement: true,
    "%": "HTMLButtonElement"
  },
  CanvasElement: {
    "^": "HtmlElement;height},width}",
    get$context2D: function(receiver) {
      return receiver.getContext("2d");
    },
    "%": "HTMLCanvasElement"
  },
  CanvasRenderingContext2D: {
    "^": "Interceptor;",
    fillText$4: function(receiver, text, x, y, maxWidth) {
      receiver.fillText(text, x, y);
    },
    fillText$3: function($receiver, text, x, y) {
      return this.fillText$4($receiver, text, x, y, null);
    },
    "%": "CanvasRenderingContext2D"
  },
  CharacterData: {
    "^": "Node0;data=,length=",
    "%": "Comment;CharacterData"
  },
  CompositionEvent: {
    "^": "UIEvent;data=",
    "%": "CompositionEvent"
  },
  ContentElement: {
    "^": "HtmlElement;",
    select$0: function($receiver) {
      return $receiver.select.call$0();
    },
    "%": "HTMLContentElement"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = this._getPropertyValueHelper$1(receiver, propertyName);
      return propValue != null ? propValue : "";
    },
    _getPropertyValueHelper$1: function(receiver, propertyName) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return receiver.getPropertyValue(propertyName);
      else {
        t1 = P.Device_cssPrefix();
        if (t1 == null)
          return t1.$add();
        return receiver.getPropertyValue(t1 + propertyName);
      }
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var t1;
      if (W.CssStyleDeclaration__camelCase(propertyName) in receiver)
        return this._setPropertyHelper$3(receiver, propertyName, value, priority);
      else {
        t1 = P.Device_cssPrefix();
        if (t1 == null)
          return t1.$add();
        return this._setPropertyHelper$3(receiver, t1 + propertyName, value, priority);
      }
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (value == null)
          value = "";
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  DeviceLightEvent: {
    "^": "Event;value=",
    "%": "DeviceLightEvent"
  },
  DialogElement: {
    "^": "HtmlElement;",
    show$0: function(receiver) {
      return receiver.show();
    },
    "%": "HTMLDialogElement"
  },
  DivElement: {
    "^": "HtmlElement;",
    $isDivElement: true,
    "%": "HTMLDivElement"
  },
  Document0: {
    "^": "Node0;documentElement=",
    createElement$2: function(receiver, tagName, typeExtension) {
      return receiver.createElement(tagName, typeExtension);
    },
    createElement$1: function($receiver, tagName) {
      return this.createElement$2($receiver, tagName, null);
    },
    $isDocument0: true,
    "%": "XMLDocument;Document"
  },
  DocumentFragment: {
    "^": "Node0;",
    appendText$1: function(receiver, text) {
      receiver.appendChild(document.createTextNode(text));
    },
    "%": "DocumentFragment|ShadowRoot"
  },
  DomError: {
    "^": "Interceptor;message=,name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "^": "Interceptor;message=",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "DOMException"
  },
  Element0: {
    "^": "Node0;title%,className%,id=,style=,tagName=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    attributes$0: function($receiver) {
      return this.get$attributes($receiver).call$0();
    },
    set$attributes: function(receiver, value) {
      var t1, key;
      new W._ElementAttributeMap(receiver).clear$0(0);
      for (t1 = J.get$iterator$ax(value.get$keys()); t1.moveNext$0();) {
        key = t1.get$current();
        receiver.setAttribute(key, value.$index(0, key));
      }
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    get$client: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.clientHeight)), null);
    },
    get$offset: function(receiver) {
      return P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(receiver.offsetHeight)), null);
    },
    appendText$1: function(receiver, text) {
      receiver.appendChild(document.createTextNode(text));
    },
    get$localName: function(receiver) {
      return receiver.localName;
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    getAttribute$1: function(receiver, $name) {
      return receiver.getAttribute($name);
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    getClientRects$0: function(receiver) {
      return receiver.getClientRects();
    },
    setAttributeNS$3: function(receiver, namespaceURI, qualifiedName, value) {
      return receiver.setAttributeNS(namespaceURI, qualifiedName, value);
    },
    get$onBlur: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "blur", false), [null]);
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "change", false), [null]);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [null]);
    },
    get$onContextMenu: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "contextmenu", false), [null]);
    },
    get$onDoubleClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "dblclick", false), [null]);
    },
    get$onInput: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "input", false), [null]);
    },
    get$onKeyDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keydown", false), [null]);
    },
    get$onKeyUp: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keyup", false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "load", false), [null]);
    },
    get$onMouseDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousedown", false), [null]);
    },
    get$onMouseMove: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousemove", false), [null]);
    },
    get$onMouseOut: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseout", false), [null]);
    },
    get$onMouseOver: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseover", false), [null]);
    },
    get$onMouseUp: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseup", false), [null]);
    },
    get$onScroll: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "scroll", false), [null]);
    },
    $isElement0: true,
    $isEventTarget: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;height},name%,src},type},width}",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=,message=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;",
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    "%": "AnimationPlayerEvent|AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|FetchEvent|GamepadEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|SpeechRecognitionEvent|StorageEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;ClipboardEvent|Event|InputEvent"
  },
  EventTarget: {
    "^": "Interceptor;",
    addEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    _addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    _removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;disabled},name%",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    $isFile: true,
    "%": "File"
  },
  FormElement: {
    "^": "HtmlElement;length=,name%,target=",
    "%": "HTMLFormElement"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HtmlDocument: {
    "^": "Document0;",
    get$title: function(receiver) {
      return receiver.title;
    },
    "%": "HTMLDocument"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;responseText=",
    get$response: function(receiver) {
      return W._convertNativeToDart_XHR_Response(receiver.response);
    },
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$2: function($receiver, method, url) {
      return $receiver.open(method, url);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;height},name%,src},width}",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;data=",
    $isImageData: true,
    "%": "ImageData"
  },
  ImageElement: {
    "^": "HtmlElement;height},naturalWidth=,src},width}",
    $isImageElement: true,
    "%": "HTMLImageElement"
  },
  InputElement: {
    "^": "HtmlElement;checked%,disabled},height},name%,size},src},type},value%,width}",
    defaultValue$0: function($receiver) {
      return $receiver.defaultValue.call$0();
    },
    select$0: function(receiver) {
      return receiver.select();
    },
    $isInputElement: true,
    $isElement0: true,
    $isEventTarget: true,
    $isNode0: true,
    $isCheckboxInputElement: true,
    $isTextInputElement: true,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "^": "UIEvent;ctrlKey=,metaKey=,shiftKey=",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;disabled},name%",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    $isLIElement: true,
    "%": "HTMLLIElement"
  },
  LabelElement: {
    "^": "HtmlElement;htmlFor}",
    "%": "HTMLLabelElement"
  },
  LinkElement: {
    "^": "HtmlElement;disabled},href},type}",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name%",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=,src}",
    "%": "HTMLAudioElement;HTMLMediaElement"
  },
  MediaKeyEvent: {
    "^": "Event;errorCode=,message=",
    "%": "MediaKeyEvent"
  },
  MediaKeyMessageEvent: {
    "^": "Event;message=",
    "%": "MediaKeyMessageEvent"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    "%": "MediaStream"
  },
  MessageEvent: {
    "^": "Event;",
    get$data: function(receiver) {
      return P.convertNativeToDart_AcceptStructuredClone(receiver.data, true);
    },
    "%": "MessageEvent"
  },
  MetaElement: {
    "^": "HtmlElement;name%",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MidiMessageEvent: {
    "^": "Event;data=",
    "%": "MIDIMessageEvent"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "^": "UIEvent;button=,ctrlKey=,metaKey=,shiftKey=",
    get$client: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]);
    },
    get$offset: function(receiver) {
      var target, point;
      if (!!receiver.offsetX)
        return H.setRuntimeTypeInfo(new P.Point(receiver.offsetX, receiver.offsetY), [null]);
      else {
        if (!J.getInterceptor(W._convertNativeToDart_EventTarget(receiver.target)).$isElement0)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = W._convertNativeToDart_EventTarget(receiver.target);
        point = H.setRuntimeTypeInfo(new P.Point(receiver.clientX, receiver.clientY), [null]).$sub(0, J.get$topLeft$x(J.getBoundingClientRect$0$x(target)));
        return H.setRuntimeTypeInfo(new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y)), [null]);
      }
    },
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  Navigator: {
    "^": "NavigatorCpu;",
    get$language: function(receiver) {
      return receiver.language || receiver.userLanguage;
    },
    "%": "Navigator"
  },
  NavigatorCpu: {
    "^": "Interceptor;",
    "%": ";NavigatorCPU"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;message=,name=",
    "%": "NavigatorUserMediaError"
  },
  Node0: {
    "^": "EventTarget;childNodes=,firstChild=,nodeName=,nodeType=,nodeValue=,ownerDocument=,parent:parentElement=,parentNode=,text:textContent%",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    nextNode$0: function($receiver) {
      return $receiver.nextSibling.call$0();
    },
    previousNode$0: function($receiver) {
      return $receiver.previousSibling.call$0();
    },
    append$1: function(receiver, newChild) {
      return receiver.appendChild(newChild);
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    hasChildNodes$0: function(receiver) {
      return receiver.hasChildNodes();
    },
    insertBefore$2: function(receiver, newChild, refChild) {
      return receiver.insertBefore(newChild, refChild);
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode0: true,
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;type}",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;data=,height},name%,type},width}",
    "%": "HTMLObjectElement"
  },
  OptGroupElement: {
    "^": "HtmlElement;disabled}",
    "%": "HTMLOptGroupElement"
  },
  OptionElement: {
    "^": "HtmlElement;disabled},selected=,value%",
    $isOptionElement: true,
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;name%,value%",
    defaultValue$0: function($receiver) {
      return $receiver.defaultValue.call$0();
    },
    "%": "HTMLOutputElement"
  },
  ParamElement: {
    "^": "HtmlElement;name%,value%",
    "%": "HTMLParamElement"
  },
  PositionError: {
    "^": "Interceptor;message=",
    "%": "PositionError"
  },
  ProcessingInstruction0: {
    "^": "CharacterData;target=",
    "%": "ProcessingInstruction"
  },
  ProgressElement: {
    "^": "HtmlElement;position=,value%",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;",
    "%": "ProgressEvent|ResourceProgressEvent|XMLHttpRequestProgressEvent"
  },
  PushEvent: {
    "^": "Event;data=",
    "%": "PushEvent"
  },
  Range: {
    "^": "Interceptor;",
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  ScriptElement: {
    "^": "HtmlElement;src},type}",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;disabled},length=,name%,size},value%",
    get$options: function(receiver) {
      var t1 = W._FrozenElementList$_wrap(receiver.querySelectorAll("option"), null);
      t1 = t1.where$1(t1, new W.SelectElement_options_closure());
      return H.setRuntimeTypeInfo(new P.UnmodifiableListView(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0))), [null]);
    },
    get$selectedOptions: function(receiver) {
      var t1, t2;
      if (receiver.multiple === true) {
        t1 = this.get$options(receiver);
        t1 = t1.where$1(t1, new W.SelectElement_selectedOptions_closure());
        return H.setRuntimeTypeInfo(new P.UnmodifiableListView(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0))), [null]);
      } else {
        t1 = this.get$options(receiver);
        t2 = receiver.selectedIndex;
        t1 = t1._collection$_source;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        return [t1[t2]];
      }
    },
    $isSelectElement: true,
    "%": "HTMLSelectElement"
  },
  Selection: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Selection"
  },
  SourceElement: {
    "^": "HtmlElement;src},type}",
    "%": "HTMLSourceElement"
  },
  SpanElement: {
    "^": "HtmlElement;",
    $isSpanElement: true,
    "%": "HTMLSpanElement"
  },
  SpeechRecognitionError: {
    "^": "Event;error=,message=",
    "%": "SpeechRecognitionError"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  StyleElement: {
    "^": "HtmlElement;disabled},type}",
    "%": "HTMLStyleElement"
  },
  TableCellElement: {
    "^": "HtmlElement;colSpan}",
    $isTableCellElement: true,
    "%": "HTMLTableCellElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement"
  },
  TableElement: {
    "^": "HtmlElement;",
    $isTableElement: true,
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "^": "HtmlElement;",
    $isTableRowElement: true,
    "%": "HTMLTableRowElement"
  },
  TemplateElement: {
    "^": "HtmlElement;",
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  Text: {
    "^": "CharacterData;",
    $isText: true,
    "%": "CDATASection|Text"
  },
  TextAreaElement: {
    "^": "HtmlElement;disabled},name%,value%",
    defaultValue$0: function($receiver) {
      return $receiver.defaultValue.call$0();
    },
    select$0: function(receiver) {
      return receiver.select();
    },
    "%": "HTMLTextAreaElement"
  },
  TextEvent: {
    "^": "UIEvent;data=",
    "%": "TextEvent"
  },
  TouchEvent: {
    "^": "UIEvent;ctrlKey=,metaKey=,shiftKey=",
    "%": "TouchEvent"
  },
  TrackElement: {
    "^": "HtmlElement;src}",
    defaultValue$0: function($receiver) {
      return $receiver.default.call$0();
    },
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;",
    "%": "FocusEvent|SVGZoomEvent;UIEvent"
  },
  UListElement: {
    "^": "HtmlElement;",
    $isUListElement: true,
    "%": "HTMLUListElement"
  },
  VideoElement: {
    "^": "MediaElement;height},width}",
    "%": "HTMLVideoElement"
  },
  Window: {
    "^": "EventTarget;name=",
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    postMessage$3: function(receiver, message, targetOrigin, messagePorts) {
      receiver.postMessage(P._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
      return;
    },
    postMessage$2: function($receiver, message, targetOrigin) {
      return this.postMessage$3($receiver, message, targetOrigin, null);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node0;name=,value=",
    get$text: function(receiver) {
      return receiver.textContent;
    },
    set$text: function(receiver, value) {
      receiver.textContent = value;
    },
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(W._JenkinsSmiHash_combine0(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$topLeft: function(receiver) {
      return H.setRuntimeTypeInfo(new P.Point(receiver.left, receiver.top), [null]);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _ClientRectList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isJavaScriptIndexingBehavior: true,
    $isList: true,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: true,
    "%": "ClientRectList|DOMRectList"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true,
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  _CssStyleDeclarationSet: {
    "^": "Object_CssStyleDeclarationBase;_elementIterable,_elementCssStyleDeclarationSetIterable",
    getPropertyValue$1: function(_, propertyName) {
      var t1 = this._elementCssStyleDeclarationSetIterable;
      return J.getPropertyValue$1$x(t1.get$first(t1), propertyName);
    },
    setProperty$3: function(_, propertyName, value, priority) {
      this._elementCssStyleDeclarationSetIterable.forEach$1(0, new W._CssStyleDeclarationSet_setProperty_closure(propertyName, value, priority));
    },
    _CssStyleDeclarationSet$1: function(_elementIterable) {
      this._elementCssStyleDeclarationSetIterable = H.setRuntimeTypeInfo(new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._CssStyleDeclarationSet_closure()), [null, null]);
    },
    static: {_CssStyleDeclarationSet$: function(_elementIterable) {
        var t1 = new W._CssStyleDeclarationSet(_elementIterable, null);
        t1._CssStyleDeclarationSet$1(_elementIterable);
        return t1;
      }}
  },
  Object_CssStyleDeclarationBase: {
    "^": "Object+CssStyleDeclarationBase;"
  },
  _CssStyleDeclarationSet_closure: {
    "^": "Closure:12;",
    call$1: function(e) {
      return J.get$style$x(e);
    },
    $isFunction: true
  },
  _CssStyleDeclarationSet_setProperty_closure: {
    "^": "Closure:12;propertyName_0,value_1,priority_2",
    call$1: function(e) {
      return J.setProperty$3$x(e, this.propertyName_0, this.value_1, this.priority_2);
    },
    $isFunction: true
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    set$background: function(receiver, value) {
      this.setProperty$3(receiver, "background", value, "");
    },
    set$border: function(receiver, value) {
      this.setProperty$3(receiver, "border", value, "");
    },
    set$bottom: function(receiver, value) {
      this.setProperty$3(receiver, "bottom", value, "");
    },
    set$color: function(receiver, value) {
      this.setProperty$3(receiver, "color", value, "");
    },
    set$cursor: function(receiver, value) {
      this.setProperty$3(receiver, "cursor", value, "");
    },
    get$display: function(receiver) {
      return this.getPropertyValue$1(receiver, "display");
    },
    set$display: function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    },
    set$fontFamily: function(receiver, value) {
      this.setProperty$3(receiver, "font-family", value, "");
    },
    set$fontSize: function(receiver, value) {
      this.setProperty$3(receiver, "font-size", value, "");
    },
    set$fontStyle: function(receiver, value) {
      this.setProperty$3(receiver, "font-style", value, "");
    },
    set$fontWeight: function(receiver, value) {
      this.setProperty$3(receiver, "font-weight", value, "");
    },
    set$height: function(receiver, value) {
      this.setProperty$3(receiver, "height", value, "");
    },
    set$left: function(receiver, value) {
      this.setProperty$3(receiver, "left", value, "");
    },
    set$marginRight: function(receiver, value) {
      this.setProperty$3(receiver, "margin-right", value, "");
    },
    get$position: function(receiver) {
      return this.getPropertyValue$1(receiver, "position");
    },
    set$position: function(receiver, value) {
      this.setProperty$3(receiver, "position", value, "");
    },
    set$textAlign: function(receiver, value) {
      this.setProperty$3(receiver, "text-align", value, "");
    },
    set$textDecoration: function(receiver, value) {
      this.setProperty$3(receiver, "text-decoration", value, "");
    },
    set$top: function(receiver, value) {
      this.setProperty$3(receiver, "top", value, "");
    },
    set$verticalAlign: function(receiver, value) {
      this.setProperty$3(receiver, "vertical-align", value, "");
    },
    get$visibility: function(receiver) {
      return this.getPropertyValue$1(receiver, "visibility");
    },
    set$visibility: function(receiver, value) {
      this.setProperty$3(receiver, "visibility", value, "");
    },
    set$width: function(receiver, value) {
      this.setProperty$3(receiver, "width", value, "");
    }
  },
  _ChildrenElementList: {
    "^": "ListBase;_element,_childElements",
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new H.ListIterator(t1, t1.length, 0, null);
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._element);
    },
    $asListBase: function() {
      return [W.Element0];
    },
    $asObject_ListMixin: function() {
      return [W.Element0];
    },
    $asList: function() {
      return [W.Element0];
    }
  },
  _FrozenElementList: {
    "^": "ListBase;_nodeList,_elementList",
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    get$style: function(_) {
      return W._CssStyleDeclarationSet$(this._elementList);
    },
    _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    static: {_FrozenElementList$_wrap: function(_nodeList, $T) {
        var t1 = H.setRuntimeTypeInfo(new W._FrozenElementList(_nodeList, null), [$T]);
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }}
  },
  _FrozenElementList$_wrap_closure: {
    "^": "Closure:12;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement0;
    },
    $isFunction: true
  },
  Element_Element$html_closure: {
    "^": "Closure:12;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement0;
    },
    $isFunction: true
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true
  },
  HttpRequest_getString_closure: {
    "^": "Closure:12;",
    call$1: function(xhr) {
      return J.get$responseText$x(xhr);
    },
    $isFunction: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure:11;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    },
    $isFunction: true
  },
  HttpRequest_request_closure: {
    "^": "Closure:12;completer_1,xhr_2",
    call$1: function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    },
    $isFunction: true
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $asListBase: function() {
      return [W.Node0];
    },
    $asObject_ListMixin: function() {
      return [W.Node0];
    },
    $asList: function() {
      return [W.Node0];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true
  },
  SelectElement_options_closure: {
    "^": "Closure:12;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isOptionElement;
    },
    $isFunction: true
  },
  SelectElement_selectedOptions_closure: {
    "^": "Closure:12;",
    call$1: function(o) {
      return J.get$selected$x(o);
    },
    $isFunction: true
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [P.Rectangle];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin2: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true
  },
  Interceptor_ListMixin_ImmutableListMixin2: {
    "^": "Interceptor_ListMixin2+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node0];
    },
    $isEfficientLength: true
  },
  _AttributeMap: {
    "^": "Object;",
    clear$0: function(_) {
      var t1;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        this.remove$1(0, t1._current);
    },
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        key = t1._current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i;
      attributes = this._element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._element.attributes;
      values = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_element",
    $index: function(_, key) {
      return this._element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._element.setAttribute(key, value);
    },
    remove$1: function(_, key) {
      var t1, value;
      t1 = this._element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      for (t1 = J.get$className$x(this._element).split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._element, s.join$1(0, " "));
    }
  },
  _EventStream: {
    "^": "Stream;_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_target,_eventType,_useCapture"
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._target == null)
        return;
      this._unlisten$0();
      this._target = null;
      this._onData = null;
      return;
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    }
  },
  _Html5NodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = J.get$tagName$x(element);
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = new H.ListIterator(C.List_1GN, 261, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = new H.ListIterator(C.List_yrN, 12, 0, null); t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    static: {"^": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var e, t1;
        e = document.createElement("a", null);
        t1 = new W._SameOriginUriPolicy(e, window.location);
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 7], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = t1.hostname;
        if (t4 == null ? t5 == null : t4 === t5) {
          t4 = t3.get$port(t2);
          t5 = t1.port;
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = t3.get$protocol(t2);
            t1 = t1.protocol;
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 7]}
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true
  },
  NodeValidatorBuilder: {
    "^": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    }
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "^": "Closure:12;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    },
    $isFunction: true
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "^": "Closure:12;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    },
    $isFunction: true
  },
  _SimpleNodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = J.get$tagName$x(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    }
  },
  _TemplatingNodeValidator: {
    "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (J.get$attributes$x(element)._element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"^": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "^": "Closure:12;",
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(attr);
    },
    $isFunction: true
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    postMessage$3: function(_, message, targetOrigin, messagePorts) {
      this._window.postMessage(P._convertDartToNative_PrepareForStructuredClone(message), targetOrigin);
    },
    postMessage$2: function($receiver, message, targetOrigin) {
      return this.postMessage$3($receiver, message, targetOrigin, null);
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  },
  NodeValidator: {
    "^": "Object;"
  },
  _SameOriginUriPolicy: {
    "^": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "^": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, isAttr, keys, i, $name, t3;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = "Removing disallowed element <" + H.S(node.tagName) + ">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = "Removing disallowed type extension <" + H.S(node.tagName) + " is=\"" + isAttr + "\">";
              if (typeof console != "undefined")
                console.warn(t2);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = "Removing disallowed attribute <" + H.S(node.tagName) + " " + $name + "=\"" + H.S(t2.getAttribute($name)) + "\">";
              if (typeof console != "undefined")
                console.warn(t3);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (!!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "^": "Closure:27;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    },
    $isFunction: true
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;target=",
    "%": "SVGAElement"
  },
  FEBlendElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEBlendElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEColorMatrixElement"
  },
  FEComponentTransferElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEComponentTransferElement"
  },
  FECompositeElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFECompositeElement"
  },
  FEConvolveMatrixElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEConvolveMatrixElement"
  },
  FEDiffuseLightingElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEDiffuseLightingElement"
  },
  FEDisplacementMapElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEDisplacementMapElement"
  },
  FEFloodElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEFloodElement"
  },
  FEGaussianBlurElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEGaussianBlurElement"
  },
  FEImageElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEImageElement"
  },
  FEMergeElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEMergeElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEMorphologyElement"
  },
  FEOffsetElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEOffsetElement"
  },
  FEPointLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFEPointLightElement"
  },
  FESpecularLightingElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpecularLightingElement"
  },
  FESpotLightElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFESpotLightElement"
  },
  FETileElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFETileElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGFilterElement"
  },
  ForeignObjectElement: {
    "^": "GraphicsElement;x=,y=",
    "%": "SVGForeignObjectElement"
  },
  GeometryElement: {
    "^": "GraphicsElement;",
    "%": "SVGCircleElement|SVGEllipseElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement;SVGGeometryElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGClipPathElement|SVGDefsElement|SVGGElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;x=,y=",
    "%": "SVGImageElement"
  },
  MaskElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGMaskElement"
  },
  PatternElement: {
    "^": "SvgElement;x=,y=",
    "%": "SVGPatternElement"
  },
  RectElement: {
    "^": "GeometryElement;x=,y=",
    "%": "SVGRectElement"
  },
  ScriptElement0: {
    "^": "SvgElement;type}",
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;disabled},type}",
    get$title: function(receiver) {
      return receiver.title;
    },
    set$title: function(receiver, value) {
      receiver.title = value;
    },
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element0;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element0]);
    },
    get$onBlur: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "blur", false), [null]);
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "change", false), [null]);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "click", false), [null]);
    },
    get$onContextMenu: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "contextmenu", false), [null]);
    },
    get$onDoubleClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "dblclick", false), [null]);
    },
    get$onInput: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "input", false), [null]);
    },
    get$onKeyDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keydown", false), [null]);
    },
    get$onKeyUp: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "keyup", false), [null]);
    },
    get$onLoad: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "load", false), [null]);
    },
    get$onMouseDown: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousedown", false), [null]);
    },
    get$onMouseMove: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mousemove", false), [null]);
    },
    get$onMouseOut: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseout", false), [null]);
    },
    get$onMouseOver: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseover", false), [null]);
    },
    get$onMouseUp: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "mouseup", false), [null]);
    },
    get$onScroll: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, "scroll", false), [null]);
    },
    $isEventTarget: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEMergeNodeElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGGradientElement|SVGHKernElement|SVGLinearGradientElement|SVGMPathElement|SVGMarkerElement|SVGMetadataElement|SVGMissingGlyphElement|SVGRadialGradientElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;x=,y=",
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": "SVGTextPathElement;SVGTextContentElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;x=,y=",
    "%": "SVGAltGlyphElement|SVGTSpanElement|SVGTextElement|SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;x=,y=",
    "%": "SVGUseElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_svg$_element",
    readClasses$0: function() {
      var classname, s, t1, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  }
}],
["dart.dom.web_sql", "dart:web_sql", , P, {
  "^": "",
  SqlError: {
    "^": "Interceptor;message=",
    "%": "SQLError"
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    var t1;
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (isNaN(b))
        return b;
      return a;
    }
    if (b === 0)
      t1 = a === 0 ? 1 / a < 0 : a < 0;
    else
      t1 = false;
    if (t1)
      return b;
    return a;
  },
  _JSRandom: {
    "^": "Object;",
    nextDouble$0: function() {
      return Math.random();
    }
  },
  Point: {
    "^": "Object;x>,y>",
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isPoint)
        return false;
      t1 = this.x;
      t2 = other.x;
      if (t1 == null ? t2 == null : t1 === t2) {
        t1 = this.y;
        t2 = other.y;
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.x);
      t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, t1), t2));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.getInterceptor$x(other);
      t3 = t2.get$x(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = this.y;
      t2 = t2.get$y(other);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new P.Point(t1 + t3, t4 + t2);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      t1 = this.x;
      t2 = J.get$x$x(other);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t4 = new P.Point(t1 - t2, t3 - t4);
      t4.$builtinTypeInfo = this.$builtinTypeInfo;
      return t4;
    },
    $isPoint: true
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      return this.get$left(this) + this.width;
    },
    get$bottom: function(_) {
      return this.get$top(this) + this.height;
    },
    toString$0: function(_) {
      return "Rectangle (" + this.get$left(this) + ", " + this.top + ") " + this.width + " x " + this.height;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      if (this.get$left(this) === t1.get$left(other)) {
        t2 = this.top;
        t1 = t2 === t1.get$top(other) && this.left + this.width === t1.get$right(other) && t2 + this.height === t1.get$bottom(other);
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this.top;
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(P._JenkinsSmiHash_combine(0, this.get$left(this) & 0x1FFFFFFF), t1 & 0x1FFFFFFF), this.left + this.width & 0x1FFFFFFF), t1 + this.height & 0x1FFFFFFF));
    },
    get$topLeft: function(_) {
      var t1 = new P.Point(this.get$left(this), this.top);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  Rectangle: {
    "^": "_RectangleBase;left>,top>,width>,height>",
    $isRectangle: true,
    $asRectangle: null,
    static: {Rectangle$: function(left, $top, width, height, $T) {
        var t1, t2;
        t1 = width < 0 ? -width * 0 : width;
        t2 = height < 0 ? -height * 0 : height;
        return H.setRuntimeTypeInfo(new P.Rectangle(left, $top, t1, t2), [$T]);
      }}
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeByteBuffer: {
    "^": "Interceptor;",
    asUint8List$2: function(receiver, offsetInBytes, $length) {
      return new Uint8Array(receiver, offsetInBytes);
    },
    $isNativeByteBuffer: true,
    $isByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) === true || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    _checkSublistArguments$3: function(receiver, start, end, $length) {
      var t1 = $length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      return end;
    },
    $isNativeTypedData: true,
    "%": "DataView;ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log != "undefined") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["daxe", "daxe.dart", , Z, {
  "^": "",
  main: [function() {
    Z.NodeFactory_addCoreDisplayTypes();
    R.Strings_load().then$1(new Z.main_closure());
  }, "call$0", "main$closure", 0, 0, 2],
  DaxeNode_DaxeNode$clone: function(dn) {
    var clone = Z.NodeFactory_createFromNode(dn.toDOMNode$1(Z.DocumentImpl$(new Z.DOMImplementationImpl(), null, null, null)), dn.parent);
    J.set$parent$x(clone, null);
    return clone;
  },
  AttributeDialog: {
    "^": "Object;el,ref@,attRefs,controls,okfct",
    okfct$0: function() {
      return this.okfct.call$0();
    },
    show$0: function(_) {
      var div1, div2, div3, title, form, table, t1, t2, toFocus, attref, tr, td, bHelp, t3, t4, t5, t6, $name, value, defaultValue, control, liste, div_buttons, bCancel, bOk;
      div1 = document.createElement("div", null);
      div1.id = "attributes_dlg";
      J.get$classes$x(div1).add$1(0, "dlg1");
      div2 = document.createElement("div", null);
      J.get$classes$x(div2).add$1(0, "dlg2");
      div3 = document.createElement("div", null);
      J.get$classes$x(div3).add$1(0, "dlg3");
      title = document.createElement("div", null);
      J.get$classes$x(title).add$1(0, "dlgtitle");
      title.textContent = $.doc.cfg.elementTitle$1(this.ref);
      div3.appendChild(title);
      form = document.createElement("form", null);
      table = document.createElement("table", null);
      t1 = $.doc.cfg;
      t2 = this.ref;
      t2 = t1._schema.elementAttributes$1(t2);
      this.attRefs = t2;
      for (t1 = new H.ListIterator(t2, t2.length, 0, null), t2 = this.el, toFocus = null; t1.moveNext$0();) {
        attref = t1._current;
        tr = document.createElement("tr", null);
        td = document.createElement("td", null);
        bHelp = document.createElement("button", null);
        bHelp.setAttribute("type", "button");
        t3 = J.getInterceptor$x(bHelp);
        t3.get$classes(bHelp).add$1(0, "help");
        t3.set$value(bHelp, "?");
        bHelp.textContent = "?";
        bHelp.title = $.doc.cfg.attributeDocumentation$2(this.ref, attref);
        t3 = t3.get$onClick(bHelp);
        t4 = t3._eventType;
        t5 = t3._useCapture;
        t6 = new W._EventStreamSubscription(0, t3._target, t4, W._wrapZone(new Z.AttributeDialog_show_closure(this, attref)), t5);
        t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
        t3 = t6._onData;
        if (t3 != null && t6._pauseCount <= 0)
          J.addEventListener$3$x(t6._target, t4, t3, t5);
        td.appendChild(bHelp);
        tr.appendChild(td);
        td = document.createElement("td", null);
        $name = $.doc.cfg.attributeQualifiedName$2(this.ref, attref);
        title = $.doc.cfg.attributeTitle$2(this.ref, attref);
        td.toString;
        td.appendChild(document.createTextNode(title));
        t3 = J.getInterceptor$x(td);
        if ($.doc.cfg._schema.isRequired$1(attref))
          t3.get$classes(td).add$1(0, "required");
        else
          t3.get$classes(td).add$1(0, "optional");
        tr.appendChild(td);
        td = document.createElement("td", null);
        value = t2.getAttribute$1(0, $name);
        defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(attref);
        if (value == null)
          value = defaultValue != null ? defaultValue : "";
        control = S.SimpleTypeControl$forAttribute(this.ref, attref, value, false, null);
        this.controls.$indexSet(0, attref, control);
        liste = $.doc.cfg._schema.attributeValues$1(attref);
        if (liste == null || liste.length === 0)
          toFocus = toFocus == null ? control : toFocus;
        td.appendChild(control.html$0(0));
        tr.appendChild(td);
        table.appendChild(tr);
      }
      form.appendChild(table);
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bCancel = document.createElement("button", null);
      bCancel.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "button.Cancel");
      bCancel.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bCancel);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.AttributeDialog_show_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bCancel);
      bOk = document.createElement("button", null);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.OK");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.AttributeDialog_show_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bOk);
      form.appendChild(div_buttons);
      div3.appendChild(form);
      div2.appendChild(div3);
      div1.appendChild(div2);
      document.body.appendChild(div1);
      if (toFocus != null)
        toFocus.focus$0(0);
    },
    showOnInsert$0: function() {
      var div1, div2, div3, title, form, table, t1, t2, toFocus, attref, tr, td, bHelp, t3, t4, t5, t6, $name, value, defaultValue, control, liste, div_buttons, bCancel, bOk, required, attributes, namespace, attList, edit;
      div1 = document.createElement("div", null);
      div1.id = "attributes_dlg";
      J.get$classes$x(div1).add$1(0, "dlg1");
      J.set$display$x(div1.style, "none");
      div2 = document.createElement("div", null);
      J.get$classes$x(div2).add$1(0, "dlg2");
      div3 = document.createElement("div", null);
      J.get$classes$x(div3).add$1(0, "dlg3");
      title = document.createElement("div", null);
      J.get$classes$x(title).add$1(0, "dlgtitle");
      title.textContent = $.doc.cfg.elementTitle$1(this.ref);
      div3.appendChild(title);
      form = document.createElement("form", null);
      table = document.createElement("table", null);
      t1 = $.doc.cfg;
      t2 = this.ref;
      t2 = t1._schema.elementAttributes$1(t2);
      this.attRefs = t2;
      for (t1 = new H.ListIterator(t2, t2.length, 0, null), t2 = this.el, toFocus = null; t1.moveNext$0();) {
        attref = t1._current;
        tr = document.createElement("tr", null);
        td = document.createElement("td", null);
        bHelp = document.createElement("button", null);
        bHelp.setAttribute("type", "button");
        t3 = J.getInterceptor$x(bHelp);
        t3.get$classes(bHelp).add$1(0, "help");
        t3.set$value(bHelp, "?");
        bHelp.textContent = "?";
        bHelp.title = $.doc.cfg.attributeDocumentation$2(this.ref, attref);
        t3 = t3.get$onClick(bHelp);
        t4 = t3._eventType;
        t5 = t3._useCapture;
        t6 = new W._EventStreamSubscription(0, t3._target, t4, W._wrapZone(new Z.AttributeDialog_showOnInsert_closure(this, attref)), t5);
        t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
        t3 = t6._onData;
        if (t3 != null && t6._pauseCount <= 0)
          J.addEventListener$3$x(t6._target, t4, t3, t5);
        td.appendChild(bHelp);
        tr.appendChild(td);
        td = document.createElement("td", null);
        $name = $.doc.cfg.attributeQualifiedName$2(this.ref, attref);
        title = $.doc.cfg.attributeTitle$2(this.ref, attref);
        td.toString;
        td.appendChild(document.createTextNode(title));
        t3 = J.getInterceptor$x(td);
        if ($.doc.cfg._schema.isRequired$1(attref))
          t3.get$classes(td).add$1(0, "required");
        else
          t3.get$classes(td).add$1(0, "optional");
        tr.appendChild(td);
        td = document.createElement("td", null);
        value = t2.getAttribute$1(0, $name);
        defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(attref);
        if (value == null)
          value = defaultValue != null ? defaultValue : "";
        control = S.SimpleTypeControl$forAttribute(this.ref, attref, value, false, null);
        this.controls.$indexSet(0, attref, control);
        liste = $.doc.cfg._schema.attributeValues$1(attref);
        if (liste == null || liste.length === 0)
          toFocus = toFocus == null ? control : toFocus;
        td.appendChild(control.html$0(0));
        tr.appendChild(td);
        table.appendChild(tr);
      }
      form.appendChild(table);
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bCancel = document.createElement("button", null);
      bCancel.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "button.Cancel");
      bCancel.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bCancel);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.AttributeDialog_showOnInsert_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bCancel);
      bOk = document.createElement("button", null);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.OK");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.AttributeDialog_showOnInsert_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bOk);
      form.appendChild(div_buttons);
      div3.appendChild(form);
      div2.appendChild(div3);
      div1.appendChild(div2);
      document.body.appendChild(div1);
      if (toFocus != null)
        toFocus.focus$0(0);
      for (t1 = this.controls, t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)])._map, t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null); t1.moveNext$0();) {
        attref = t1._collection$_current;
        value = this.controls.$index(0, attref).getValue$0();
        required = $.doc.cfg._schema.isRequired$1(attref);
        if (J.$eq(value, "") && required) {
          J.set$display$x(div1.style, "block");
          return;
        }
      }
      attributes = t2.getAttributesMapCopy$0();
      for (t1 = this.controls, t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)])._map, t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null); t1.moveNext$0();) {
        attref = t1._collection$_current;
        control = this.controls.$index(0, attref);
        $name = $.doc.cfg.attributeQualifiedName$2(this.ref, attref);
        value = control.getValue$0();
        namespace = $.doc.cfg._schema.attributeNamespace$1(attref);
        defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(attref);
        t3 = J.getInterceptor(value);
        if (t3.$eq(value, "") && defaultValue == null)
          attributes.remove$1(0, $name);
        else if (!t3.$eq(value, "") || defaultValue != null)
          attributes.$indexSet(0, $name, Z.DaxeAttr$NS(namespace, $name, value));
      }
      J.remove$0$ax(document.querySelector("div#attributes_dlg"));
      attList = P.List_List$from(attributes.get$values(attributes), true, null);
      if (document.getElementById(t2._id) != null) {
        edit = Z.UndoableEdit$changeAttributes(t2, attList, true);
        $.doc.doNewEdit$1(edit);
      } else
        t2.attributes = attList;
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      if (this.okfct != null)
        this.okfct$0();
    },
    ok$1: function($event) {
      var t1, attref, value, required, attributes, t2, control, $name, namespace, defaultValue, t3, attList, edit;
      for (t1 = this.controls, t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)])._map, t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null); t1.moveNext$0();) {
        attref = t1._collection$_current;
        value = this.controls.$index(0, attref).getValue$0();
        required = $.doc.cfg._schema.isRequired$1(attref);
        if (J.$eq(value, "") && required) {
          J.preventDefault$0$x($event);
          window.alert($.Strings_map.$index(0, "attribute.missing_required"));
          return;
        }
      }
      t1 = this.el;
      attributes = t1.getAttributesMapCopy$0();
      for (t2 = this.controls, t2 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t2), [H.getTypeArgumentByIndex(t2, 0)])._map, t2 = new P.HashMapKeyIterator(t2, t2._computeKeys$0(), 0, null); t2.moveNext$0();) {
        attref = t2._collection$_current;
        control = this.controls.$index(0, attref);
        $name = $.doc.cfg.attributeQualifiedName$2(this.ref, attref);
        value = control.getValue$0();
        namespace = $.doc.cfg._schema.attributeNamespace$1(attref);
        defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(attref);
        t3 = J.getInterceptor(value);
        if (t3.$eq(value, "") && defaultValue == null)
          attributes.remove$1(0, $name);
        else if (!t3.$eq(value, "") || defaultValue != null)
          attributes.$indexSet(0, $name, Z.DaxeAttr$NS(namespace, $name, value));
      }
      J.remove$0$ax(document.querySelector("div#attributes_dlg"));
      J.preventDefault$0$x($event);
      attList = P.List_List$from(attributes.get$values(attributes), true, null);
      if (document.getElementById(t1._id) != null) {
        edit = Z.UndoableEdit$changeAttributes(t1, attList, true);
        $.doc.doNewEdit$1(edit);
      } else
        t1.attributes = attList;
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      if (this.okfct != null)
        this.okfct$0();
    },
    help$2: function(attref, ref) {
      new Z.HelpDialog(ref, attref).show$0(0);
    },
    AttributeDialog$2: function(el, okfct) {
      this.ref = this.el.ref;
      this.controls = P.HashMap_HashMap(null, null, null, Z.Element, S.SimpleTypeControl);
    },
    static: {AttributeDialog$: function(el, okfct) {
        var t1 = new Z.AttributeDialog(el, null, null, null, okfct);
        t1.AttributeDialog$2(el, okfct);
        return t1;
      }}
  },
  AttributeDialog_show_closure: {
    "^": "Closure:28;this_0,attref_1",
    call$1: function($event) {
      var t1 = this.this_0;
      return t1.help$2(this.attref_1, t1.ref);
    },
    $isFunction: true
  },
  AttributeDialog_show_closure0: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      var t1;
      J.remove$0$ax(document.querySelector("div#attributes_dlg"));
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      return;
    },
    $isFunction: true
  },
  AttributeDialog_show_closure1: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.ok$1($event);
    },
    $isFunction: true
  },
  AttributeDialog_showOnInsert_closure: {
    "^": "Closure:28;this_0,attref_1",
    call$1: function($event) {
      var t1 = this.this_0;
      return t1.help$2(this.attref_1, t1.ref);
    },
    $isFunction: true
  },
  AttributeDialog_showOnInsert_closure0: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      var t1;
      J.remove$0$ax(document.querySelector("div#attributes_dlg"));
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      return;
    },
    $isFunction: true
  },
  AttributeDialog_showOnInsert_closure1: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.ok$1($event);
    },
    $isFunction: true
  },
  Config: {
    "^": "Object;_cfgroot,schemaURL,_cfgdir,_elementDisplayCache,_elementsToNamesCache,_elementsTitlesCache,_insertCache,_validPatternCache,_parametersCache,_namespaceCache,_schema,_languageNode,_savingNode,_menusNode,_displayNode,_exportsNode,_listeStrings",
    load$2: function(_, cfgFilePath, schemaFilePath) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      if (cfgFilePath == null) {
        this._cfgroot = null;
        return P.Future_Future$error(new Z.DaxeException("Config.load: null path", null), null, null);
      }
      new Z.DOMParser().parseFromURL$1(cfgFilePath).then$2$onError(new Z.Config_load_closure(this, cfgFilePath, schemaFilePath, completer), new Z.Config_load_closure0(cfgFilePath, completer));
      return completer.future;
    },
    rootElements$0: function() {
      var liste, racinesPossibles, t1, racine, nom, t2, ref;
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      racinesPossibles = this._schema.rootElements$0();
      t1 = this._getLanguage$0();
      racine = Z.Config__nextNode(t1.get$firstChild(t1), "RACINE");
      for (; racine != null;) {
        nom = racine.getAttribute$1(0, "element");
        for (t1 = new H.ListIterator(racinesPossibles, racinesPossibles.length, 0, null), t2 = J.getInterceptor(nom); t1.moveNext$0();) {
          ref = t1._current;
          if (t2.$eq(nom, this._schema.elementName$1(ref)))
            liste.push(ref);
        }
        racine = Z.Config__nextNode(racine.nextSibling, "RACINE");
      }
      return liste;
    },
    addNamespaceAttributes$1: function(root) {
      var espaces, t1, t2, espace, prefixe, schemaLocation, noNamespaceSchemaLocation;
      espaces = this._namespaceList$0();
      for (t1 = new H.ListIterator(espaces, espaces.length, 0, null), t2 = J.getInterceptor$x(root); t1.moveNext$0();) {
        espace = t1._current;
        if (!J.$eq(espace, "")) {
          prefixe = this.namespacePrefix$1(espace);
          t2.setAttributeNS$3(root, "http://www.w3.org/2000/xmlns/", prefixe != null && !J.$eq(prefixe, "") ? "xmlns:" + H.S(prefixe) : "xmlns", espace);
        }
      }
      schemaLocation = this.getSchemaLocation$0();
      noNamespaceSchemaLocation = this.getNoNamespaceSchemaLocation$0();
      t1 = schemaLocation == null;
      if (!t1 || noNamespaceSchemaLocation != null) {
        t2.setAttributeNS$3(root, "http://www.w3.org/2000/xmlns/", "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        if (!t1)
          t2.setAttributeNS$3(root, "http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation", schemaLocation);
        if (noNamespaceSchemaLocation != null)
          t2.setAttributeNS$3(root, "http://www.w3.org/2001/XMLSchema-instance", "xsi:noNamespaceSchemaLocation", noNamespaceSchemaLocation);
      }
    },
    schemaName$0: function() {
      var t1, fichierschema, nom;
      t1 = this._getLanguage$0();
      fichierschema = Z.Config__nextNode(t1.get$firstChild(t1), "FICHIER_SCHEMA");
      if (fichierschema == null)
        return;
      nom = fichierschema.getAttribute$1(0, "nom");
      return J.$eq(nom, "") ? null : nom;
    },
    _buildElementDisplayCache$0: function() {
      var t1, affel, nom;
      t1 = P.HashMap_HashMap(null, null, null, P.String, Z.Element);
      this._elementDisplayCache = t1;
      if (this._cfgroot == null)
        return t1;
      affel = Z.Config__nextNode(J.get$firstChild$x(this._getNodeDisplay$0()), "AFFICHAGE_ELEMENT");
      for (; affel != null;) {
        nom = affel.getAttribute$1(0, "element");
        this._elementDisplayCache.$indexSet(0, nom, affel);
        affel = Z.Config__nextNode(affel.nextSibling, "AFFICHAGE_ELEMENT");
      }
      return this._elementDisplayCache;
    },
    _buildElementsToNamesCache$0: function() {
      var elements, t1, ref, nom;
      this._elementsToNamesCache = P.HashMap_HashMap(null, null, null, Z.Element, P.String);
      if (this._cfgroot == null)
        return;
      elements = this._schema.allElements$0();
      for (t1 = new H.ListIterator(elements, elements.length, 0, null); t1.moveNext$0();) {
        ref = t1._current;
        nom = this._schema.elementName$1(ref);
        if (nom != null)
          this._elementsToNamesCache.$indexSet(0, ref, nom);
      }
    },
    _getResource$1: function(root) {
      var bundle = Z.Config__nextNode(J.get$firstChild$x(root), "FICHIERTITRES");
      if (bundle == null)
        return;
      return bundle.getAttribute$1(0, "nom");
    },
    getSchemaLocation$0: function() {
      var sl, schemaLocation;
      sl = Z.Config__nextNode(J.get$firstChild$x(this._getSaving$0()), "SCHEMALOCATION");
      if (sl != null) {
        schemaLocation = sl.getAttribute$1(0, "schemaLocation");
        if (!J.$eq(schemaLocation, ""))
          return schemaLocation;
      }
      return;
    },
    getNoNamespaceSchemaLocation$0: function() {
      var sl, noNamespaceSchemaLocation;
      sl = Z.Config__nextNode(J.get$firstChild$x(this._getSaving$0()), "SCHEMALOCATION");
      if (sl != null) {
        noNamespaceSchemaLocation = sl.getAttribute$1(0, "noNamespaceSchemaLocation");
        if (!J.$eq(noNamespaceSchemaLocation, ""))
          return noNamespaceSchemaLocation;
      }
      return;
    },
    namespacePrefix$1: function(namespace) {
      var t1, pe;
      t1 = J.getInterceptor(namespace);
      if (t1.$eq(namespace, "http://www.w3.org/XML/1998/namespace"))
        return "xml";
      pe = Z.Config__nextNode(J.get$firstChild$x(this._getSaving$0()), "PREFIXE_ESPACE");
      for (; pe != null;) {
        if (t1.$eq(namespace, pe.getAttribute$1(0, "uri")))
          return pe.getAttribute$1(0, "prefixe");
        pe = Z.Config__nextNode(pe.nextSibling, "PREFIXE_ESPACE");
      }
      return this._schema._espaceVersPrefixe.$index(0, namespace);
    },
    _creationMenu$2: function(doc, menudef) {
      var nomMenu, menu, t1, docMenu, menunode, t2, nodename, commande, t3, shortcut, nom, titre, typeNoeud, el, line, item, itemdoc, classe;
      nomMenu = menudef.getAttribute$1(0, "nom");
      menu = new Z.Menu(null, null, this.menuTitle$1(nomMenu), null, null, null, null, null, null, null);
      menu.id = "menu_" + $.MenuItem_idcount;
      $.MenuItem_idcount = $.MenuItem_idcount + 1;
      menu.parent = null;
      menu.enabled = true;
      menu.is_separator = false;
      t1 = [];
      t1.$builtinTypeInfo = [Z.MenuItem];
      menu.items = t1;
      docMenu = this.menuDocumentation$1(nomMenu);
      if (docMenu != null)
        menu.toolTipText = docMenu;
      menunode = menudef.firstChild;
      for (; menunode != null;) {
        t1 = {};
        t2 = J.getInterceptor$x(menunode);
        nodename = t2.get$nodeName(menunode);
        if (!!t2.$isElement) {
          commande = t2.getAttribute$1(menunode, "raccourci");
          if (commande != null && !J.$eq(commande, "")) {
            t3 = J.toUpperCase$0$s(commande);
            if (0 >= t3.length)
              return H.ioore(t3, 0);
            shortcut = t3[0];
          } else
            shortcut = null;
        } else
          shortcut = null;
        t3 = J.getInterceptor(nodename);
        if (t3.$eq(nodename, "MENU_INSERTION")) {
          H.interceptedTypeCast(menunode, "$isElement");
          nom = t2.getAttribute$1(menunode, "nom");
          titre = this.menuTitle$1(nom);
          typeNoeud = t2.getAttribute$1(menunode, "type_noeud");
          t1.typeNoeud_0 = typeNoeud;
          if (J.$eq(typeNoeud, ""))
            t1.typeNoeud_0 = "element";
          t1.refElement_1 = null;
          if (J.$eq(t1.typeNoeud_0, "element")) {
            el = this._schema.elementReferenceByName$1(Z.Config_localValue(nom));
            t1.refElement_1 = el;
            if (el == null) {
              t2 = "Erreur: MENU_INSERTION: pas de r\u00e9f\u00e9rence pour '" + H.S(nom) + "' dans le sch\u00e9ma";
              line = "Config: " + t2;
              H.printString(line);
            }
          } else
            t1.refElement_1 = null;
          item = new Z.MenuItem(null, titre, null, new Z.Config__creationMenu_closure(t1, doc), shortcut, t1.refElement_1, null, null, null);
          item.id = "menu_" + $.MenuItem_idcount;
          $.MenuItem_idcount = $.MenuItem_idcount + 1;
          item.parent = null;
          item.enabled = true;
          item.is_separator = false;
          item.parent = menu;
          menu.items.push(item);
          itemdoc = this.documentation$1(t1.refElement_1);
          if (itemdoc != null)
            item.toolTipText = itemdoc;
        } else if (t3.$eq(nodename, "MENU_FONCTION")) {
          H.interceptedTypeCast(menunode, "$isElement");
          classe = t2.getAttribute$1(menunode, "classe");
          nom = t2.getAttribute$1(menunode, "nom");
          item = new Z.MenuItem(null, this.menuTitle$1(nom), null, new Z.Config__creationMenu_closure0(doc, menunode, classe), shortcut, null, null, null, null);
          item.id = "menu_" + $.MenuItem_idcount;
          $.MenuItem_idcount = $.MenuItem_idcount + 1;
          item.parent = null;
          item.enabled = true;
          item.is_separator = false;
          item.parent = menu;
          menu.items.push(item);
          itemdoc = this.menuDocumentation$1(nom);
          if (itemdoc != null)
            item.toolTipText = itemdoc;
        } else if (t3.$eq(nodename, "MENU")) {
          item = this._creationMenu$2(doc, H.interceptedTypeCast(menunode, "$isElement"));
          item.parent = menu;
          menu.items.push(item);
        } else if (t3.$eq(nodename, "SEPARATEUR")) {
          t1 = menu.items;
          t2 = new Z.MenuItem(null, null, null, null, null, null, null, null, null);
          t2.is_separator = true;
          t1.push(t2);
        }
        menunode = menunode.get$nextSibling();
      }
      return menu;
    },
    makeMenus$1: function(doc) {
      var barreBalises, t1, menudef, jmenu;
      barreBalises = new Z.MenuBar(null, null, null);
      barreBalises.MenuBar$0();
      t1 = this._menusNode;
      if (t1 == null) {
        t1 = Z.Config__nextNode(J.get$firstChild$x(this._cfgroot), "MENUS");
        this._menusNode = t1;
        if (t1 == null) {
          t1 = J.createElement$1$x(J.get$ownerDocument$x(this._cfgroot), "MENUS");
          this._menusNode = t1;
        }
      }
      if (t1 != null) {
        menudef = Z.Config__nextNode(J.get$firstChild$x(t1), "MENU");
        for (; menudef != null;) {
          jmenu = this._creationMenu$2(doc, menudef);
          barreBalises.menus.push(jmenu);
          menudef = Z.Config__nextNode(menudef.get$nextSibling(), "MENU");
        }
      }
      return barreBalises;
    },
    elementReference$1: function($name) {
      return this._schema.elementReferenceByName$1(Z.Config_localValue($name));
    },
    elementPrefix$1: function(elementRef) {
      var espace = this._schema.elementNamespace$1(elementRef);
      if (espace == null)
        return;
      return this.namespacePrefix$1(espace);
    },
    _namespaceList$0: function() {
      var t1, liste, espacesSchema;
      t1 = this._namespaceCache;
      if (t1 != null)
        return t1;
      liste = H.setRuntimeTypeInfo([], [P.String]);
      espacesSchema = this._schema.namespaceList$0();
      C.JSArray_methods.addAll$1(liste, espacesSchema);
      this._namespaceCache = liste;
      return liste;
    },
    insertIsPossible$4: function($parent, startOffset, endOffset, toInsert) {
      var t1, sousElements, dn, ajoute, offset;
      t1 = J.getInterceptor$x($parent);
      if (t1.get$nodeType($parent) === 9) {
        for (t1 = J.get$iterator$ax(t1.get$childNodes($parent)); t1.moveNext$0();)
          if (J.get$nodeType$x(t1.get$current()) === 1)
            return false;
        return true;
      }
      if (typeof startOffset !== "number")
        return startOffset.$lt();
      if (startOffset < 0) {
        Z.Config_logError("Config.insertionPossible: debutSelection < parent.debut", null);
        return false;
      }
      if (!!J.getInterceptor(this._schema).$isDaxeWXS) {
        sousElements = H.setRuntimeTypeInfo([], [Z.Element]);
        for (dn = t1.get$firstChild($parent), ajoute = false; dn != null; dn = dn.get$nextSibling())
          if (J.get$nodeType$x(dn) === 1) {
            offset = $parent.offsetOf$1(dn);
            if (typeof offset !== "number")
              return offset.$lt();
            if (!(offset < startOffset)) {
              if (typeof endOffset !== "number")
                return H.iae(endOffset);
              t1 = offset >= endOffset;
            } else
              t1 = true;
            if (t1) {
              if (!ajoute) {
                if (typeof endOffset !== "number")
                  return H.iae(endOffset);
                t1 = offset >= endOffset;
              } else
                t1 = false;
              if (t1) {
                sousElements.push(toInsert);
                ajoute = true;
              }
              sousElements.push(dn.get$ref());
            }
          }
        if (!ajoute)
          sousElements.push(toInsert);
        return this._schema.validElement$3($parent.get$ref(), sousElements, true);
      }
      return false;
    },
    elementIsValid$1: function($parent) {
      var r, expr, ex, t1, t2, sousElements, dn, avectexte, refParent, cettexp, child, str, exception;
      if (!!$parent.$isDNComment || !!$parent.$isDNProcessingInstruction || !!$parent.$isDNCData)
        return true;
      if ($parent.ref == null)
        return false;
      if (!this.attributesAreValid$1($parent))
        return false;
      if ($parent.firstChild == null) {
        t1 = $parent.ref;
        t1 = this._schema.elementValueIsValid$2(t1, "") !== true;
      } else
        t1 = false;
      if (t1)
        return false;
      else {
        if ($parent.get$childNodes($parent).length === 1) {
          t1 = $parent.firstChild;
          t2 = J.getInterceptor(t1);
          if (!!t2.$isDNText)
            if (t2.get$nodeValue(t1) != null) {
              t1 = $parent.ref;
              t2 = J.get$nodeValue$x($parent.firstChild);
              t2 = this._schema.elementValueIsValid$2(t1, t2) !== true;
              t1 = t2;
            } else
              t1 = false;
          else
            t1 = false;
        } else
          t1 = false;
        if (t1)
          return false;
      }
      if (!!J.getInterceptor(this._schema).$isDaxeWXS) {
        sousElements = H.setRuntimeTypeInfo([], [Z.Element]);
        for (dn = $parent.firstChild, avectexte = false; dn != null; dn = dn.get$nextSibling()) {
          t1 = J.getInterceptor$x(dn);
          if (t1.get$nodeType(dn) === 1 && dn.get$ref() != null)
            sousElements.push(dn.get$ref());
          else if (t1.get$nodeType(dn) === 3) {
            if (J.trim$0$s(t1.get$nodeValue(dn)) !== "")
              avectexte = true;
          } else if (!!t1.$isDNCData) {
            t1 = dn.firstChild;
            if (t1 != null && J.trim$0$s(J.get$nodeValue$x(t1)) !== "")
              avectexte = true;
          }
        }
        if (avectexte && !this._schema.canContainText$1($parent.ref))
          return false;
        return this._schema.validElement$3($parent.ref, sousElements, false);
      }
      refParent = $parent.ref;
      cettexp = P.StringBuffer$("");
      if (this._validPatternCache == null)
        this._validPatternCache = P.HashMap_HashMap(null, null, null, Z.Element, P.Pattern);
      child = $parent.firstChild;
      for (avectexte = false; child != null;) {
        t1 = J.getInterceptor(child);
        if (!!t1.$isDNCData) {
          t1 = child.firstChild;
          if (t1 != null && J.trim$0$s(J.get$nodeValue$x(t1)) !== "")
            avectexte = true;
        } else if (t1.get$nodeType(child) === 1 && !t1.$isDNComment && !t1.$isDNProcessingInstruction) {
          str = t1.get$localName(child);
          t1 = cettexp._contents += typeof str === "string" ? str : H.S(str);
          cettexp._contents = t1 + ",";
        } else if (t1.get$nodeType(child) === 3)
          avectexte = J.trim$0$s(t1.get$nodeValue(child)) !== "" ? true : avectexte;
        child = child.get$nextSibling();
      }
      if (avectexte && !this._schema.canContainText$1(refParent))
        return false;
      r = this._validPatternCache.$index(0, refParent);
      if (r == null) {
        expr = this._schema.regularExpression$3(refParent, false, true);
        if (expr == null || J.$eq(expr, ""))
          return true;
        try {
          r = new H.JSSyntaxRegExp("^$expr$", H.JSSyntaxRegExp_makeNative("^$expr$", false, true, false), null, null);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          if (!!J.getInterceptor(t1).$isException) {
            ex = t1;
            Z.Config_logError("elementValide(JaxeElement, bool, List<String>) - Malformed Pattern: ^" + H.S(expr) + "$:", ex);
            return true;
          } else
            throw exception;
        }

        this._validPatternCache.$indexSet(0, refParent, r);
      }
      t1 = cettexp._contents;
      return r.hasMatch$1(t1.charCodeAt(0) == 0 ? t1 : t1);
    },
    attributesAreValid$1: function(dn) {
      var t1, lattref, noms, espaces, t2, i, attref, t3, valeur, latt, att, prefixe, t4, nom, espace, trouve, j;
      if (dn.nodeType !== 1) {
        Z.Config_logError("Config.attributsValides : ce n'est pas un \u00e9l\u00e9ment: " + H.S(dn), null);
        return false;
      }
      t1 = dn.ref;
      lattref = this._schema.elementAttributes$1(t1);
      noms = H.setRuntimeTypeInfo(Array(lattref.length), [P.String]);
      t1 = noms.length;
      espaces = H.setRuntimeTypeInfo(Array(t1), [P.String]);
      for (t2 = espaces.length, i = 0; i < lattref.length; ++i) {
        attref = lattref[i];
        t3 = this._schema.attributeName$1(attref);
        if (i >= t1)
          return H.ioore(noms, i);
        noms[i] = t3;
        t3 = this._schema.attributeNamespace$1(attref);
        if (i >= t2)
          return H.ioore(espaces, i);
        espaces[i] = t3;
        valeur = dn.getAttribute$1(0, noms[i]);
        if (valeur == null || J.$eq(valeur, "")) {
          if (this._schema.isRequired$1(attref))
            return false;
        } else if (this._schema.attributeIsValid$2(attref, valeur) !== true)
          return false;
      }
      latt = dn.attributes;
      for (t3 = J.getInterceptor$asx(latt), i = 0; i < t3.get$length(latt); ++i) {
        att = t3.$index(latt, i);
        prefixe = att.get$prefix();
        t4 = J.getInterceptor(prefixe);
        if (t4.$eq(prefixe, "xml") || t4.$eq(prefixe, "xmlns"))
          continue;
        nom = att.get$localName(att);
        if (prefixe == null && J.$eq(nom, "xmlns"))
          continue;
        espace = att.get$namespaceURI();
        if (J.$eq(espace, "http://www.w3.org/2001/XMLSchema-instance"))
          continue;
        j = 0;
        while (true) {
          if (!(j < t1)) {
            trouve = false;
            break;
          }
          if (J.$eq(noms[j], nom)) {
            if (j >= t2)
              return H.ioore(espaces, j);
            t4 = J.$eq(espaces[j], espace);
          } else
            t4 = false;
          if (t4) {
            trouve = true;
            break;
          }
          ++j;
        }
        if (!trouve)
          return false;
      }
      return true;
    },
    canContainText$1: function(elementRef) {
      if (elementRef == null)
        return true;
      return this._schema.canContainText$1(elementRef);
    },
    attributeQualifiedName$2: function(parentRef, attributeRef) {
      var $name, prefix;
      $name = this._schema.attributeName$1(attributeRef);
      if (this._schema.attributeNamespace$1(attributeRef) != null) {
        prefix = this.attributePrefix$2(parentRef, attributeRef);
        if (prefix != null)
          $name = H.S(prefix) + ":" + H.S($name);
      }
      return $name;
    },
    attributePrefix$2: function($parent, attributeRef) {
      var espace, t1, prefixe;
      espace = this._schema.attributeNamespace$1(attributeRef);
      if (espace == null)
        return;
      t1 = J.getInterceptor(espace);
      if (t1.$eq(espace, "http://www.w3.org/XML/1998/namespace"))
        return "xml";
      if (t1.$eq(espace, "http://www.w3.org/2000/xmlns/") && !J.$eq(this._schema.attributeName$1(attributeRef), "xmlns"))
        return "xmlns";
      prefixe = $parent.lookupPrefix$1(espace);
      if (prefixe == null) {
        t1 = $parent.ownerDocument;
        prefixe = t1.documentElement != null ? t1.lookupPrefix$1(espace) : this.namespacePrefix$1(espace);
      }
      return prefixe;
    },
    attributeValues$1: function(attributeRef) {
      return this._schema.attributeValues$1(attributeRef);
    },
    nodeDisplayType$3: function(elementRef, $name, nodeType) {
      var t1, affel, elplug;
      if (nodeType === 1) {
        t1 = Z.Config_localValue($name);
        affel = this._elementDisplayCache.$index(0, t1);
        if (affel == null)
          return "string";
        return J.getAttribute$1$x(affel, "type");
      } else if (nodeType === 7) {
        elplug = Z.Config__nextNode(J.get$firstChild$x(this._getNodeDisplay$0()), "PLUGIN_INSTRUCTION");
        for (t1 = $name != null; elplug != null;) {
          if (t1 && J.$eq($name, elplug.getAttribute$1(0, "cible")))
            return "plugin";
          elplug = Z.Config__nextNode(elplug.get$nextSibling(), "PLUGIN_INSTRUCTION");
        }
        return "instruction";
      } else if (nodeType === 8) {
        if (Z.Config__nextNode(J.get$firstChild$x(this._getNodeDisplay$0()), "PLUGIN_COMMENTAIRE") != null)
          return "plugin";
        return "commentaire";
      } else if (nodeType === 4) {
        if (Z.Config__nextNode(J.get$firstChild$x(this._getNodeDisplay$0()), "PLUGIN_CDATA") != null)
          return "plugin";
        return "cdata";
      } else if (nodeType === 3)
        return "texte";
      return;
    },
    nodeParameterValue$5: function(elementRef, nodeType, $name, parameterName, defaultValue) {
      var lval, t1;
      lval = J.$index$asx(this.getNodeParameters$3(elementRef, nodeType, $name), parameterName);
      if (lval != null) {
        t1 = J.get$length$asx(lval);
        if (typeof t1 !== "number")
          return t1.$gt();
        t1 = t1 > 0;
      } else
        t1 = false;
      return t1 ? J.$index$asx(lval, 0) : defaultValue;
    },
    _buildParameterCache$1: function(base) {
      var hashparams, parel, nom, valeur, lval;
      hashparams = P.HashMap_HashMap(null, null, null, P.String, [P.List, P.String]);
      parel = Z.Config__nextNode(J.get$firstChild$x(base), "PARAMETRE");
      for (; parel != null;) {
        nom = parel.getAttribute$1(0, "nom");
        valeur = parel.getAttribute$1(0, "valeur");
        lval = hashparams.$index(0, nom);
        if (lval == null) {
          lval = [];
          lval.$builtinTypeInfo = [P.String];
          lval.push(valeur);
          hashparams.$indexSet(0, nom, lval);
        } else
          J.add$1$ax(lval, valeur);
        parel = Z.Config__nextNode(parel.nextSibling, "PARAMETRE");
      }
      this._parametersCache.$indexSet(0, base, hashparams);
      return hashparams;
    },
    getNodeParameters$3: function(elementRef, nodeType, $name) {
      var t1, base, elplug, hashparams;
      if (nodeType === "element") {
        t1 = this._elementsToNamesCache.$index(0, elementRef);
        base = this._elementDisplayCache.$index(0, t1);
      } else if (nodeType === "instruction") {
        elplug = Z.Config__nextNode(J.get$firstChild$x(this._getNodeDisplay$0()), "PLUGIN_INSTRUCTION");
        t1 = $name != null;
        while (true) {
          if (!(elplug != null)) {
            base = null;
            break;
          }
          if (t1 && J.$eq($name, elplug.getAttribute$1(0, "cible"))) {
            base = elplug;
            break;
          }
          elplug = Z.Config__nextNode(elplug.get$nextSibling(), "PLUGIN_INSTRUCTION");
        }
      } else if (nodeType === "commentaire") {
        elplug = Z.Config__nextNode(J.get$firstChild$x(this._getNodeDisplay$0()), "PLUGIN_COMMENTAIRE");
        base = elplug == null ? null : elplug;
      } else
        base = null;
      if (base == null)
        return P.HashMap_HashMap(null, null, null, P.String, [P.List, P.String]);
      t1 = this._parametersCache;
      if (t1 == null) {
        t1 = P.HashMap_HashMap(null, null, null, Z.Element, [P.HashMap, P.String, [P.List, P.String]]);
        this._parametersCache = t1;
      }
      hashparams = t1.$index(0, base);
      return hashparams == null ? this._buildParameterCache$1(base) : hashparams;
    },
    elementSuggestedValues$1: function(elementRef) {
      var t1, affel, liste, vs, v;
      t1 = this._elementsToNamesCache.$index(0, elementRef);
      affel = this._elementDisplayCache.$index(0, t1);
      if (affel == null)
        return;
      liste = H.setRuntimeTypeInfo([], [P.String]);
      vs = Z.Config__nextNode(J.get$firstChild$x(affel), "VALEUR_SUGGEREE");
      for (; vs != null;) {
        v = Z.Config__dom_elementValue(vs);
        if (v != null)
          liste.push(v);
        vs = Z.Config__nextNode(vs.get$nextSibling(), "VALEUR_SUGGEREE");
      }
      return liste;
    },
    attributeSuggestedValues$2: function(parentRef, attributeRef) {
      var t1, affel, liste, nomAtt, aa, vs, v;
      t1 = this._elementsToNamesCache.$index(0, parentRef);
      affel = this._elementDisplayCache.$index(0, t1);
      if (affel == null)
        return;
      liste = H.setRuntimeTypeInfo([], [P.String]);
      nomAtt = this._schema.attributeName$1(attributeRef);
      aa = Z.Config__nextNode(J.get$firstChild$x(affel), "AFFICHAGE_ATTRIBUT");
      for (; aa != null;) {
        if (J.$eq(aa.getAttribute$1(0, "attribut"), nomAtt)) {
          vs = Z.Config__nextNode(aa.firstChild, "VALEUR_SUGGEREE");
          for (; vs != null;) {
            v = Z.Config__dom_elementValue(vs);
            if (v != null)
              liste.push(v);
            vs = Z.Config__nextNode(vs.get$nextSibling(), "VALEUR_SUGGEREE");
          }
        }
        aa = Z.Config__nextNode(aa.nextSibling, "AFFICHAGE_ATTRIBUT");
      }
      return liste;
    },
    _stringsElements$0: function() {
      var defaut, liste, lstrings, t1, strings, t2, langue, strloc, t3, t4, test;
      defaut = Z.Locale$();
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      lstrings = this._getStrings$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        strings = t1._current;
        t2 = J.getInterceptor$x(strings);
        langue = t2.getAttribute$1(strings, "langue");
        if (!J.$eq(langue, "")) {
          if (J.$eq(t2.getAttribute$1(strings, "pays"), "")) {
            strloc = new Z.Locale(null, null);
            strloc.language = langue;
            strloc.country = null;
          } else {
            t2 = t2.getAttribute$1(strings, "pays");
            strloc = new Z.Locale(null, null);
            strloc.language = langue;
            strloc.country = t2;
          }
          if (defaut.$eq(0, strloc) && !C.JSArray_methods.contains$1(liste, strings))
            liste.push(strings);
        }
      }
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        strings = t1._current;
        t2 = J.getInterceptor$x(strings);
        langue = t2.getAttribute$1(strings, "langue");
        if (!J.$eq(langue, "")) {
          t3 = defaut.language;
          t4 = defaut.country;
          test = new Z.Locale(null, null);
          test.language = t3;
          test.country = t4;
          if (J.$eq(t2.getAttribute$1(strings, "pays"), "")) {
            strloc = new Z.Locale(null, null);
            strloc.language = langue;
            strloc.country = null;
          } else {
            t2 = t2.getAttribute$1(strings, "pays");
            strloc = new Z.Locale(null, null);
            strloc.language = langue;
            strloc.country = t2;
          }
          if (test.$eq(0, strloc) && !C.JSArray_methods.contains$1(liste, strings))
            liste.push(strings);
        }
      }
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        strings = t1._current;
        langue = J.getAttribute$1$x(strings, "langue");
        if (!J.$eq(langue, "")) {
          t2 = defaut.language;
          test = new Z.Locale(null, null);
          test.language = t2;
          test.country = null;
          t3 = new Z.Locale(null, null);
          t3.language = langue;
          t3.country = null;
          if (J.$eq(t2, langue) && true && !C.JSArray_methods.contains$1(liste, strings))
            liste.push(strings);
        }
      }
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        strings = t1._current;
        if (!C.JSArray_methods.contains$1(liste, strings))
          liste.push(strings);
      }
      return liste;
    },
    menuTitle$1: function($name) {
      var lstrings, t1, t2, strings, sm, eltitre, el;
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null), t2 = J.getInterceptor($name); t1.moveNext$0();) {
        strings = t1._current;
        sm = Z.Config__nextElementDeep(strings, strings, "STRINGS_MENU");
        for (; sm != null;) {
          if (t2.$eq($name, sm.getAttribute$1(0, "menu"))) {
            eltitre = Z.Config__nextNode(sm.firstChild, "TITRE");
            if (eltitre != null && eltitre.get$firstChild(eltitre) != null)
              return Z.Config__dom_elementValue(eltitre);
            break;
          }
          sm = Z.Config__nextElementDeep(strings, sm, "STRINGS_MENU");
        }
      }
      el = this._schema.elementReferenceByName$1(Z.Config_localValue($name));
      if (el != null)
        return this.elementTitle$1(el);
      return $name;
    },
    menuDocumentation$1: function($name) {
      var lstrings, t1, t2, strings, sm, eldoc;
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null), t2 = J.getInterceptor($name); t1.moveNext$0();) {
        strings = t1._current;
        sm = Z.Config__nextElementDeep(strings, strings, "STRINGS_MENU");
        for (; sm != null;) {
          if (t2.$eq($name, sm.getAttribute$1(0, "menu"))) {
            eldoc = Z.Config__nextNode(sm.firstChild, "DOCUMENTATION");
            if (eldoc != null && eldoc.get$firstChild(eldoc) != null)
              return Z.Config__dom_elementValue(eldoc);
            break;
          }
          sm = Z.Config__nextElementDeep(strings, sm, "STRINGS_MENU");
        }
      }
      return;
    },
    _titlesHash$0: function() {
      var h, lstrings, t1, sel, nom, eltitre;
      h = P.HashMap_HashMap(null, null, null, P.String, P.String);
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        sel = Z.Config__nextNode(J.get$firstChild$x(t1._current), "STRINGS_ELEMENT");
        for (; sel != null;) {
          nom = sel.getAttribute$1(0, "element");
          if (h.$index(0, nom) == null) {
            eltitre = Z.Config__nextNode(sel.firstChild, "TITRE");
            h.$indexSet(0, nom, eltitre != null && eltitre.get$firstChild(eltitre) != null ? Z.Config__dom_elementValue(eltitre) : nom);
          }
          sel = Z.Config__nextNode(sel.nextSibling, "STRINGS_ELEMENT");
        }
      }
      return h;
    },
    elementTitle$1: function(elementRef) {
      var titre, nom, lstrings, t1, strings, sel, eltitre;
      titre = this._elementsTitlesCache.$index(0, elementRef);
      if (titre != null)
        return titre;
      nom = this._elementsToNamesCache.$index(0, elementRef);
      if (nom == null) {
        Z.Config_logError("Config.titreElement : pas de nom pour " + H.S(elementRef), null);
        return;
      }
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        strings = t1._current;
        if (titre == null) {
          sel = Z.Config__nextNode(J.get$firstChild$x(strings), "STRINGS_ELEMENT");
          for (; sel != null;) {
            if (J.$eq(sel.getAttribute$1(0, "element"), nom)) {
              eltitre = Z.Config__nextNode(sel.firstChild, "TITRE");
              if (eltitre != null && eltitre.get$firstChild(eltitre) != null) {
                titre = Z.Config__dom_elementValue(eltitre);
                break;
              }
              break;
            }
            sel = Z.Config__nextNode(sel.nextSibling, "STRINGS_ELEMENT");
          }
        }
      }
      if (titre == null || J.$eq(titre, ""))
        titre = nom;
      this._elementsTitlesCache.$indexSet(0, elementRef, titre);
      return titre;
    },
    documentation$1: function(elementRef) {
      var nom, lstrings, t1, t2, sel, eldoc;
      if (elementRef == null)
        return;
      nom = this._elementsToNamesCache.$index(0, elementRef);
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null), t2 = J.getInterceptor(nom); t1.moveNext$0();) {
        sel = Z.Config__nextNode(J.get$firstChild$x(t1._current), "STRINGS_ELEMENT");
        for (; sel != null;) {
          if (t2.$eq(nom, sel.getAttribute$1(0, "element"))) {
            eldoc = Z.Config__nextNode(sel.firstChild, "DOCUMENTATION");
            if (eldoc != null && eldoc.get$firstChild(eldoc) != null)
              return Z.Config__dom_elementValue(eldoc);
            break;
          }
          sel = Z.Config__nextNode(sel.nextSibling, "STRINGS_ELEMENT");
        }
      }
      return this._schema.elementDocumentation$1(elementRef);
    },
    attributeTitle$2: function(parentRef, attributeRef) {
      var nomEl, nomAtt, lstrings, t1, sel, sat, eltitre, prefixe;
      nomEl = this._elementsToNamesCache.$index(0, parentRef);
      nomAtt = this._schema.attributeName$1(attributeRef);
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        sel = Z.Config__nextNode(J.get$firstChild$x(t1._current), "STRINGS_ELEMENT");
        for (; sel != null;) {
          if (J.$eq(sel.getAttribute$1(0, "element"), nomEl)) {
            sat = Z.Config__nextNode(sel.firstChild, "STRINGS_ATTRIBUT");
            for (; sat != null;) {
              if (J.$eq(sat.getAttribute$1(0, "attribut"), nomAtt)) {
                eltitre = Z.Config__nextNode(sat.firstChild, "TITRE");
                if (eltitre != null && eltitre.get$firstChild(eltitre) != null)
                  return Z.Config__dom_elementValue(eltitre);
                break;
              }
              sat = Z.Config__nextNode(sat.nextSibling, "STRINGS_ATTRIBUT");
            }
          }
          sel = Z.Config__nextNode(sel.nextSibling, "STRINGS_ELEMENT");
        }
      }
      prefixe = this.attributePrefix$2(parentRef, attributeRef);
      if (prefixe != null)
        return H.S(prefixe) + ":" + H.S(nomAtt);
      return nomAtt;
    },
    attributeValueTitle$3: function(parentRef, attributeRef, value) {
      var nomEl, nomAtt, lstrings, langueSyst, t1, strings, t2, sel, sat, eltitrev;
      nomEl = this._elementsToNamesCache.$index(0, parentRef);
      nomAtt = this._schema.attributeName$1(attributeRef);
      lstrings = this._stringsElements$0();
      langueSyst = Z.Locale$().language;
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        strings = t1._current;
        t2 = J.getInterceptor$x(strings);
        sel = Z.Config__nextNode(t2.get$firstChild(strings), "STRINGS_ELEMENT");
        for (; sel != null;) {
          if (J.$eq(sel.getAttribute$1(0, "element"), nomEl)) {
            sat = Z.Config__nextNode(sel.firstChild, "STRINGS_ATTRIBUT");
            for (; sat != null;) {
              if (J.$eq(sat.getAttribute$1(0, "attribut"), nomAtt)) {
                eltitrev = Z.Config__nextNode(sat.firstChild, "TITRE_VALEUR");
                for (; eltitrev != null;) {
                  if (J.$eq(eltitrev.getAttribute$1(0, "valeur"), value) && eltitrev.firstChild != null)
                    return Z.Config__dom_elementValue(eltitrev);
                  eltitrev = Z.Config__nextNode(eltitrev.nextSibling, "TITRE_VALEUR");
                }
                break;
              }
              sat = Z.Config__nextNode(sat.nextSibling, "STRINGS_ATTRIBUT");
            }
          }
          sel = Z.Config__nextNode(sel.nextSibling, "STRINGS_ELEMENT");
        }
        if (J.$eq(t2.getAttribute$1(strings, "langue"), langueSyst))
          return value;
      }
      return value;
    },
    attributeDocumentation$2: function(parentRef, attributeRef) {
      var nomEl, nomAtt, lstrings, t1, sel, sat, eldoc;
      nomEl = this._elementsToNamesCache.$index(0, parentRef);
      nomAtt = this._schema.attributeName$1(attributeRef);
      lstrings = this._stringsElements$0();
      for (t1 = new H.ListIterator(lstrings, lstrings.length, 0, null); t1.moveNext$0();) {
        sel = Z.Config__nextNode(J.get$firstChild$x(t1._current), "STRINGS_ELEMENT");
        for (; sel != null;) {
          if (J.$eq(sel.getAttribute$1(0, "element"), nomEl)) {
            sat = Z.Config__nextNode(sel.firstChild, "STRINGS_ATTRIBUT");
            for (; sat != null;) {
              if (J.$eq(sat.getAttribute$1(0, "attribut"), nomAtt)) {
                eldoc = Z.Config__nextNode(sat.firstChild, "DOCUMENTATION");
                if (eldoc != null && eldoc.get$firstChild(eldoc) != null)
                  return Z.Config__dom_elementValue(eldoc);
                break;
              }
              sat = Z.Config__nextNode(sat.nextSibling, "STRINGS_ATTRIBUT");
            }
          }
          sel = Z.Config__nextNode(sel.nextSibling, "STRINGS_ELEMENT");
        }
      }
      return this._schema.attributeDocumentation$1(attributeRef);
    },
    _getLanguage$0: function() {
      var t1 = this._languageNode;
      if (t1 == null) {
        t1 = Z.Config__nextNode(J.get$firstChild$x(this._cfgroot), "LANGAGE");
        this._languageNode = t1;
      }
      return t1;
    },
    _getSaving$0: function() {
      var t1 = this._savingNode;
      if (t1 == null) {
        t1 = Z.Config__nextNode(J.get$firstChild$x(this._cfgroot), "ENREGISTREMENT");
        this._savingNode = t1;
        if (t1 == null) {
          t1 = J.createElement$1$x(J.get$ownerDocument$x(this._cfgroot), "ENREGISTREMENT");
          this._savingNode = t1;
        }
      }
      return t1;
    },
    _getNodeDisplay$0: function() {
      var t1 = this._displayNode;
      if (t1 == null) {
        t1 = Z.Config__nextNode(J.get$firstChild$x(this._cfgroot), "AFFICHAGE_NOEUDS");
        this._displayNode = t1;
        if (t1 == null) {
          t1 = J.createElement$1$x(J.get$ownerDocument$x(this._cfgroot), "AFFICHAGE_NOEUDS");
          this._displayNode = t1;
        }
      }
      return t1;
    },
    _getStrings$0: function() {
      var child, t1;
      if (this._listeStrings == null) {
        this._listeStrings = H.setRuntimeTypeInfo([], [Z.Element]);
        child = J.get$firstChild$x(this._cfgroot);
        for (; child != null;) {
          t1 = J.getInterceptor$x(child);
          if (t1.get$nodeType(child) === 1 && J.$eq(t1.get$nodeName(child), "STRINGS"))
            this._listeStrings.push(H.interceptedTypeCast(child, "$isElement"));
          child = child.get$nextSibling();
        }
      }
      return this._listeStrings;
    },
    static: {"^": "Config__typeAffichageParDefaut", Config__getParentURL: function(u) {
        var t1, index;
        t1 = J.getInterceptor$asx(u);
        index = t1.lastIndexOf$1(u, "/");
        if (index >= 0)
          return t1.substring$2(u, 0, index);
        return;
      }, Config_localValue: function(s) {
        var t1, ind;
        if (s == null)
          return;
        t1 = J.getInterceptor$asx(s);
        ind = t1.indexOf$1(s, ":");
        if (ind === -1)
          return s;
        return t1.substring$1(s, ind + 1);
      }, Config_formatDoc: function(documentation) {
        var doc, t1, p, i, t2;
        doc = J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(documentation, "&", "&amp;"), "<", "&lt;"), ">", "&gt;");
        t1 = J.get$length$asx(doc);
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 100) {
          p = 0;
          i = 0;
          while (true) {
            t1 = J.getInterceptor$asx(doc);
            t2 = t1.get$length(doc);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            if (i - p > 90 && J.$eq(t1.$index(doc, i), " ")) {
              doc = t1.substring$2(doc, 0, i) + "\n" + C.JSString_methods.substring$1(doc, i + 1);
              p = i;
            } else if (J.$eq(t1.$index(doc, i), "\n"))
              p = i;
            ++i;
          }
        }
        return J.replaceAll$2$s(doc, "\n", "<br>");
      }, Config__dom_elementValue: function(el) {
        var fc, v;
        fc = el.get$firstChild(el);
        if (fc == null)
          return;
        v = J.get$nodeValue$x(fc);
        if (v == null)
          return;
        return J.trim$0$s(v);
      }, Config__nextNode: function(child, $name) {
        var t1;
        for (; child != null;) {
          t1 = J.getInterceptor$x(child);
          if (t1.get$nodeType(child) === 1 && $name === t1.get$nodeName(child))
            return H.interceptedTypeCast(child, "$isElement");
          child = child.get$nextSibling();
        }
        return;
      }, Config__nextElementDeep: function($parent, n, $name) {
        var current, next, t1;
        for (current = n, next = null; current != null;) {
          t1 = J.getInterceptor$x(current);
          if (t1.hasChildNodes$0(current) === true)
            current = t1.get$firstChild(current);
          else {
            if (current !== $parent) {
              next = current.get$nextSibling();
              t1 = null != next;
            } else
              t1 = false;
            if (t1)
              current = next;
            else {
              for (next = null; current == null ? $parent != null : current !== $parent;) {
                next = current.get$nextSibling();
                if (next != null)
                  break;
                current = current.parentNode;
              }
              current = next;
            }
          }
          t1 = J.getInterceptor(current);
          if (!t1.$eq(current, $parent) && current != null && t1.get$nodeType(current) === 1 && J.$eq(t1.get$nodeName(current), $name))
            return H.interceptedTypeCast(current, "$isElement");
        }
        return;
      }, Config_logError: function(message, ex) {
        var line;
        if (ex != null) {
          line = "Config: " + message + ": " + H.S(ex);
          H.printString(line);
        } else {
          line = "Config: " + message;
          H.printString(line);
        }
      }}
  },
  Config_load_closure: {
    "^": "Closure:30;this_0,cfgFilePath_1,schemaFilePath_2,completer_3",
    call$1: function(configdoc) {
      var t1, t2, t3, noms;
      t1 = J.getInterceptor$x(configdoc);
      if (J.$eq(J.get$nodeName$x(t1.get$documentElement(configdoc)), "CONFIG_JAXE"))
        ;
      else
        this.this_0._getResource$1(t1.get$documentElement(configdoc));
      t2 = this.this_0;
      t3 = this.cfgFilePath_1;
      t2._cfgdir = Z.Config__getParentURL(t3);
      t2._cfgroot = t1.get$documentElement(configdoc);
      t2._buildElementDisplayCache$0();
      t2._elementsTitlesCache = P.HashMap_HashMap(null, null, null, Z.Element, P.String);
      noms = t2.schemaName$0();
      if (noms == null) {
        t1 = t2._getLanguage$0();
        if (Z.Config__nextNode(t1.get$firstChild(t1), "SCHEMA_SIMPLE") == null) {
          this.completer_3.completeError$1(new Z.DaxeException("Error: no XML schema is defined in the config file " + H.S(t3), null));
          return;
        }
        t2.schemaURL = null;
        t2._buildElementsToNamesCache$0();
        this.completer_3.complete$0(0);
        return;
      }
      t1 = t2._cfgdir;
      if (t1 != null)
        t2.schemaURL = H.S(t1) + "/" + H.S(noms);
      else
        t2.schemaURL = noms;
      t1 = this.schemaFilePath_2;
      if (!J.$eq(t1, "") && t1 != null)
        t2.schemaURL = t1;
      t1 = t2._titlesHash$0();
      t3 = new O.DaxeWXS(null, P.HashMap_HashMap(null, null, null, Z.Element, O.WXSElement), P.HashMap_HashMap(null, null, null, Z.Element, O.WXSAttribute), P.HashMap_HashMap(null, null, null, P.String, [P.List, O.WXSElement]), null, P.LinkedHashSet_LinkedHashSet(null, null, null, O.WXSElement), null, null);
      t3.DaxeWXS$1(t1);
      t2._schema = t3;
      t1 = this.completer_3;
      t3.load$1(0, t2.schemaURL).then$2$onError(new Z.Config_load__closure(t2, t1), new Z.Config_load__closure0(t1));
    },
    $isFunction: true
  },
  Config_load__closure: {
    "^": "Closure:12;this_4,completer_5",
    call$1: function(_) {
      this.this_4._buildElementsToNamesCache$0();
      this.completer_5.complete$0(0);
    },
    $isFunction: true
  },
  Config_load__closure0: {
    "^": "Closure:31;completer_6",
    call$1: function(ex) {
      this.completer_6.completeError$1(new Z.DaxeException("Error reading schemaURL: " + H.S(ex), null));
    },
    $isFunction: true
  },
  Config_load_closure0: {
    "^": "Closure:32;cfgFilePath_7,completer_8",
    call$1: function(ex) {
      this.completer_8.completeError$1(new Z.DaxeException("Error reading " + H.S(this.cfgFilePath_7) + ": " + H.S(ex), null));
    },
    $isFunction: true
  },
  Config__creationMenu_closure: {
    "^": "Closure:10;box_0,doc_1",
    call$0: function() {
      var t1 = this.box_0;
      return this.doc_1.insertNewNode$2(t1.refElement_1, t1.typeNoeud_0);
    },
    $isFunction: true
  },
  Config__creationMenu_closure0: {
    "^": "Closure:10;doc_2,fonction_3,classe_4",
    call$0: function() {
      var t1 = this.classe_4;
      this.doc_2.toString;
      if (J.$eq(t1, "jaxe.FonctionNormal"))
        S.DNStyle_selectionToNormal();
      else if ($.get$customFunctions().$index(0, t1) != null)
        $.get$customFunctions().$index(0, t1).call$0();
      return;
    },
    $isFunction: true
  },
  Cursor: {
    "^": "Object;ta,caret,selectionStart,selectionEnd,spansSelection,selectedNodes,visible,timer,shortcuts,isime",
    setShortcuts$1: function(stringShortcuts) {
      var mappings, t1, key, up;
      mappings = P.HashMap_HashMap(null, null, null, P.String, P.$int);
      mappings.$indexSet(0, "A", 65);
      mappings.$indexSet(0, "B", 66);
      mappings.$indexSet(0, "C", 67);
      mappings.$indexSet(0, "D", 68);
      mappings.$indexSet(0, "E", 69);
      mappings.$indexSet(0, "F", 70);
      mappings.$indexSet(0, "G", 71);
      mappings.$indexSet(0, "H", 72);
      mappings.$indexSet(0, "I", 73);
      mappings.$indexSet(0, "J", 74);
      mappings.$indexSet(0, "K", 75);
      mappings.$indexSet(0, "L", 76);
      mappings.$indexSet(0, "M", 77);
      mappings.$indexSet(0, "N", 78);
      mappings.$indexSet(0, "O", 79);
      mappings.$indexSet(0, "P", 80);
      mappings.$indexSet(0, "Q", 81);
      mappings.$indexSet(0, "R", 82);
      mappings.$indexSet(0, "S", 83);
      mappings.$indexSet(0, "T", 84);
      mappings.$indexSet(0, "U", 85);
      mappings.$indexSet(0, "V", 86);
      mappings.$indexSet(0, "W", 87);
      mappings.$indexSet(0, "X", 88);
      mappings.$indexSet(0, "Y", 89);
      mappings.$indexSet(0, "Z", 90);
      for (t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(stringShortcuts), [H.getTypeArgumentByIndex(stringShortcuts, 0)])._map, t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null); t1.moveNext$0();) {
        key = t1._collection$_current;
        up = J.toUpperCase$0$s(key);
        if (mappings.$index(0, up) != null)
          this.shortcuts.$indexSet(0, mappings.$index(0, up), stringShortcuts.$index(0, key));
      }
    },
    keyDown$1: function($event) {
      var t1, ctrl, shift, keyCode, start, t2, end, t3, dn, offset, next, v;
      if (this.selectionStart == null)
        return;
      t1 = J.getInterceptor$x($event);
      ctrl = t1.get$ctrlKey($event) === true || t1.get$metaKey($event) === true;
      shift = t1.get$shiftKey($event);
      keyCode = t1.get$keyCode($event);
      if (keyCode === 229)
        this.isime = true;
      else
        this.isime = false;
      if (ctrl && keyCode === 88) {
        J.set$value$x(this.ta, this.copy$0());
        J.select$0$x(this.ta);
      } else if (ctrl && keyCode === 67) {
        J.set$value$x(this.ta, this.copy$0());
        J.select$0$x(this.ta);
      } else if (keyCode === 34)
        this.pageDown$0();
      else if (keyCode === 33)
        this.pageUp$0();
      else if (keyCode === 35)
        this.lineEnd$0();
      else if (keyCode === 36)
        this.lineStart$0();
      else if (keyCode === 37)
        if (shift === true) {
          t1 = this.selectionStart;
          start = new Z.Position(null, null);
          start._dn = t1._dn;
          start._dnOffset = t1._dnOffset;
          start.move$1(-1);
          this.setSelection$2(start, this.selectionEnd);
        } else {
          this.deSelect$0();
          this.selectionStart.move$1(-1);
          t1 = this.selectionStart;
          t2 = new Z.Position(null, null);
          t2._dn = t1._dn;
          t2._dnOffset = t1._dnOffset;
          this.selectionEnd = t2;
          this.updateCaretPosition$1(true);
          t2 = $.page;
          t2._insertP.update$1(t2._cursor.selectionStart);
          t2.updateMenus$0();
          t2.updatePath$0();
        }
      else if (keyCode === 38)
        this.up$0();
      else if (keyCode === 39) {
        t1 = this.selectionEnd;
        if (shift === true) {
          end = new Z.Position(null, null);
          end._dn = t1._dn;
          end._dnOffset = t1._dnOffset;
          end.move$1(1);
          this.setSelection$2(this.selectionStart, end);
        } else {
          end = new Z.Position(null, null);
          end._dn = t1._dn;
          end._dnOffset = t1._dnOffset;
          end.move$1(1);
          this.deSelect$0();
          t1 = new Z.Position(null, null);
          t2 = end._dn;
          t1._dn = t2;
          t3 = end._dnOffset;
          t1._dnOffset = t3;
          this.selectionStart = t1;
          t1 = new Z.Position(null, null);
          t1._dn = t2;
          t1._dnOffset = t3;
          this.selectionEnd = t1;
          this.updateCaretPosition$1(true);
          t1 = $.page;
          t1._insertP.update$1(t1._cursor.selectionStart);
          t1.updateMenus$0();
          t1.updatePath$0();
        }
      } else if (keyCode === 40)
        this.down$0();
      else if (keyCode === 8) {
        if (J.$eq(this.selectionStart, this.selectionEnd)) {
          this.selectionStart.move$1(-1);
          dn = this.selectionStart._dn;
          if (!!J.getInterceptor(dn).$isDNText)
            if (!!J.getInterceptor(dn.parent).$isDNStyle) {
              t1 = dn.get$offsetLength();
              if (typeof t1 !== "number")
                return t1.$gt();
              if (t1 > 1) {
                t1 = dn.get$offsetLength();
                t2 = this.selectionStart._dnOffset;
                t2 = t1 == null ? t2 == null : t1 === t2;
                t1 = t2;
              } else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
          if (t1)
            this.selectionStart.move$1(-1);
          t1 = this.selectionStart;
          t2 = new Z.Position(null, null);
          t2._dn = t1._dn;
          t2._dnOffset = t1._dnOffset;
          this.selectionEnd = t2;
          this.removeChar$1(t1);
        } else
          this.removeSelection$0();
        t1 = $.page;
        t1._insertP.update$1(t1._cursor.selectionStart);
        t1.updateMenus$0();
        t1.updatePath$0();
      } else if (keyCode === 46) {
        if (J.$eq(this.selectionStart, this.selectionEnd)) {
          t1 = this.selectionStart;
          dn = t1._dn;
          offset = t1._dnOffset;
          t1 = J.getInterceptor(dn);
          t2 = !!t1.$isDNText;
          if (!t2) {
            t3 = dn.get$offsetLength();
            if (typeof offset !== "number")
              return offset.$lt();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = offset < t3;
          } else
            t3 = false;
          if (t3) {
            t1 = t1.get$childNodes(dn);
            if (offset >>> 0 !== offset || offset >= t1.length)
              return H.ioore(t1, offset);
            next = t1[offset];
          } else {
            if (t2) {
              t1 = dn.get$offsetLength();
              t1 = (t1 == null ? offset == null : t1 === offset) && dn.nextSibling != null;
            } else
              t1 = false;
            next = t1 ? dn.get$nextSibling() : null;
          }
          if (!!J.getInterceptor(next).$isDNStyle && !!J.getInterceptor(next.firstChild).$isDNText) {
            this.selectionStart.move$1(1);
            t1 = this.selectionStart;
            t2 = new Z.Position(null, null);
            t2._dn = t1._dn;
            t2._dnOffset = t1._dnOffset;
            this.selectionEnd = t2;
          }
          this.removeChar$1(this.selectionStart);
        } else
          this.removeSelection$0();
        t1 = $.page;
        t1._insertP.update$1(t1._cursor.selectionStart);
        t1.updateMenus$0();
        t1.updatePath$0();
      } else if (ctrl && this.shortcuts.$index(0, keyCode) != null) {
        $event.preventDefault();
        return;
      } else if (!J.$eq(J.get$value$x(this.ta), "")) {
        v = J.get$value$x(this.ta);
        J.set$value$x(this.ta, "");
        if (this.isime !== true)
          $.doc.insertNewString$2(v, shift);
      } else
        return;
      this.newTimer$0();
    },
    keyUp$1: function($event) {
      var t1, ctrl, shift, keyCode, t2, v;
      t1 = J.getInterceptor$x($event);
      ctrl = t1.get$ctrlKey($event) === true || t1.get$metaKey($event) === true;
      shift = t1.get$shiftKey($event);
      keyCode = t1.get$keyCode($event);
      t1 = this.selectionStart;
      if (t1 == null)
        return;
      if (ctrl && shift !== true && keyCode === 90) {
        $.doc.undo$0();
        J.set$value$x(this.ta, "");
      } else {
        if (ctrl) {
          t2 = shift === true;
          if (!(!t2 && keyCode === 89))
            t2 = t2 && keyCode === 90;
          else
            t2 = true;
        } else
          t2 = false;
        if (t2) {
          $.doc.redo$0();
          J.set$value$x(this.ta, "");
        } else if (ctrl && shift !== true && keyCode === 88) {
          this.removeSelection$0();
          J.set$value$x(this.ta, "");
          t1 = $.page;
          t1._insertP.update$1(t1._cursor.selectionStart);
          t1.updateMenus$0();
          t1.updatePath$0();
        } else if (ctrl && shift !== true && keyCode === 67)
          J.set$value$x(this.ta, "");
        else if (ctrl && shift !== true && keyCode === 86) {
          if (!J.$eq(t1, this.selectionEnd))
            this.removeSelection$0();
          this.paste$1(J.get$value$x(this.ta));
          J.set$value$x(this.ta, "");
          t1 = $.page;
          t1._insertP.update$1(t1._cursor.selectionStart);
          t1.updateMenus$0();
          t1.updatePath$0();
        } else if (ctrl && this.shortcuts.$index(0, keyCode) != null) {
          $event.preventDefault();
          this.shortcuts.$index(0, keyCode).call$0();
          t1 = $.page;
          t1._insertP.update$1(t1._cursor.selectionStart);
          t1.updateMenus$0();
          t1.updatePath$0();
        } else if (!J.$eq(J.get$value$x(this.ta), "")) {
          if (this.isime === true)
            if (keyCode !== 32) {
              if (typeof keyCode !== "number")
                return keyCode.$ge();
              t1 = keyCode >= 48 && keyCode <= 57;
            } else
              t1 = true;
          else
            t1 = true;
          if (t1) {
            v = J.get$value$x(this.ta);
            J.set$value$x(this.ta, "");
            $.doc.insertNewString$2(v, shift);
          }
        } else
          return;
      }
      this.newTimer$0();
    },
    lineStart$0: function() {
      var pt, t1, pos;
      pt = this.selectionStart.positionOnScreen$0();
      pt.x = 0;
      t1 = pt.y;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 += 5;
      pt.y = t1;
      pos = $.doc.dndoc.findPosition$2(0, t1);
      if (pos == null)
        return;
      this.moveTo$1(0, pos);
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
    },
    lineEnd$0: function() {
      var pt, t1, t2, pos;
      pt = this.selectionStart.positionOnScreen$0();
      t1 = pt.x;
      if (typeof t1 !== "number")
        return t1.$add();
      t1 += 10000;
      pt.x = t1;
      t2 = pt.y;
      if (typeof t2 !== "number")
        return t2.$add();
      t2 += 5;
      pt.y = t2;
      pos = $.doc.dndoc.findPosition$2(t1, t2);
      if (pos == null)
        return;
      this.moveTo$1(0, pos);
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
    },
    up$0: function() {
      var pt, pos2, t1, t2, t3;
      this.deSelect$0();
      pt = this.selectionStart.positionOnScreen$0();
      if (pt == null)
        return;
      pos2 = this.selectionStart;
      for (; J.$eq(pos2, this.selectionStart);) {
        t1 = pt.y;
        if (typeof t1 !== "number")
          return t1.$sub();
        t1 -= 5;
        pt.y = t1;
        t2 = $.doc;
        t3 = pt.x;
        pos2 = t2.dndoc.findPosition$2(t3, t1);
        pos2.moveInsideTextNodeIfPossible$0();
      }
      if (pos2 != null) {
        this.selectionStart = pos2;
        t1 = new Z.Position(null, null);
        t1._dn = pos2._dn;
        t1._dnOffset = pos2._dnOffset;
        this.selectionEnd = t1;
      }
      this.updateCaretPosition$1(true);
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
    },
    down$0: function() {
      var pt, pos2, t1, t2, t3;
      this.deSelect$0();
      pt = this.selectionStart.positionOnScreen$0();
      if (pt == null)
        return;
      pos2 = this.selectionStart;
      for (; J.$eq(pos2, this.selectionStart);) {
        t1 = pt.y;
        if (typeof t1 !== "number")
          return t1.$add();
        t1 += 5;
        pt.y = t1;
        t2 = $.doc;
        t3 = pt.x;
        pos2 = t2.dndoc.findPosition$2(t3, t1);
        pos2.moveInsideTextNodeIfPossible$0();
      }
      if (pos2 != null) {
        this.selectionStart = pos2;
        t1 = new Z.Position(null, null);
        t1._dn = pos2._dn;
        t1._dnOffset = pos2._dnOffset;
        this.selectionEnd = t1;
      }
      this.updateCaretPosition$1(true);
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
    },
    pageUp$0: function() {
      var pt, doc1, t1, t2, t3, pos, initialScroll;
      pt = this.selectionStart.positionOnScreen$0();
      if (pt == null)
        return;
      doc1 = document.getElementById("doc1");
      t1 = pt.y;
      doc1.toString;
      t2 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetHeight));
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = t1 - t2;
      pt.y = t2;
      t1 = $.doc;
      t3 = pt.x;
      pos = t1.dndoc.findPosition$2(t3, t2);
      if (pos != null) {
        initialScroll = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.scrollTop));
        this.moveTo$1(0, pos);
        doc1.scrollTop = C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(initialScroll - C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetHeight))));
        t1 = $.page;
        t1._insertP.update$1(t1._cursor.selectionStart);
        t1.updateMenus$0();
        t1.updatePath$0();
      }
    },
    pageDown$0: function() {
      var pt, doc1, t1, t2, t3, pos, initialScroll;
      pt = this.selectionStart.positionOnScreen$0();
      if (pt == null)
        return;
      doc1 = document.getElementById("doc1");
      t1 = pt.y;
      doc1.toString;
      t2 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetHeight));
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = t1 + t2;
      pt.y = t2;
      t1 = $.doc;
      t3 = pt.x;
      pos = t1.dndoc.findPosition$2(t3, t2);
      if (pos != null) {
        initialScroll = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.scrollTop));
        this.moveTo$1(0, pos);
        doc1.scrollTop = C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(initialScroll + C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetHeight))));
        t1 = $.page;
        t1._insertP.update$1(t1._cursor.selectionStart);
        t1.updateMenus$0();
        t1.updatePath$0();
      }
    },
    updateCaretPosition$1: function($scroll) {
      var pt, doc1, doctop, t1, t2, prevBlock, nextBlock, horizontal;
      if (!J.$eq(this.selectionEnd, this.selectionStart))
        return;
      pt = this.selectionStart.positionOnScreen$0();
      if (pt == null)
        this.visible = false;
      else {
        this.visible = true;
        doc1 = document.getElementById("doc1");
        doc1.toString;
        doctop = P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetHeight)), null).top;
        t1 = P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.offsetHeight)), null);
        t2 = pt.y;
        if (typeof t2 !== "number")
          return t2.$sub();
        t2 -= doctop;
        if (t2 < 0 || t2 > t1.height)
          if ($scroll) {
            doc1.scrollTop = C.JSNumber_methods.toInt$0(C.JSInt_methods.roundToDouble$0(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(doc1.scrollTop)) + (J.toInt$0$n(pt.y) - doctop)));
            pt = this.selectionStart.positionOnScreen$0();
          } else
            this.visible = false;
      }
      t1 = this.visible;
      t2 = this.caret;
      if (t1) {
        J.set$visibility$x(t2.style, "visible");
        J.set$top$x(this.caret.style, H.S(pt.y) + "px");
        J.set$left$x(this.caret.style, H.S(pt.x) + "px");
        if (this._isBlock$1(this.selectionStart._dn.getHTMLNode$0())) {
          t1 = this.selectionStart._dn.get$offsetLength();
          if (typeof t1 !== "number")
            return t1.$gt();
          t1 = t1 > 0;
        } else
          t1 = false;
        if (t1) {
          t1 = this.selectionStart;
          t2 = t1._dnOffset;
          if (typeof t2 !== "number")
            return t2.$gt();
          prevBlock = !(t2 > 0) || this._isBlock$1(t1._dn.childAtOffset$1(t2 - 1).getHTMLNode$0());
          t1 = this.selectionStart;
          t2 = t1._dnOffset;
          t1 = t1._dn.get$offsetLength();
          if (typeof t2 !== "number")
            return t2.$lt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (t2 < t1) {
            t1 = this.selectionStart;
            nextBlock = this._isBlock$1(t1._dn.childAtOffset$1(t1._dnOffset).getHTMLNode$0());
          } else
            nextBlock = true;
          horizontal = prevBlock && nextBlock;
        } else
          horizontal = false;
        if (horizontal)
          J.get$classes$x(this.caret).add$1(0, "horizontal");
        else if (J.get$classes$x(this.caret).readClasses$0().contains$1(0, "horizontal"))
          J.get$classes$x(this.caret).remove$1(0, "horizontal");
        J.set$top$x(this.ta.style, H.S(pt.y) + "px");
        J.set$left$x(this.ta.style, H.S(pt.x) + "px");
        this.ta.focus();
      } else
        J.set$visibility$x(t2.style, "hidden");
    },
    _isBlock$1: function(el) {
      var t1 = J.getInterceptor(el);
      return !!t1.$isDivElement || !!t1.$isTableElement || !!t1.$isUListElement || !!t1.$isLIElement;
    },
    moveTo$1: function(_, pos) {
      var t1, t2;
      this.deSelect$0();
      t1 = new Z.Position(null, null);
      t1._dn = pos._dn;
      t1._dnOffset = pos._dnOffset;
      this.selectionStart = t1;
      t1.moveInsideTextNodeIfPossible$0();
      t1 = this.selectionStart;
      t2 = new Z.Position(null, null);
      t2._dn = t1._dn;
      t2._dnOffset = t1._dnOffset;
      this.selectionEnd = t2;
      this.updateCaretPosition$1(true);
    },
    show$0: function(_) {
      var t1 = this.selectionStart;
      if (t1 != null && J.$eq(t1, this.selectionEnd)) {
        this.visible = true;
        J.set$visibility$x(this.caret.style, "visible");
      }
    },
    setSelection$2: function(start, end) {
      var previousStart, t1, t2, temp, t3, next, prev, cont, dn, i, child, startParent, endParent, firstNode, p2, t4, p1, t5;
      if (J.$eq(this.selectionStart, start) && J.$eq(this.selectionEnd, end)) {
        if (J.$eq(start, end)) {
          this.show$0(0);
          this.ta.focus();
        }
        return;
      }
      this.deSelect$0();
      previousStart = this.selectionStart;
      t1 = new Z.Position(null, null);
      t1._dn = start._dn;
      t1._dnOffset = start._dnOffset;
      this.selectionStart = t1;
      t2 = new Z.Position(null, null);
      t2._dn = end._dn;
      t2._dnOffset = end._dnOffset;
      this.selectionEnd = t2;
      if (t1.$eq(0, t2)) {
        this.updateCaretPosition$1(false);
        t1 = $.page;
        t1._insertP.update$1(t1._cursor.selectionStart);
        t1.updateMenus$0();
        t1.updatePath$0();
        return;
      }
      if (this.selectionStart.$gt(0, this.selectionEnd)) {
        temp = this.selectionStart;
        this.selectionStart = this.selectionEnd;
        this.selectionEnd = temp;
      }
      while (true) {
        t1 = this.selectionStart;
        t2 = t1._dn;
        t3 = J.getInterceptor(t2);
        if (!((!!t3.$isDNText || !!t3.$isDNStyle) && t1._dnOffset === 0))
          break;
        t1 = t3.get$parent(t2);
        t2 = J.get$parent$x(this.selectionStart._dn).offsetOf$1(this.selectionStart._dn);
        t3 = new Z.Position(null, null);
        t3._dn = t1;
        t3._dnOffset = t2;
        this.selectionStart = t3;
      }
      while (true) {
        t2 = t1._dn;
        t3 = J.getInterceptor(t2);
        if (!!t3.$isDNText || !!t3.$isDNStyle) {
          t1 = t1._dnOffset;
          t2 = t2.get$offsetLength();
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = J.get$parent$x(this.selectionStart._dn);
        t2 = J.get$parent$x(this.selectionStart._dn).offsetOf$1(this.selectionStart._dn);
        if (typeof t2 !== "number")
          return t2.$add();
        t3 = new Z.Position(null, null);
        t3._dn = t1;
        t3._dnOffset = t2 + 1;
        this.selectionStart = t3;
        t1 = t3;
      }
      while (true) {
        t1 = this.selectionEnd;
        t2 = t1._dn;
        t3 = J.getInterceptor(t2);
        if (!!t3.$isDNText || !!t3.$isDNStyle) {
          t1 = t1._dnOffset;
          t2 = t2.get$offsetLength();
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = J.get$parent$x(this.selectionEnd._dn);
        t2 = J.get$parent$x(this.selectionEnd._dn).offsetOf$1(this.selectionEnd._dn);
        if (typeof t2 !== "number")
          return t2.$add();
        t3 = new Z.Position(null, null);
        t3._dn = t1;
        t3._dnOffset = t2 + 1;
        this.selectionEnd = t3;
      }
      while (true) {
        t1 = this.selectionEnd;
        t2 = t1._dn;
        t3 = J.getInterceptor(t2);
        if (!((!!t3.$isDNText || !!t3.$isDNStyle) && t1._dnOffset === 0))
          break;
        t1 = t3.get$parent(t2);
        t2 = J.get$parent$x(this.selectionEnd._dn).offsetOf$1(this.selectionEnd._dn);
        t3 = new Z.Position(null, null);
        t3._dn = t1;
        t3._dnOffset = t2;
        this.selectionEnd = t3;
      }
      if (!J.$eq(this.selectionStart, t1)) {
        t1 = this.selectionStart;
        t2 = t1._dn;
        t3 = J.getInterceptor(t2);
        if (!!t3.$isDNText || !!t3.$isDNStyle) {
          t1 = t1._dnOffset;
          t2 = t2.get$offsetLength();
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        if (t1) {
          next = J.nextNode$0$x(this.selectionStart._dn);
          t1 = J.getInterceptor$x(next);
          this.selectionStart = Z.Position$(t1.get$parent(next), t1.get$parent(next).offsetOf$1(next));
        }
        t1 = this.selectionEnd;
        t2 = t1._dn;
        t3 = J.getInterceptor(t2);
        if ((!!t3.$isDNText || !!t3.$isDNStyle) && t1._dnOffset === 0) {
          prev = t3.previousNode$0(t2);
          t1 = J.getInterceptor$x(prev);
          t2 = t1.get$parent(prev);
          t1 = t1.get$parent(prev).offsetOf$1(prev);
          if (typeof t1 !== "number")
            return t1.$add();
          this.selectionEnd = Z.Position$(t2, t1 + 1);
        }
        do {
          t1 = this.selectionStart;
          t2 = t1._dn;
          if (!J.getInterceptor(t2).$isDNText) {
            t1 = t1._dnOffset;
            t2 = t2.get$offsetLength();
            if (typeof t1 !== "number")
              return t1.$lt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
          if (t1) {
            t1 = this.selectionStart;
            next = t1._dn.childAtOffset$1(t1._dnOffset);
            t1 = this.selectionStart;
            t2 = t1._dn;
            t1 = t1._dnOffset;
            if (typeof t1 !== "number")
              return t1.$add();
            t3 = new Z.Position(null, null);
            t3._dn = t2;
            t3._dnOffset = t1 + 1;
            t1 = this.selectionEnd;
            if (!(t3.$eq(0, t1) || t3.$lt(0, t1) === true)) {
              t1 = new Z.Position(null, null);
              t1._dn = next;
              t1._dnOffset = 0;
              t1 = t1.$lt(0, this.selectionEnd) === true;
            } else
              t1 = false;
            if (t1) {
              t1 = new Z.Position(null, null);
              t1._dn = next;
              t1._dnOffset = 0;
              this.selectionStart = t1;
              cont = true;
            } else
              cont = false;
          } else
            cont = false;
        } while (cont);
        do {
          t1 = this.selectionEnd;
          t2 = t1._dn;
          if (!J.getInterceptor(t2).$isDNText) {
            t3 = t1._dnOffset;
            if (typeof t3 !== "number")
              return t3.$gt();
            t3 = t3 > 0;
          } else
            t3 = false;
          if (t3) {
            t1 = t1._dnOffset;
            if (typeof t1 !== "number")
              return t1.$sub();
            prev = t2.childAtOffset$1(t1 - 1);
            t1 = this.selectionEnd;
            t2 = t1._dn;
            t1 = t1._dnOffset;
            if (typeof t1 !== "number")
              return t1.$sub();
            t3 = new Z.Position(null, null);
            t3._dn = t2;
            t3._dnOffset = t1 - 1;
            if (t3.$lt(0, this.selectionStart) === true) {
              t1 = prev.get$offsetLength();
              t2 = new Z.Position(null, null);
              t2._dn = prev;
              t2._dnOffset = t1;
              t1 = this.selectionStart;
              t1 = !(t2.$eq(0, t1) || t2.$lt(0, t1) === true);
            } else
              t1 = false;
            if (t1) {
              t1 = prev.get$offsetLength();
              t2 = new Z.Position(null, null);
              t2._dn = prev;
              t2._dnOffset = t1;
              this.selectionEnd = t2;
              cont = true;
            } else
              cont = false;
          } else
            cont = false;
        } while (cont);
      }
      t1 = J.$eq(this.selectionStart._dn, this.selectionEnd._dn);
      t2 = this.selectionStart;
      if (t1) {
        dn = t2._dn;
        if (J.get$nodeType$x(dn) === 3)
          this.selectText$3(dn, this.selectionStart._dnOffset, this.selectionEnd._dnOffset);
        else {
          i = this.selectionStart._dnOffset;
          t1 = this.selectedNodes;
          while (true) {
            t2 = this.selectionEnd._dnOffset;
            if (typeof i !== "number")
              return i.$lt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            child = dn.childAtOffset$1(i);
            child.setSelected$1(true);
            t1.push(child);
            ++i;
          }
        }
      } else {
        startParent = t2._dn;
        t1 = J.getInterceptor$x(startParent);
        if (t1.get$nodeType(startParent) === 3)
          startParent = t1.get$parent(startParent);
        if (this.selectionEnd.$gt(0, Z.Position$(startParent, startParent.get$offsetLength())))
          this.selectionEnd = Z.Position$(startParent, startParent.get$offsetLength());
        else {
          endParent = this.selectionEnd._dn;
          t1 = J.getInterceptor$x(endParent);
          if (t1.get$nodeType(endParent) === 3)
            endParent = t1.get$parent(endParent);
          if (!J.$eq(endParent, startParent)) {
            for (; t1 = J.getInterceptor$x(endParent), !J.$eq(t1.get$parent(endParent), startParent);)
              endParent = t1.get$parent(endParent);
            this.selectionEnd = Z.Position$(startParent, startParent.offsetOf$1(endParent));
          }
        }
        t1 = J.get$nodeType$x(this.selectionStart._dn) === 1 || J.get$nodeType$x(this.selectionStart._dn) === 9;
        t2 = this.selectionStart;
        if (t1) {
          firstNode = t2._dn.childAtOffset$1(t2._dnOffset);
          if (firstNode != null) {
            t1 = this.selectionStart;
            t2 = t1._dn;
            t1 = t1._dnOffset;
            if (typeof t1 !== "number")
              return t1.$add();
            p2 = Z.Position$(t2, t1 + 1);
            t1 = this.selectionEnd;
            if (t1.$gt(0, p2) || t1.$eq(0, p2)) {
              firstNode.setSelected$1(true);
              this.selectedNodes.push(firstNode);
            }
          }
        } else {
          firstNode = t2._dn;
          this.selectText$3(firstNode, t2._dnOffset, firstNode.get$offsetLength());
        }
        if (firstNode != null)
          for (next = firstNode.get$nextSibling(), t1 = this.selectedNodes; next != null; next = next.get$nextSibling()) {
            t2 = J.getInterceptor$x(next);
            t3 = t2.get$parent(next);
            t4 = t2.get$parent(next).offsetOf$1(next);
            p1 = new Z.Position(null, null);
            p1._dn = t3;
            p1._dnOffset = t4;
            if (p1.$lt(0, this.selectionEnd) === true) {
              if (t2.get$nodeType(next) === 3) {
                t3 = this.selectionEnd;
                t4 = t2.get$parent(next);
                t2 = t2.get$parent(next).offsetOf$1(next);
                if (typeof t2 !== "number")
                  return t2.$add();
                t5 = new Z.Position(null, null);
                t5._dn = t4;
                t5._dnOffset = t2 + 1;
                if (J.$eq(t3._dn, t5.get$dn())) {
                  t2 = t3._dnOffset;
                  t4 = t5.get$dnOffset();
                  t4 = t2 == null ? t4 == null : t2 === t4;
                  t2 = t4;
                } else
                  t2 = false;
                if (t2 || t3.$lt(0, t5) === true)
                  if (J.$eq(t3._dn, t5.get$dn())) {
                    t2 = t3._dnOffset;
                    t5 = t5.get$dnOffset();
                    t5 = t2 == null ? t5 == null : t2 === t5;
                    t2 = t5;
                  } else
                    t2 = false;
                else
                  t2 = true;
              } else
                t2 = true;
              if (t2) {
                next.setSelected$1(true);
                t1.push(next);
              }
            } else
              break;
          }
        if (J.get$nodeType$x(this.selectionEnd._dn) === 3) {
          t1 = this.selectionEnd;
          this.selectText$3(t1._dn, 0, t1._dnOffset);
        }
      }
      if (!J.$eq(this.selectionEnd, this.selectionStart)) {
        this.visible = false;
        J.set$visibility$x(this.caret.style, "hidden");
      }
      if (!J.$eq(this.selectionStart, previousStart)) {
        t1 = $.page;
        t1._insertP.update$1(t1._cursor.selectionStart);
        t1.updateMenus$0();
        t1.updatePath$0();
      }
    },
    selectText$3: function(dn, offset1, offset2) {
      var $parent, t1, n, next, s, span, n3;
      $parent = dn.getHTMLNode$0();
      if ($parent == null)
        return;
      t1 = new W._ChildNodeListLazy($parent);
      n = t1.get$first(t1);
      next = n.nextSibling;
      this.visible = false;
      J.set$visibility$x(this.caret.style, "hidden");
      s = dn.get$nodeValue(dn);
      t1 = J.getInterceptor$ax(n);
      if (offset1 === 0)
        t1.remove$0(n);
      else
        t1.set$text(n, J.substring$2$s(s, 0, offset1));
      span = document.createElement("span", null);
      this.spansSelection.push(span);
      J.get$classes$x(span).add$1(0, "selection");
      t1 = J.getInterceptor$s(s).substring$2(s, offset1, offset2);
      span.appendChild(document.createTextNode(t1));
      if (next == null)
        $parent.appendChild(span);
      else
        $parent.insertBefore(span, next);
      if (offset2 !== s.length) {
        t1 = C.JSString_methods.substring$1(s, offset2);
        n3 = document.createTextNode(t1);
        t1 = span.nextSibling;
        if (t1 == null)
          $parent.appendChild(n3);
        else
          $parent.insertBefore(n3, t1);
      }
    },
    deSelect$0: function() {
      var t1, t2, $parent, sb, t3, str, t4;
      for (t1 = this.spansSelection, t2 = new H.ListIterator(t1, t1.length, 0, null); t2.moveNext$0();) {
        $parent = J.get$parent$x(t2._current);
        sb = new P.StringBuffer("");
        sb._contents = "";
        for (t3 = C.NodeList_methods.get$iterator(J.get$nodes$x($parent)._this.childNodes); t3.moveNext$0();) {
          str = J.get$text$x(t3._html$_current);
          sb._contents += typeof str === "string" ? str : H.S(str);
        }
        J._clearChildren$0$x($parent);
        t3 = sb._contents;
        t3 = t3.charCodeAt(0) == 0 ? t3 : t3;
        $parent.appendChild(document.createTextNode(t3));
        t3 = this.selectionStart;
        t4 = new Z.Position(null, null);
        t4._dn = t3._dn;
        t4._dnOffset = t3._dnOffset;
        this.selectionEnd = t4;
        this.visible = true;
      }
      C.JSArray_methods.set$length(t1, 0);
      for (t1 = this.selectedNodes, t2 = new H.ListIterator(t1, t1.length, 0, null); t2.moveNext$0();)
        t2._current.setSelected$1(false);
      C.JSArray_methods.set$length(t1, 0);
    },
    newTimer$0: function() {
      if (!this.visible)
        return;
      var t1 = this.timer;
      if (t1 != null)
        t1.cancel$0();
      J.set$visibility$x(this.caret.style, "visible");
      this.timer = P.Timer_Timer$periodic(C.Duration_700000, new Z.Cursor_newTimer_closure(this));
    },
    caretBlink$0: function() {
      if (!this.visible)
        return;
      if (J.get$visibility$x(this.caret.style) === "hidden")
        J.set$visibility$x(this.caret.style, "visible");
      else if (J.get$visibility$x(this.caret.style) === "visible")
        J.set$visibility$x(this.caret.style, "hidden");
    },
    removeChar$1: function(pos) {
      var t1, t2, current, next, toremove;
      if (J.get$nodeType$x(pos._dn) === 3) {
        t1 = pos._dn.get$offsetLength();
        t2 = pos._dnOffset;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t1 !== "number")
          return t1.$lt();
        t1 = t1 < t2 + 1 && pos._dn.get$nextSibling() != null;
      } else
        t1 = false;
      if (t1) {
        current = pos._dn;
        next = current.get$nextSibling();
        while (true) {
          if (!(next == null && J.get$parent$x(current) != null))
            break;
          current = J.get$parent$x(current);
          next = current.get$nextSibling();
        }
        t1 = J.getInterceptor$x(next);
        toremove = t1.get$nodeType(next) === 3 && t1.get$parent(next) != null && next.get$offsetLength() === 1 ? t1.get$parent(next) : next;
        if (!toremove.get$userCannotRemove())
          $.doc.removeNode$1(toremove);
      } else {
        if (J.get$nodeType$x(pos._dn) === 3) {
          t1 = pos._dn.get$offsetLength();
          t2 = pos._dnOffset;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t1 !== "number")
            return t1.$lt();
          t1 = t1 < t2 + 1 && pos._dn.get$nextSibling() == null;
        } else
          t1 = false;
        if (t1) {
          toremove = pos._dn;
          t1 = J.getInterceptor$x(toremove);
          if (t1.get$parent(toremove) != null)
            toremove = t1.get$parent(toremove);
          if (!toremove.get$userCannotRemove())
            $.doc.removeNode$1(toremove);
        } else {
          if (J.get$nodeType$x(pos._dn) === 1) {
            t1 = pos._dn.get$offsetLength();
            t2 = pos._dnOffset;
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t1 !== "number")
              return t1.$lt();
            t2 = t1 < t2 + 1;
            t1 = t2;
          } else
            t1 = false;
          if (t1) {
            toremove = pos._dn;
            if (!toremove.get$userCannotRemove())
              $.doc.removeNode$1(toremove);
          } else if (J.get$nodeType$x(pos._dn) === 1 || J.get$nodeType$x(pos._dn) === 9) {
            toremove = pos._dn.childAtOffset$1(pos._dnOffset);
            if (toremove == null)
              window.alert("I'm sorry Dave, I'm afraid I can't do that.");
            else if (!toremove.get$userCannotRemove())
              $.doc.removeNode$1(toremove);
          } else {
            t1 = $.doc;
            t1.toString;
            t1.doNewEdit$1(Z.UndoableEdit$removeString(pos, 1, true));
          }
        }
      }
    },
    removeSelection$0: function() {
      var t1, start, end;
      if (J.$eq(this.selectionStart, this.selectionEnd))
        return;
      t1 = this.selectionStart;
      start = new Z.Position(null, null);
      start._dn = t1._dn;
      start._dnOffset = t1._dnOffset;
      t1 = this.selectionEnd;
      end = new Z.Position(null, null);
      end._dn = t1._dn;
      end._dnOffset = t1._dnOffset;
      this.deSelect$0();
      t1 = $.doc;
      t1.doNewEdit$1(t1.removeBetweenEdit$2(start, end));
    },
    copy$0: function() {
      var sb, dn, t1, i, child, t2, firstNode, p2, next, t3, p1, t4;
      sb = P.StringBuffer$("");
      if (J.$eq(this.selectionStart._dn, this.selectionEnd._dn)) {
        dn = this.selectionStart._dn;
        t1 = J.getInterceptor$x(dn);
        if (t1.get$nodeType(dn) === 3)
          sb.write$1(J.substring$2$s(t1.get$nodeValue(dn), this.selectionStart._dnOffset, this.selectionEnd._dnOffset));
        else {
          i = this.selectionStart._dnOffset;
          while (true) {
            t1 = this.selectionEnd._dnOffset;
            if (typeof i !== "number")
              return i.$lt();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            child = dn.childAtOffset$1(i);
            sb._contents += typeof child === "string" ? child : H.S(child);
            ++i;
          }
        }
      } else {
        t1 = J.get$nodeType$x(this.selectionStart._dn);
        t2 = this.selectionStart;
        if (t1 === 1) {
          firstNode = t2._dn.childAtOffset$1(t2._dnOffset);
          t1 = this.selectionStart;
          t2 = t1._dn;
          t1 = t1._dnOffset;
          if (typeof t1 !== "number")
            return t1.$add();
          p2 = Z.Position$(t2, t1 + 1);
          t1 = this.selectionEnd;
          if (t1.$gt(0, p2) || t1.$eq(0, p2))
            sb.write$1(firstNode);
        } else {
          firstNode = t2._dn;
          sb.write$1(J.substring$1$s(J.get$nodeValue$x(firstNode), this.selectionStart._dnOffset));
        }
        for (next = firstNode.get$nextSibling(); next != null; next = next.get$nextSibling()) {
          t1 = J.getInterceptor$x(next);
          t2 = t1.get$parent(next);
          t3 = t1.get$parent(next).offsetOf$1(next);
          p1 = new Z.Position(null, null);
          p1._dn = t2;
          p1._dnOffset = t3;
          if (p1.$lt(0, this.selectionEnd) === true) {
            if (t1.get$nodeType(next) === 3) {
              t2 = this.selectionEnd;
              t3 = t1.get$parent(next);
              t1 = t1.get$parent(next).offsetOf$1(next);
              if (typeof t1 !== "number")
                return t1.$add();
              t4 = new Z.Position(null, null);
              t4._dn = t3;
              t4._dnOffset = t1 + 1;
              if (J.$eq(t2._dn, t4.get$dn())) {
                t1 = t2._dnOffset;
                t3 = t4.get$dnOffset();
                t3 = t1 == null ? t3 == null : t1 === t3;
                t1 = t3;
              } else
                t1 = false;
              if (t1 || t2.$lt(0, t4) === true)
                if (J.$eq(t2._dn, t4.get$dn())) {
                  t1 = t2._dnOffset;
                  t4 = t4.get$dnOffset();
                  t4 = t1 == null ? t4 == null : t1 === t4;
                  t1 = t4;
                } else
                  t1 = false;
              else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              sb._contents += H.S(next);
              next.setSelected$1(true);
            }
          } else
            break;
        }
        if (J.get$nodeType$x(this.selectionEnd._dn) === 3)
          sb.write$1(J.substring$2$s(J.get$nodeValue$x(this.selectionEnd._dn), 0, this.selectionEnd._dnOffset));
      }
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    paste$1: function(s) {
      var tmpdoc, dp, dnRoot, edit, ex, exception, $parent, root, t1, n, refs, nRef, t2, t3, ref, $name, dn;
      tmpdoc = null;
      try {
        dp = new Z.DOMParser();
        tmpdoc = dp.parseFromString$1("<root>" + H.S(s) + "</root>");
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isDOMException) {
          $.doc.insertString$2(this.selectionStart, s);
          return true;
        } else
          throw exception;
      }

      $parent = this.selectionStart._dn;
      if (!!J.getInterceptor($parent).$isDNText)
        $parent = $parent.parent;
      root = J.get$documentElement$x(tmpdoc);
      dnRoot = Z.NodeFactory_create($parent.get$ref(), "element");
      for (t1 = J.get$childNodes$x(root), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        n = t1._current;
        refs = $.doc.elementsAllowedUnder$1($parent);
        t2 = new H.ListIterator(refs, refs.length, 0, null);
        t3 = J.getInterceptor$x(n);
        while (true) {
          if (!t2.moveNext$0()) {
            nRef = null;
            break;
          }
          ref = t2._current;
          $name = $.doc.cfg._elementsToNamesCache.$index(0, ref);
          if (J.$eq(t3.get$localName(n), $name)) {
            nRef = ref;
            break;
          }
        }
        dn = Z.NodeFactory_createFromNode(n, dnRoot);
        dn.set$ref(nRef);
        dnRoot.appendChild$1(dn);
      }
      dnRoot.fixLineBreaks$0();
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.paste"));
      try {
        t1 = $.doc.insertChildrenEdit$3$checkValidity(dnRoot, this.selectionStart, true);
        edit.get$subEdits().push(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (!!J.getInterceptor(t1).$isDaxeException) {
          ex = t1;
          window.alert(J.toString$0(ex));
          return false;
        } else
          throw exception;
      }

      $.doc.doNewEdit$1(edit);
      return true;
    },
    Cursor$0: function() {
      this.ta = document.querySelector("#tacursor");
      this.caret = document.querySelector("#caret");
      this.visible = true;
      this.shortcuts = P.HashMap_HashMap(null, null, null, P.$int, {func: "void_", void: true});
      var t1 = J.get$onKeyUp$x(this.ta);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.Cursor_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onKeyDown$x(this.ta);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.Cursor_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onBlur$x(this.ta);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.Cursor_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      this.newTimer$0();
    },
    static: {"^": "Cursor_delay", Cursor$: function() {
        var t1 = new Z.Cursor(null, null, null, null, H.setRuntimeTypeInfo([], [W.SpanElement]), H.setRuntimeTypeInfo([], [Z.DaxeNode]), null, null, null, null);
        t1.Cursor$0();
        return t1;
      }, Cursor_findPosition: function($event) {
        var t1, t2, t3, pos1;
        t1 = $.doc;
        t2 = J.getInterceptor$x($event);
        t3 = t2.get$client($event);
        t3 = t3.get$x(t3);
        t2 = t2.get$client($event);
        t2 = t2.get$y(t2);
        pos1 = t1.dndoc.findPosition$2(t3, t2);
        if (pos1 == null)
          return;
        pos1.moveInsideTextNodeIfPossible$0();
        return pos1;
      }}
  },
  Cursor_closure: {
    "^": "Closure:33;this_0",
    call$1: function($event) {
      return this.this_0.keyUp$1($event);
    },
    $isFunction: true
  },
  Cursor_closure0: {
    "^": "Closure:33;this_1",
    call$1: function($event) {
      return this.this_1.keyDown$1($event);
    },
    $isFunction: true
  },
  Cursor_closure1: {
    "^": "Closure:28;this_2",
    call$1: function($event) {
      var t1 = this.this_2;
      t1.visible = false;
      J.set$visibility$x(t1.caret.style, "hidden");
      return;
    },
    $isFunction: true
  },
  Cursor_newTimer_closure: {
    "^": "Closure:34;this_0",
    call$1: function(t) {
      return this.this_0.caretBlink$0();
    },
    $isFunction: true
  },
  main_closure: {
    "^": "Closure:21;",
    call$1: function(b) {
      var t1, search, parameters, file, config, xsd, saveURL, textAreaId, rootNum, lparam, t2;
      $.doc = new Z.DaxeDocument(0, P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Z.DaxeNode), null, null, H.setRuntimeTypeInfo([], [Z.UndoableEdit]), -1, null, null, null, null, "");
      t1 = new Z.WebPage(null, null, null, null, null, null, null, null, null, null, null);
      t1.WebPage$0();
      $.page = t1;
      search = window.location.search;
      parameters = (J.getInterceptor$s(search).startsWith$1(search, "?") ? C.JSString_methods.substring$1(search, 1) : search).split("&");
      for (t1 = new H.ListIterator(parameters, parameters.length, 0, null), file = null, config = null, xsd = null, saveURL = null, textAreaId = null, rootNum = null; t1.moveNext$0();) {
        lparam = J.split$1$s(t1._current, "=");
        t2 = lparam.length;
        if (t2 !== 2)
          continue;
        if (0 >= t2)
          return H.ioore(lparam, 0);
        if (J.$eq(lparam[0], "config")) {
          if (1 >= lparam.length)
            return H.ioore(lparam, 1);
          config = lparam[1];
        } else {
          if (0 >= lparam.length)
            return H.ioore(lparam, 0);
          if (J.$eq(lparam[0], "file")) {
            if (1 >= lparam.length)
              return H.ioore(lparam, 1);
            file = P.Uri__uriDecode(lparam[1], C.Utf8Codec_false, false);
          } else {
            if (0 >= lparam.length)
              return H.ioore(lparam, 0);
            if (J.$eq(lparam[0], "save")) {
              if (1 >= lparam.length)
                return H.ioore(lparam, 1);
              saveURL = lparam[1];
            } else {
              if (0 >= lparam.length)
                return H.ioore(lparam, 0);
              if (J.$eq(lparam[0], "textareaid")) {
                if (1 >= lparam.length)
                  return H.ioore(lparam, 1);
                textAreaId = lparam[1];
              } else {
                if (0 >= lparam.length)
                  return H.ioore(lparam, 0);
                if (J.$eq(lparam[0], "root")) {
                  if (1 >= lparam.length)
                    return H.ioore(lparam, 1);
                  rootNum = lparam[1];
                } else {
                  if (0 >= lparam.length)
                    return H.ioore(lparam, 0);
                  if (J.$eq(lparam[0], "xsd")) {
                    if (1 >= lparam.length)
                      return H.ioore(lparam, 1);
                    xsd = lparam[1];
                  }
                }
              }
            }
          }
        }
      }
      if (saveURL != null)
        $.doc.saveURL = saveURL;
      if (xsd != null)
        $.doc.schemaPath = xsd;
      if (rootNum != null)
        $.doc.rootNum = rootNum;
      t1 = config != null;
      if (t1 && file != null && textAreaId == null)
        $.page.openDocument$2(file, config);
      else if (t1 && textAreaId != null && file == null) {
        $.doc.rootNum = rootNum;
        $.page.openDocumentFromPost$1(config);
        $.doc.textAreaId = textAreaId;
      } else
        window.alert($.Strings_map.$index(0, "daxe.missing_config"));
    },
    $isFunction: true
  },
  DaxeAttr: {
    "^": "Object;namespaceURI<,prefix@,localName>,value*",
    get$name: function(_) {
      var t1 = this.prefix;
      if (t1 == null)
        return this.localName;
      else
        return H.S(t1) + ":" + H.S(this.localName);
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.prefix;
      if (t1 != null) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      sb.write$1(this.localName);
      sb.write$1("=\"");
      sb.write$1(J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(this.value, "&", "&amp;"), "\"", "&quot;"), "<", "&lt;"), ">", "&gt;"));
      sb.write$1("\"");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    DaxeAttr$fromNode$1: function(a) {
      this.namespaceURI = a.get$namespaceURI();
      this.prefix = a.get$prefix();
      if (a.get$prefix() != null)
        this.localName = a.get$localName(a);
      else
        this.localName = a.get$name(a);
      this.value = a.get$nodeValue(a);
    },
    DaxeAttr$2: function($name, value) {
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = $name;
      this.value = value;
    },
    DaxeAttr$NS$3: function(namespace, qualifiedName, value) {
      var t1, ind;
      this.namespaceURI = namespace;
      t1 = J.getInterceptor$asx(qualifiedName);
      ind = t1.indexOf$1(qualifiedName, ":");
      if (ind === -1) {
        this.prefix = null;
        this.localName = qualifiedName;
      } else {
        this.prefix = t1.substring$2(qualifiedName, 0, ind);
        this.localName = C.JSString_methods.substring$1(qualifiedName, ind + 1);
      }
      this.value = value;
    },
    static: {DaxeAttr$: function($name, value) {
        var t1 = new Z.DaxeAttr(null, null, null, null);
        t1.DaxeAttr$2($name, value);
        return t1;
      }, DaxeAttr$NS: function(namespace, qualifiedName, value) {
        var t1 = new Z.DaxeAttr(null, null, null, null);
        t1.DaxeAttr$NS$3(namespace, qualifiedName, value);
        return t1;
      }}
  },
  DaxeDocument: {
    "^": "Object;_id_count,_idToJN,dndoc,cfg,edits,undoPosition,filePath,saveURL,textAreaId,rootNum,schemaPath",
    openDocument$2: function(filePath, configPath) {
      var completer, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t1 = new Z.Config(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      this.cfg = t1;
      t1.load$2(0, configPath, this.schemaPath).then$2$onError(new Z.DaxeDocument_openDocument_closure(this, filePath, completer), new Z.DaxeDocument_openDocument_closure0(configPath, completer));
      return completer.future;
    },
    openDocumentFromPost$1: function(configPath) {
      var completer, t1;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t1 = new Z.Config(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      this.cfg = t1;
      t1.load$2(0, configPath, this.schemaPath).then$1(new Z.DaxeDocument_openDocumentFromPost_closure(this, completer));
      return completer.future;
    },
    getXmlFromPost$0: function() {
      var t1, completer, t2, listenMessage;
      t1 = {};
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      t1.xmlString_0 = null;
      t1.listenMessage_1 = null;
      t2 = H.setRuntimeTypeInfo(new W._EventStream(window, "message", false), [null]);
      listenMessage = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.DaxeDocument_getXmlFromPost_closure(t1, completer)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)]);
      listenMessage._tryResume$0();
      t1.listenMessage_1 = listenMessage;
      J.postMessage$2$x(W._convertNativeToDart_Window(window.parent), "get", window.location.href);
      return completer.future;
    },
    saveOnWebJaxe$0: function() {
      var completer, request, t1, sb;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      request = new XMLHttpRequest();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.DaxeDocument_saveOnWebJaxe_closure(completer, request)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(request, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.DaxeDocument_saveOnWebJaxe_closure0(completer, request)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      C.HttpRequest_methods.open$2(request, "POST", this.saveURL);
      request.setRequestHeader("Content-Type", "multipart/form-data; boundary=AaB03x");
      sb = P.StringBuffer$("");
      sb.write$1("--AaB03x\r\n");
      sb.write$1("Content-Disposition: form-data; name=\"chemin\"\r\n");
      sb.write$1("Content-type: text/plain; charset=UTF-8\r\n");
      sb.write$1("Content-transfer-encoding: 8bit\r\n\r\n");
      sb.write$1(this.filePath);
      sb.write$1("\r\n--AaB03x\r\n");
      sb.write$1("Content-Disposition: form-data; name=\"contenu\"; filename=\"" + H.S(this.filePath) + "\"\r\n");
      sb.write$1("Content-Type: application/octet-stream\r\n\r\n");
      this.dndoc.set$xmlEncoding("UTF-8");
      sb.write$1(J.toString$0(this.dndoc));
      sb.write$1("\r\n--AaB03x--\r\n\r\n");
      t1 = sb._contents;
      request.send(t1.charCodeAt(0) == 0 ? t1 : t1);
      return completer.future;
    },
    newId$1: function(jn) {
      var sid = "a" + ++this._id_count;
      this._idToJN.$indexSet(0, sid, jn);
      return sid;
    },
    html$0: function(_) {
      return J.html$0$x(this.dndoc);
    },
    getRootElement$0: function() {
      for (var dn = J.get$firstChild$x(this.dndoc); dn != null; dn = dn.get$nextSibling())
        if (J.get$nodeType$x(dn) === 1)
          return dn;
      return;
    },
    insertNode$2: function(_, dn, pos) {
      this.doNewEdit$1(Z.UndoableEdit$insertNode(pos, dn, true));
    },
    removeNode$1: function(dn) {
      this.doNewEdit$1(Z.UndoableEdit$removeNode(dn, true));
    },
    insertString$2: function(pos, s) {
      this.doNewEdit$1(Z.UndoableEdit$insertString(pos, s, true));
    },
    removeBetweenEdit$2: function(start, end) {
      var edit, dn, t1, t2, t3, i, firstNode, p2, next, p1;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.remove"));
      if (J.$eq(start._dn, end._dn)) {
        dn = start._dn;
        if (J.get$nodeType$x(dn) === 3) {
          t1 = Z.Position$(dn, start._dnOffset);
          t2 = end._dnOffset;
          t3 = start._dnOffset;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = Z.UndoableEdit$removeString(t1, t2 - t3, true);
          edit.subEdits.push(t3);
        } else {
          i = start._dnOffset;
          while (true) {
            t1 = end._dnOffset;
            if (typeof i !== "number")
              return i.$lt();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1))
              break;
            t1 = Z.UndoableEdit$removeNode(dn.childAtOffset$1(i), true);
            edit.subEdits.push(t1);
            ++i;
          }
        }
      } else {
        if (J.get$nodeType$x(start._dn) === 1) {
          firstNode = start._dn.childAtOffset$1(start._dnOffset);
          t1 = start._dn;
          t2 = start._dnOffset;
          if (typeof t2 !== "number")
            return t2.$add();
          p2 = Z.Position$(t1, t2 + 1);
          if (end.$gt(0, p2) || end.$eq(0, p2)) {
            t1 = Z.UndoableEdit$removeNode(firstNode, true);
            edit.subEdits.push(t1);
          }
        } else {
          firstNode = start._dn;
          t1 = firstNode.get$offsetLength();
          t2 = start._dnOffset;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 - t2 > 0) {
            t1 = Z.Position$(firstNode, t2);
            t2 = firstNode.get$offsetLength();
            t3 = start._dnOffset;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = Z.UndoableEdit$removeString(t1, t2 - t3, true);
            edit.subEdits.push(t3);
          }
        }
        if (J.get$nodeType$x(end._dn) === 3) {
          t1 = end._dnOffset;
          if (typeof t1 !== "number")
            return t1.$gt();
          t1 = t1 > 0;
        } else
          t1 = false;
        if (t1) {
          t1 = Z.UndoableEdit$removeString(Z.Position$(end._dn, 0), end._dnOffset, true);
          edit.subEdits.push(t1);
        }
        for (next = firstNode.get$nextSibling(); next != null; next = next.get$nextSibling()) {
          t1 = J.getInterceptor$x(next);
          t2 = t1.get$parent(next);
          t3 = t1.get$parent(next).offsetOf$1(next);
          p1 = new Z.Position(null, null);
          p1._dn = t2;
          p1._dnOffset = t3;
          if (p1.$lt(0, end) === true) {
            if (t1.get$nodeType(next) === 3) {
              t2 = t1.get$parent(next);
              t1 = t1.get$parent(next).offsetOf$1(next);
              if (typeof t1 !== "number")
                return t1.$add();
              t3 = new Z.Position(null, null);
              t3._dn = t2;
              t3._dnOffset = t1 + 1;
              if (J.$eq(end._dn, t3.get$dn())) {
                t1 = end._dnOffset;
                t2 = t3.get$dnOffset();
                t2 = t1 == null ? t2 == null : t1 === t2;
                t1 = t2;
              } else
                t1 = false;
              if (t1 || end.$lt(0, t3) === true)
                if (J.$eq(end._dn, t3.get$dn())) {
                  t1 = end._dnOffset;
                  t3 = t3.get$dnOffset();
                  t3 = t1 == null ? t3 == null : t1 === t3;
                  t1 = t3;
                } else
                  t1 = false;
              else
                t1 = true;
            } else
              t1 = false;
            if (t1) {
              t1 = Z.UndoableEdit$removeNode(next, true);
              edit.subEdits.push(t1);
            }
          } else
            break;
        }
        for (next = firstNode.get$nextSibling(); next != null; next = next.get$nextSibling()) {
          t1 = J.getInterceptor$x(next);
          t2 = t1.get$parent(next);
          t3 = t1.get$parent(next).offsetOf$1(next);
          p1 = new Z.Position(null, null);
          p1._dn = t2;
          p1._dnOffset = t3;
          if (p1.$lt(0, end) === true) {
            if (t1.get$nodeType(next) !== 3) {
              t1 = Z.UndoableEdit$removeNode(next, true);
              edit.subEdits.push(t1);
            }
          } else
            break;
        }
      }
      return edit;
    },
    insertChildrenEdit$3$checkValidity: function(root, pos, checkValidity) {
      var t1, t2, $parent, offset, edit, t3, t4, t5, dn, t6, t7, value, t8, t9, title, parentTitle;
      t1 = pos._dn;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isDNText && pos._dnOffset === 0)
        pos = Z.Position$(t2.get$parent(t1), J.get$parent$x(pos._dn).offsetOf$1(pos._dn));
      $parent = pos._dn;
      offset = pos._dnOffset;
      if (!!J.getInterceptor($parent).$isDNText) {
        offset = $parent.parent.offsetOf$1($parent);
        $parent = $parent.parent;
      }
      edit = Z.UndoableEdit$compound("insertChildren");
      for (t1 = root.get$childNodes(root), t1 = H.setRuntimeTypeInfo(new H.ReversedListIterable(t1), [H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0)]), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null), t2 = J.getInterceptor($parent), t3 = !t2.$isDNComment, t4 = !t2.$isDNCData, t5 = !!t2.$isDNProcessingInstruction; t1.moveNext$0();) {
        dn = t1._current;
        if (checkValidity)
          t6 = (!t3 || !t4 || t5) && !J.getInterceptor(dn).$isDNText;
        else
          t6 = false;
        if (t6)
          throw H.wrapException(Z.DaxeException$(J.$add$ns(J.$add$ns(dn.get$ref() == null ? dn.get$nodeName(dn) : $.doc.cfg.elementTitle$1(dn.get$ref()), " "), R.Strings_get("insert.not_authorized_here")), null));
        t6 = J.getInterceptor(dn);
        t7 = !!t6.$isDNText;
        if (t7 || !!t6.$isDNCData) {
          if (checkValidity && t2.get$nodeType($parent) === 9)
            throw H.wrapException(Z.DaxeException$(R.Strings_get("insert.text_not_allowed"), null));
          if (t7)
            value = dn.nodeValue;
          else
            value = t6.get$firstChild(dn) != null ? J.get$nodeValue$x(t6.get$firstChild(dn)) : null;
          if (value == null)
            value = "";
          if (checkValidity && J.trim$0$s(value) !== "" && !$.doc.cfg.canContainText$1($parent.get$ref()))
            throw H.wrapException(Z.DaxeException$(R.Strings_get("insert.text_not_allowed"), null));
          if (t7) {
            t6 = Z.UndoableEdit$insertString(pos, dn.nodeValue, true);
            edit.subEdits.push(t6);
          } else {
            t6 = Z.UndoableEdit$insertNode(pos, dn, true);
            edit.subEdits.push(t6);
          }
        } else {
          if (checkValidity)
            if (t2.get$nodeType($parent) === 9) {
              if (!C.JSArray_methods.contains$1($.doc.cfg.rootElements$0(), dn.get$ref()))
                throw H.wrapException(Z.DaxeException$(J.$add$ns(J.$add$ns($.doc.cfg.elementTitle$1(dn.get$ref()), " "), R.Strings_get("insert.not_authorized_here")), null));
            } else if (!t6.$isDNComment && !t6.$isDNProcessingInstruction) {
              if (dn.get$ref() != null) {
                t7 = $.doc.cfg;
                t8 = $parent.get$ref();
                t9 = dn.get$ref();
                t9 = !J.contains$1$asx(t7._schema.subElements$1(t8), t9);
                t7 = t9;
              } else
                t7 = true;
              if (t7) {
                title = dn.get$ref() == null ? t6.get$nodeName(dn) : $.doc.cfg.elementTitle$1(dn.get$ref());
                parentTitle = $.doc.cfg.elementTitle$1($parent.get$ref());
                throw H.wrapException(Z.DaxeException$(J.$add$ns(J.$add$ns(J.$add$ns(J.$add$ns(title, " "), R.Strings_get("insert.not_authorized_inside")), " "), parentTitle), null));
              }
              if (!$.doc.cfg.insertIsPossible$4($parent, offset, offset, dn.get$ref()))
                throw H.wrapException(Z.DaxeException$(J.$add$ns(J.$add$ns($.doc.cfg.elementTitle$1(dn.get$ref()), " "), R.Strings_get("insert.not_authorized_here")), null));
            }
          t6 = Z.UndoableEdit$insertNode(pos, dn, true);
          edit.subEdits.push(t6);
        }
      }
      return edit;
    },
    toString$0: function(_) {
      return J.toString$0(this.dndoc);
    },
    doNewEdit$1: function(edit) {
      var t1, t2, t3;
      edit.doit$0();
      t1 = this.undoPosition;
      t2 = this.edits;
      t3 = t2.length;
      if (t1 < t3 - 1)
        C.JSArray_methods.removeRange$2(t2, t1 + 1, t3);
      t1 = this.undoPosition;
      if (t1 >= 0) {
        if (t1 < 0 || t1 >= t2.length)
          return H.ioore(t2, t1);
        t1 = !t2[t1].addEdit$1(edit);
      } else
        t1 = true;
      if (t1) {
        t2.push(edit);
        ++this.undoPosition;
      }
      $.page.updateUndoMenus$0();
    },
    undo$0: function() {
      var t1, t2;
      t1 = this.undoPosition;
      if (t1 < 0)
        return;
      t2 = this.edits;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      t2[t1].undo$0();
      --this.undoPosition;
      $.page.updateUndoMenus$0();
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
    },
    redo$0: function() {
      var t1, t2, t3;
      t1 = this.undoPosition;
      t2 = this.edits;
      t3 = t2.length;
      if (t1 >= t3 - 1)
        return;
      ++t1;
      if (t1 < 0)
        return H.ioore(t2, t1);
      t2[t1].doit$0();
      ++this.undoPosition;
      $.page.updateUndoMenus$0();
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
    },
    getUndoTitle$0: function() {
      var t1, t2, title;
      t1 = this.undoPosition;
      if (t1 >= 0) {
        t2 = this.edits;
        if (t1 >= t2.length)
          return H.ioore(t2, t1);
        title = J.get$title$x(t2[t1]);
      } else
        title = null;
      t1 = $.Strings_map;
      if (title == null)
        return t1.$index(0, "undo.undo");
      else
        return H.S(t1.$index(0, "undo.undo")) + " " + H.S(title);
    },
    getRedoTitle$0: function() {
      var t1, t2, t3, title;
      t1 = this.undoPosition;
      t2 = this.edits;
      t3 = t2.length;
      if (t1 < t3 - 1) {
        ++t1;
        if (t1 < 0)
          return H.ioore(t2, t1);
        title = J.get$title$x(t2[t1]);
      } else
        title = null;
      t1 = $.Strings_map;
      if (title == null)
        return t1.$index(0, "undo.redo");
      else
        return H.S(t1.$index(0, "undo.redo")) + " " + H.S(title);
    },
    insertNewString$2: function(s, shift) {
      var t1, selectionStart, selectionEnd, t2, item, newitem, t3, $parent, problem, selectionStart0, selectionEnd0, remove, edit;
      t1 = $.page._cursor;
      selectionStart = t1.selectionStart;
      selectionEnd = t1.selectionEnd;
      t1 = selectionStart._dn;
      if (!J.getInterceptor(t1).$isDNItem)
        t1 = t1.get$nextSibling() == null && !!J.getInterceptor(J.get$parent$x(selectionStart._dn)).$isDNItem;
      else
        t1 = true;
      if (t1) {
        t1 = selectionStart._dnOffset;
        t2 = selectionStart._dn.get$offsetLength();
        t1 = (t1 == null ? t2 == null : t1 === t2) && J.$eq(s, "\n") && shift !== true;
      } else
        t1 = false;
      if (t1) {
        item = selectionStart._dn;
        t1 = J.getInterceptor(item);
        item = !!t1.$isDNItem ? item : t1.get$parent(item);
        newitem = Z.NodeFactory_create(item.get$ref(), "element");
        t1 = $.doc;
        t2 = item.get$parent(item);
        t3 = item.parent.offsetOf$1(item);
        if (typeof t3 !== "number")
          return t3.$add();
        t1.insertNode$2(0, newitem, Z.Position$(t2, t3 + 1));
        t3 = $.page;
        t2 = Z.Position$(newitem, 0);
        t3._cursor.moveTo$1(0, t2);
        return;
      }
      if (J.trim$0$s(s) !== "") {
        $parent = selectionStart._dn;
        t1 = J.getInterceptor$x($parent);
        if (t1.get$nodeType($parent) === 3)
          $parent = t1.get$parent($parent);
        if (J.get$nodeType$x($parent) === 9)
          problem = true;
        else
          problem = $parent.get$ref() != null && !$.doc.cfg.canContainText$1($parent.ref) && true;
      } else
        problem = false;
      if (problem) {
        window.alert($.Strings_map.$index(0, "insert.text_not_allowed"));
        return;
      }
      if (!J.$eq(selectionStart, selectionEnd)) {
        selectionStart0 = new Z.Position(null, null);
        selectionStart0._dn = selectionStart._dn;
        selectionStart0._dnOffset = selectionStart._dnOffset;
        selectionEnd0 = new Z.Position(null, null);
        selectionEnd0._dn = selectionEnd._dn;
        selectionEnd0._dnOffset = selectionEnd._dnOffset;
        $.page._cursor.deSelect$0();
        this.doNewEdit$1(this.removeBetweenEdit$2(selectionStart0, selectionEnd0));
        selectionStart = J.get$parent$x(selectionStart0._dn) == null ? $.page._cursor.selectionStart : selectionStart0;
        remove = true;
      } else
        remove = false;
      $.doc.insertString$2(selectionStart, s);
      if (remove) {
        edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.insert_text"));
        t1 = this.edits;
        t2 = t1.length;
        t3 = t2 - 2;
        if (t3 < 0 || t3 >= t2)
          H.throwExpression(P.RangeError$value(t3));
        C.JSArray_methods.checkGrowable$1(t1, "removeAt");
        t2 = t1.splice(t3, 1)[0];
        edit.subEdits.push(t2);
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = t1.pop();
        edit.subEdits.push(t2);
        t1.push(edit);
        --this.undoPosition;
      }
    },
    insertNewNode$2: function(ref, nodeType) {
      var pos, dn, t1;
      pos = $.page._cursor.selectionStart;
      if (pos == null)
        return;
      dn = Z.NodeFactory_create(ref, nodeType);
      t1 = J.getInterceptor(nodeType);
      if (t1.$eq(nodeType, "element") && this.getRootElement$0() == null)
        this.cfg.addNamespaceAttributes$1(dn);
      if (t1.$eq(nodeType, "element") && $.doc.cfg._schema.elementAttributes$1(ref).length > 0)
        dn.attributeDialogOnInsert$1(new Z.DaxeDocument_insertNewNode_closure(this, pos, dn));
      else
        this.insert2$2(dn, pos);
    },
    insert2$2: function(dn, pos) {
      var t1, $content, selectionStart, selectionEnd, t2, prev, cursorPos, edit, t3;
      t1 = $.page._cursor;
      if (!J.$eq(t1.selectionStart, t1.selectionEnd)) {
        $content = $.page._cursor.copy$0();
        t1 = $.page._cursor;
        selectionStart = t1.selectionStart;
        selectionEnd = t1.selectionEnd;
        t1.deSelect$0();
        t1 = pos._dn;
        if (!J.getInterceptor(t1).$isDNText) {
          t2 = pos._dnOffset;
          if (typeof t2 !== "number")
            return t2.$gt();
          t1 = t2 > 0 && !!J.getInterceptor(t1.childAtOffset$1(t2 - 1)).$isDNText;
        } else
          t1 = false;
        if (t1) {
          t1 = pos._dn;
          t2 = pos._dnOffset;
          if (typeof t2 !== "number")
            return t2.$sub();
          prev = t1.childAtOffset$1(t2 - 1);
          pos = Z.Position$(prev, prev.get$offsetLength());
        }
        this.doNewEdit$1(this.removeBetweenEdit$2(selectionStart, selectionEnd));
        if (J.get$parent$x(pos._dn) == null)
          pos = $.page._cursor.selectionStart;
      } else
        $content = null;
      this.insertNode$2(0, dn, pos);
      cursorPos = dn.firstCursorPositionInside$0();
      if (cursorPos != null)
        $.page._cursor.moveTo$1(0, cursorPos);
      t1 = $.page;
      t1._insertP.update$1(t1._cursor.selectionStart);
      t1.updateMenus$0();
      t1.updatePath$0();
      if ($content != null) {
        t1 = this.edits;
        if (!$.page._cursor.paste$1($content)) {
          this.undo$0();
          this.undo$0();
          t2 = t1.length;
          C.JSArray_methods.removeRange$2(t1, t2 - 2, t2);
          $.page.updateUndoMenus$0();
        } else {
          edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.insert_element"));
          t2 = t1.length;
          t3 = t2 - 3;
          if (t3 < 0)
            return H.ioore(t1, t3);
          t3 = t1[t3];
          edit.subEdits.push(t3);
          t3 = t1.length;
          t2 = t3 - 2;
          if (t2 < 0)
            return H.ioore(t1, t2);
          t2 = t1[t2];
          edit.subEdits.push(t2);
          t2 = C.JSArray_methods.get$last(t1);
          edit.subEdits.push(t2);
          t2 = t1.length;
          C.JSArray_methods.removeRange$2(t1, t2 - 3, t2);
          t1.push(edit);
          this.undoPosition -= 2;
          $.page.updateUndoMenus$0();
        }
      }
    },
    elementsAllowedUnder$1: function(dn) {
      var refs, $parent, t1, t2;
      if (J.get$nodeType$x(dn) === 9)
        refs = $.doc.cfg.rootElements$0();
      else if (dn.get$ref() == null)
        refs = H.setRuntimeTypeInfo([], [Z.Element]);
      else {
        $parent = dn.nodeType === 3 ? dn.parent : dn;
        t1 = this.cfg;
        t2 = $parent.get$ref();
        refs = t1._schema.subElements$1(t2);
      }
      return refs;
    },
    validElementsInSelection$1: function(allowed) {
      var list, t1, selectionStart, selectionEnd, startParent, startOffset, endParent, endOffset, ref;
      list = H.setRuntimeTypeInfo([], [Z.Element]);
      t1 = $.page._cursor;
      selectionStart = t1.selectionStart;
      selectionEnd = t1.selectionEnd;
      startParent = selectionStart._dn;
      startOffset = selectionStart._dnOffset;
      endParent = selectionEnd._dn;
      endOffset = selectionEnd._dnOffset;
      t1 = J.getInterceptor$x(startParent);
      if (t1.get$nodeType(startParent) === 3) {
        startOffset = t1.get$parent(startParent).offsetOf$1(startParent);
        startParent = t1.get$parent(startParent);
      }
      t1 = J.getInterceptor$x(endParent);
      if (t1.get$nodeType(endParent) === 3) {
        endOffset = t1.get$parent(endParent).offsetOf$1(endParent);
        endParent = t1.get$parent(endParent);
      }
      if (!J.$eq(startParent, endParent))
        return list;
      for (t1 = new H.ListIterator(allowed, allowed.length, 0, null); t1.moveNext$0();) {
        ref = t1._current;
        if ($.doc.cfg.insertIsPossible$4(startParent, startOffset, endOffset, ref))
          list.push(ref);
      }
      return list;
    },
    findPosition$2: function(x, y) {
      return this.dndoc.findPosition$2(x, y);
    }
  },
  DaxeDocument_openDocument_closure: {
    "^": "Closure:12;this_0,filePath_1,completer_2",
    call$1: function(_) {
      var t1, t2, t3;
      t1 = this.this_0;
      t2 = this.filePath_1;
      t1.filePath = t2;
      t3 = this.completer_2;
      new Z.DOMParser().parseFromURL$1(t2).then$2$onError(new Z.DaxeDocument_openDocument__closure(t1, t3), new Z.DaxeDocument_openDocument__closure0(t1, t2, t3));
    },
    $isFunction: true
  },
  DaxeDocument_openDocument__closure: {
    "^": "Closure:30;this_3,completer_4",
    call$1: function(xmldoc) {
      this.this_3.dndoc = Z.NodeFactory_createFromNode(xmldoc, null);
      this.completer_4.complete$0(0);
    },
    $isFunction: true
  },
  DaxeDocument_openDocument__closure0: {
    "^": "Closure:32;this_5,filePath_6,completer_7",
    call$1: function(ex) {
      var t1, roots, t2, root;
      if (J.get$errorCode$x(ex) === 404) {
        t1 = this.this_5;
        t1.dndoc = S.DNDocument$();
        roots = t1.cfg.rootElements$0();
        t2 = roots.length;
        if (t2 === 1) {
          if (0 >= t2)
            return H.ioore(roots, 0);
          root = Z.NodeFactory_create(roots[0], "element");
          t1.cfg.addNamespaceAttributes$1(root);
          t1.dndoc.appendChild$1(root);
          root.updateValidity$0();
        }
        this.completer_7.complete$0(0);
      } else
        this.completer_7.completeError$1(new Z.DaxeException("Opening " + H.S(this.filePath_6) + ": " + H.S(ex), null));
    },
    $isFunction: true
  },
  DaxeDocument_openDocument_closure0: {
    "^": "Closure:35;configPath_8,completer_9",
    call$1: function(ex) {
      this.completer_9.completeError$1(new Z.DaxeException("Reading config " + H.S(this.configPath_8) + ": " + H.S(ex), null));
    },
    $isFunction: true
  },
  DaxeDocument_openDocumentFromPost_closure: {
    "^": "Closure:12;this_0,completer_1",
    call$1: function(_) {
      var t1 = this.this_0;
      t1.getXmlFromPost$0().then$1(new Z.DaxeDocument_openDocumentFromPost__closure(t1, this.completer_1));
    },
    $isFunction: true
  },
  DaxeDocument_openDocumentFromPost__closure: {
    "^": "Closure:12;this_2,completer_3",
    call$1: function(xmlString) {
      var t1, t2, roots, rootPos, root, t3;
      t1 = J.trim$0$s(xmlString) !== "" && true;
      t2 = this.this_2;
      if (t1) {
        t2.dndoc = Z.NodeFactory_createFromNode(new Z.DOMParser().parseFromString$1(xmlString), null);
        this.completer_3.complete$0(0);
      } else {
        t2.dndoc = S.DNDocument$();
        roots = t2.cfg.rootElements$0();
        t1 = t2.rootNum;
        rootPos = t1 != null ? H.Primitives_parseInt(t1, null, null) : 0;
        if (rootPos >>> 0 !== rootPos || rootPos >= roots.length)
          return H.ioore(roots, rootPos);
        root = Z.NodeFactory_create(roots[rootPos], "element");
        t2.cfg.addNamespaceAttributes$1(root);
        t1 = t2.cfg;
        if (0 >= roots.length)
          return H.ioore(roots, 0);
        t3 = roots[0];
        if (t1._schema.elementAttributes$1(t3).length > 0)
          root.attributeDialogOnInsert$0();
        t2.dndoc.appendChild$1(root);
        root.updateValidity$0();
        this.completer_3.complete$0(0);
      }
    },
    $isFunction: true
  },
  DaxeDocument_getXmlFromPost_closure: {
    "^": "Closure:12;box_0,completer_1",
    call$1: function($event) {
      var t1 = this.box_0;
      t1.xmlString_0 = J.get$data$x($event);
      t1.listenMessage_1.cancel$0();
      this.completer_1.complete$1(0, t1.xmlString_0);
    },
    $isFunction: true
  },
  DaxeDocument_saveOnWebJaxe_closure: {
    "^": "Closure:8;completer_0,request_1",
    call$1: function($event) {
      var response, errorMessage;
      response = this.request_1.responseText;
      if (J.getInterceptor$s(response).startsWith$1(response, "ok"))
        this.completer_0.complete$0(0);
      else {
        errorMessage = C.JSString_methods.startsWith$1(response, "erreur\n") ? C.JSString_methods.substring$1(response, 7) : response;
        this.completer_0.completeError$1(new Z.DaxeException(errorMessage, null));
      }
    },
    $isFunction: true
  },
  DaxeDocument_saveOnWebJaxe_closure0: {
    "^": "Closure:8;completer_2,request_3",
    call$1: function($event) {
      this.completer_2.completeError$1(new Z.DaxeException(J.toString$0(this.request_3.status), null));
    },
    $isFunction: true
  },
  DaxeDocument_insertNewNode_closure: {
    "^": "Closure:10;this_0,pos_1,dn_2",
    call$0: function() {
      return this.this_0.insert2$2(this.dn_2, this.pos_1);
    },
    $isFunction: true
  },
  DaxeException: {
    "^": "Object;message>,parentException",
    toString$0: function(_) {
      var s = this.message;
      if (s == null)
        s = "DaxeException";
      return s;
    },
    $isDaxeException: true,
    $isException: true,
    static: {DaxeException$: function(message, parentException) {
        return new Z.DaxeException(message, parentException);
      }}
  },
  DaxeNode: {
    "^": "Object;ref@,parent*,nodeType>,prefix@,localName>,nodeValue*,firstChild*,nextSibling@,attributes*,userCannotRemove@",
    attributes$0: function($receiver) {
      return this.attributes.call$0();
    },
    get$id: function(_) {
      return this._id;
    },
    getHTMLNode$0: function() {
      return document.getElementById(this._id);
    },
    getHTMLContentsNode$0: function() {
      var hn, t1;
      hn = document.getElementById(this._id);
      if (hn != null) {
        t1 = new W._ChildNodeListLazy(hn);
        if (!t1.get$isEmpty(t1)) {
          t1 = new W._ChildNodeListLazy(hn);
          t1 = !!J.getInterceptor(t1.get$first(t1)).$isElement0;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        t1 = new W._ChildNodeListLazy(hn);
        hn = t1.get$first(t1);
      }
      return hn;
    },
    get$nodeName: function(_) {
      var buff, t1;
      if (this.nodeType === 3)
        return "#text";
      buff = P.StringBuffer$("");
      t1 = this.prefix;
      if (t1 != null) {
        buff.write$1(t1);
        buff.write$1(":");
      }
      buff.write$1(this.localName);
      t1 = buff._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$namespaceURI: function() {
      return this._namespaceURI;
    },
    get$offsetLength: function() {
      var dn, n;
      if (this.nodeType === 3)
        return J.get$length$asx(this.nodeValue);
      for (dn = this.firstChild, n = 0; dn != null; dn = dn.get$nextSibling())
        ++n;
      return n;
    },
    get$childNodes: function(_) {
      var list, dn;
      list = [];
      list.$builtinTypeInfo = [Z.DaxeNode];
      for (dn = this.firstChild; dn != null; dn = dn.get$nextSibling())
        list.push(dn);
      return list;
    },
    get$previousSibling: function() {
      var t1, dn;
      t1 = this.parent;
      if (t1 == null)
        return;
      for (dn = J.get$firstChild$x(t1); dn != null; dn = dn.get$nextSibling())
        if (J.$eq(dn.get$nextSibling(), this))
          return dn;
      return;
    },
    get$lastChild: function(_) {
      var dn;
      for (dn = this.firstChild; dn != null; dn = dn.get$nextSibling())
        if (dn.get$nextSibling() == null)
          return dn;
      return;
    },
    childAtOffset$1: function(offset) {
      var dn, n;
      for (dn = this.firstChild, n = 0; dn != null; dn = dn.get$nextSibling()) {
        if (n === offset)
          return dn;
        ++n;
      }
      return;
    },
    nextNode$0: function(_) {
      var t1, p;
      t1 = this.firstChild;
      if (t1 != null)
        return t1;
      t1 = this.nextSibling;
      if (t1 != null)
        return t1;
      p = this.parent;
      for (; p != null;) {
        if (p.get$nextSibling() != null)
          return p.get$nextSibling();
        p = p.get$parent(p);
      }
      return;
    },
    previousNode$0: function(_) {
      var p;
      if (this.firstChild != null)
        return this.get$lastChild(this);
      if (this.get$previousSibling() != null)
        return this.get$previousSibling();
      p = this.parent;
      for (; p != null;) {
        if (p.get$previousSibling() != null)
          return p.get$previousSibling();
        p = p.get$parent(p);
      }
      return;
    },
    offsetOf$1: function(child) {
      var n, i;
      for (n = this.firstChild, i = 0; n != null; n = n.get$nextSibling()) {
        if (J.$eq(n, child))
          return i;
        ++i;
      }
    },
    getAttribute$1: function(_, $name) {
      var t1, att, t2;
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        att = t1._current;
        t2 = J.getInterceptor$x(att);
        if (J.$eq(t2.get$localName(att), $name))
          return t2.get$value(att);
      }
      return;
    },
    setAttribute$2: function(_, $name, value) {
      var t1, att, t2;
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        att = t1._current;
        t2 = J.getInterceptor$x(att);
        if (J.$eq(t2.get$localName(att), $name)) {
          t2.set$value(att, value);
          return;
        }
      }
      J.add$1$ax(this.attributes, Z.DaxeAttr$($name, value));
      return;
    },
    setAttributeNS$3: function(_, namespaceURI, qualifiedName, value) {
      var ind, attPrefix, attLocalName, att;
      ind = C.JSString_methods.indexOf$1(qualifiedName, ":");
      if (ind !== -1) {
        attPrefix = C.JSString_methods.substring$2(qualifiedName, 0, ind);
        attLocalName = C.JSString_methods.substring$1(qualifiedName, ind + 1);
      } else {
        attLocalName = qualifiedName;
        attPrefix = null;
      }
      att = this.getAttributeNodeNS$2(namespaceURI, attLocalName);
      if (att != null) {
        att.set$prefix(attPrefix);
        att.set$value(0, value);
        return;
      }
      att = Z.DaxeAttr$NS(namespaceURI, qualifiedName, value);
      J.add$1$ax(this.attributes, att);
    },
    getAttributeNodeNS$2: function(namespaceURI, localName) {
      var t1, att;
      t1 = this.attributes;
      if (t1 == null)
        return;
      for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();) {
        att = t1._current;
        if (J.$eq(att.get$namespaceURI(), namespaceURI) && J.$eq(att.get$localName(att), localName))
          return att;
      }
      return;
    },
    getAttributesMapCopy$0: function() {
      var map, t1, attr, t2, t3, t4;
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Z.DaxeAttr);
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        attr = t1._current;
        t2 = J.getInterceptor$x(attr);
        t3 = t2.get$name(attr);
        t4 = new Z.DaxeAttr(null, null, null, null);
        t4.namespaceURI = attr.get$namespaceURI();
        t4.prefix = attr.get$prefix();
        t4.localName = t2.get$localName(attr);
        t4.value = t2.get$value(attr);
        map.$indexSet(0, t3, t4);
      }
      return map;
    },
    updateHTML$0: function() {
      var vel = document.getElementById(this._id);
      if (vel == null)
        return;
      J.replaceWith$1$x(vel, this.html$0(0));
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      var children, t1, child, hn, t2, next, nextHn, prev, prevHn, t3;
      children = this.get$childNodes(this);
      for (t1 = new H.ListIterator(changed, changed.length, 0, null); t1.moveNext$0();) {
        child = t1._current;
        hn = child.getHTMLNode$0();
        if (!C.JSArray_methods.contains$1(children, child))
          if (hn != null) {
            t2 = hn.parentNode;
            if (t2 != null)
              t2.removeChild(hn);
          } else {
            this.updateHTML$0();
            return;
          }
        else if (hn == null) {
          next = child.get$nextSibling();
          nextHn = null;
          while (true) {
            t2 = nextHn == null;
            if (!(t2 && next != null))
              break;
            nextHn = next.getHTMLNode$0();
            if (nextHn == null)
              next = next.get$nextSibling();
          }
          prev = child.get$previousSibling();
          prevHn = null;
          while (true) {
            t3 = prevHn == null;
            if (!(t3 && prev != null))
              break;
            prevHn = prev.getHTMLNode$0();
            if (prevHn == null)
              prev = prev.get$previousSibling();
          }
          if (!t2)
            nextHn.parentElement.insertBefore(child.html$0(0), nextHn);
          else if (!t3) {
            t2 = prevHn.nextSibling;
            t3 = prevHn.parentElement;
            if (t2 != null)
              t3.insertBefore(child.html$0(0), prevHn.nextSibling);
            else
              t3.appendChild(child.html$0(0));
          } else {
            this.updateHTML$0();
            return;
          }
        } else
          child.updateHTML$0();
      }
    },
    updateAttributes$0: function() {
      this.updateHTML$0();
    },
    setSelected$1: function(select) {
      var t1 = this._id;
      if (select)
        J.get$classes$x(document.getElementById(t1)).add$1(0, "selected");
      else
        J.get$classes$x(document.getElementById(t1)).remove$1(0, "selected");
    },
    appendChild$1: function(dn) {
      var last = this.get$lastChild(this);
      if (last != null)
        last.set$nextSibling(dn);
      else
        this.firstChild = dn;
      J.set$parent$x(dn, this);
    },
    insertBefore$2: function(_, newdn, beforedn) {
      var dn, save;
      J.set$parent$x(newdn, this);
      dn = this.firstChild;
      if (J.$eq(dn, beforedn)) {
        save = this.firstChild;
        this.firstChild = newdn;
        newdn.set$nextSibling(save);
      } else {
        while (true) {
          if (!(dn != null && !J.$eq(dn.get$nextSibling(), beforedn)))
            break;
          dn = dn.get$nextSibling();
        }
        save = dn.get$nextSibling();
        dn.set$nextSibling(newdn);
        newdn.set$nextSibling(save);
      }
    },
    insertAfter$2: function(newdn, afterdn) {
      var last;
      if (afterdn.get$nextSibling() == null) {
        last = this.get$lastChild(this);
        if (last != null)
          last.set$nextSibling(newdn);
        else
          this.firstChild = newdn;
        J.set$parent$x(newdn, this);
      } else
        this.insertBefore$2(0, newdn, afterdn.get$nextSibling());
    },
    removeChild$1: function(dn) {
      if (dn.get$previousSibling() != null)
        dn.get$previousSibling().set$nextSibling(dn.get$nextSibling());
      if (dn === this.firstChild)
        this.firstChild = dn.get$nextSibling();
      dn.set$parent(0, null);
      dn.nextSibling = null;
    },
    replaceWith$1: function(_, dn) {
      if (J.$eq(J.get$firstChild$x(this.parent), this))
        J.set$firstChild$x(this.parent, dn);
      else
        this.get$previousSibling().set$nextSibling(dn);
      J.set$parent$x(dn, this.parent);
      dn.set$nextSibling(this.nextSibling);
      this.parent = null;
      this.nextSibling = null;
    },
    normalize$0: function() {
      var dn, t1;
      for (dn = this.firstChild; dn != null; dn = dn.get$nextSibling()) {
        t1 = J.getInterceptor$x(dn);
        while (true) {
          if (!(t1.get$nodeType(dn) === 3 && dn.get$nextSibling() != null && J.get$nodeType$x(dn.get$nextSibling()) === 3))
            break;
          t1.set$nodeValue(dn, H.S(t1.get$nodeValue(dn)) + H.S(J.get$nodeValue$x(dn.get$nextSibling())));
          this.removeChild$1(dn.get$nextSibling());
        }
      }
    },
    remove$2: function(_, pos, $length) {
      var i, v, s1, t1;
      if (this.nodeType === 1) {
        i = pos._dnOffset;
        while (true) {
          if (typeof i !== "number")
            return i.$lt();
          if (typeof $length !== "number")
            return H.iae($length);
          if (!(i < $length))
            break;
          this.removeChild$1(this.childAtOffset$1(pos._dnOffset));
          ++i;
        }
      } else {
        v = this.nodeValue;
        s1 = J.getInterceptor$s(v).substring$2(v, 0, pos._dnOffset);
        t1 = pos._dnOffset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof $length !== "number")
          return H.iae($length);
        this.nodeValue = s1 + C.JSString_methods.substring$1(v, t1 + $length);
      }
    },
    newlineAfter$0: function() {
      return false;
    },
    newlineInside$0: function() {
      return false;
    },
    fixLineBreaks$0: function() {
      var t1, s, t2, lastNotText, dn;
      if (this.newlineInside$0()) {
        t1 = this.firstChild;
        t1 = t1 != null && !!J.getInterceptor(t1).$isDNText;
      } else
        t1 = false;
      if (t1) {
        s = J.get$nodeValue$x(this.firstChild);
        if (J.getInterceptor$s(s).startsWith$1(s, "\n")) {
          t1 = s.length;
          t2 = this.firstChild;
          if (t1 === 1)
            this.removeChild$1(t2);
          else
            J.set$nodeValue$x(t2, C.JSString_methods.substring$1(s, 1));
        }
      }
      lastNotText = this.get$lastChild(this);
      while (true) {
        t1 = lastNotText != null;
        if (!(t1 && !!lastNotText.$isDNText))
          break;
        lastNotText = lastNotText.get$previousSibling();
      }
      if (this.newlineInside$0())
        if (!!J.getInterceptor(this.get$lastChild(this)).$isDNText)
          t1 = !t1 || !lastNotText.newlineAfter$0();
        else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        t1 = this.get$lastChild(this);
        s = t1.get$nodeValue(t1);
        if (J.getInterceptor$s(s).endsWith$1(s, "\n")) {
          t1 = s.length;
          if (t1 === 1)
            this.removeChild$1(this.get$lastChild(this));
          else
            this.get$lastChild(this).set$nodeValue(0, C.JSString_methods.substring$2(s, 0, t1 - 1));
        }
      }
      for (dn = this.firstChild; dn != null; dn = dn.nextSibling)
        if (dn.newlineAfter$0() && !!J.getInterceptor(dn.nextSibling).$isDNText) {
          s = J.get$nodeValue$x(dn.nextSibling);
          if (J.getInterceptor$s(s).startsWith$1(s, "\n")) {
            t1 = s.length;
            t2 = dn.nextSibling;
            if (t1 === 1)
              this.removeChild$1(t2);
            else
              J.set$nodeValue$x(t2, C.JSString_methods.substring$1(s, 1));
          }
        }
    },
    toDOMNode$1: function(domDocument) {
      var el, t1, att, dn, lastNotText;
      el = Z.ElementImpl$NS(domDocument, this._namespaceURI, this.get$nodeName(this));
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        att = t1._current;
        el.setAttributeNS$3(0, att.get$namespaceURI(), att.get$name(att), att.get$value(att));
      }
      if (this.newlineInside$0() || this.firstChild != null) {
        if (this.newlineInside$0())
          el.appendChild$1(Z.TextImpl$(domDocument, "\n"));
        for (dn = this.firstChild; dn != null; dn = dn.nextSibling) {
          el.appendChild$1(dn.toDOMNode$1(domDocument));
          if (dn.newlineAfter$0())
            el.appendChild$1(Z.TextImpl$(domDocument, "\n"));
        }
        lastNotText = this.get$lastChild(this);
        while (true) {
          t1 = lastNotText != null;
          if (!(t1 && !!lastNotText.$isDNText))
            break;
          lastNotText = lastNotText.get$previousSibling();
        }
        if (this.newlineInside$0())
          if (this.get$lastChild(this) != null)
            t1 = !t1 || !lastNotText.newlineAfter$0();
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          el.appendChild$1(Z.TextImpl$(domDocument, "\n"));
      }
      return el;
    },
    toString$0: function(_) {
      return this.toDOMNode$1(Z.DocumentImpl$(new Z.DOMImplementationImpl(), null, null, null)).toString$0(0);
    },
    updateValidity$0: function() {
      this.valid = $.doc.cfg.elementIsValid$1(this);
      var hel = document.getElementById(this._id);
      if (hel == null)
        return;
      if (this.valid === true && J.get$classes$x(hel).readClasses$0().contains$1(0, "invalid"))
        J.get$classes$x(hel).remove$1(0, "invalid");
      else if (this.valid !== true && !J.get$classes$x(hel).readClasses$0().contains$1(0, "invalid"))
        J.get$classes$x(hel).add$1(0, "invalid");
    },
    attributeDialog$1: function(okfct) {
      Z.AttributeDialog$(this, okfct).show$0(0);
    },
    attributeDialog$0: function() {
      return this.attributeDialog$1(null);
    },
    attributeDialogOnInsert$1: function(okfct) {
      Z.AttributeDialog$(this, okfct).showOnInsert$0();
    },
    attributeDialogOnInsert$0: function() {
      return this.attributeDialogOnInsert$1(null);
    },
    findPosition$2: function(x, y) {
      var pos, t1, dn, hn, t2, result, t3, box, hnx1, hny1, t4, t5, lineHeight, hnx2, hny2, rects, span_test, pp, ht, range, i, r, t6, t7, s;
      pos = Z.Position$(this, 0);
      t1 = this.nodeType;
      if (t1 === 1 || t1 === 9)
        for (dn = this.firstChild; dn != null; dn = dn.get$nextSibling()) {
          hn = dn.getHTMLNode$0();
          if (hn == null)
            continue;
          t1 = J.getInterceptor(hn);
          t2 = !!t1.$isDivElement;
          if (t2) {
            result = hn.firstChild;
            if (result == null)
              H.throwExpression(P.StateError$("No elements"));
            if (!!J.getInterceptor(result).$isSpanElement) {
              result = hn.lastChild;
              if (result == null)
                H.throwExpression(P.StateError$("No elements"));
              t3 = !!J.getInterceptor(result).$isSpanElement;
            } else
              t3 = false;
          } else
            t3 = false;
          if (t3) {
            result = hn.firstChild;
            if (result == null)
              H.throwExpression(P.StateError$("No elements"));
            box = J.getBoundingClientRect$0$x(result);
            t2 = J.getInterceptor$x(box);
            hnx1 = t2.get$left(box);
            hny1 = t2.get$top(box);
            t2 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(result.offsetLeft));
            t3 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(result.offsetTop));
            t4 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(result.offsetWidth));
            t5 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(result.offsetHeight));
            if (t4 < 0)
              t4 = -t4 * 0;
            lineHeight = t5 < 0 ? -t5 * 0 : t5;
            new P.Rectangle(t2, t3, t4, lineHeight).$builtinTypeInfo = [null];
            result = hn.lastChild;
            if (result == null)
              H.throwExpression(P.StateError$("No elements"));
            box = J.getBoundingClientRect$0$x(result);
            t2 = J.getInterceptor$x(box);
            hnx2 = t2.get$right(box);
            hny2 = t2.get$bottom(box);
          } else if (t2 || !!t1.$isTableCellElement || !!t1.$isTableRowElement || !!t1.$isTableElement || !!t1.$isImageElement || t1.get$classes(hn).readClasses$0().contains$1(0, "form")) {
            box = hn.getBoundingClientRect();
            t2 = J.getInterceptor$x(box);
            hnx1 = t2.get$left(box);
            hny1 = t2.get$top(box);
            hnx2 = t2.get$right(box);
            hny2 = t2.get$bottom(box);
            lineHeight = t2.get$height(box);
          } else {
            if (!!t1.$isSpanElement)
              if (hn.childNodes.length === 1) {
                result = hn.firstChild;
                if (result == null)
                  H.throwExpression(P.StateError$("No elements"));
                if (!!J.getInterceptor(result).$isText) {
                  result = hn.firstChild;
                  if (result == null)
                    H.throwExpression(P.StateError$("No elements"));
                  t2 = !J.endsWith$1$s(result.nodeValue, "\n");
                } else
                  t2 = false;
              } else
                t2 = false;
            else
              t2 = false;
            if (t2) {
              rects = hn.getClientRects();
              if (rects.length === 0)
                return;
              box = C._ClientRectList_methods.get$first(rects);
              t2 = J.getInterceptor$x(box);
              hnx1 = t2.get$left(box);
              hny1 = t2.get$top(box);
              box = C._ClientRectList_methods.get$last(rects);
              t2 = J.getInterceptor$x(box);
              hnx2 = t2.get$right(box);
              hny2 = t2.get$bottom(box);
              lineHeight = t2.get$height(box);
            } else {
              result = hn.firstChild;
              if (result == null)
                H.throwExpression(P.StateError$("No elements"));
              if (!!J.getInterceptor(result).$isElement0) {
                result = hn.lastChild;
                if (result == null)
                  H.throwExpression(P.StateError$("No elements"));
                if (!!J.getInterceptor(result).$isSpanElement) {
                  result = hn.lastChild;
                  if (result == null)
                    H.throwExpression(P.StateError$("No elements"));
                  result = result.lastChild;
                  if (result == null)
                    H.throwExpression(P.StateError$("No elements"));
                  if (!!J.getInterceptor(result).$isText) {
                    result = hn.lastChild;
                    if (result == null)
                      H.throwExpression(P.StateError$("No elements"));
                    result = result.lastChild;
                    if (result == null)
                      H.throwExpression(P.StateError$("No elements"));
                    t2 = !J.endsWith$1$s(result.nodeValue, "\n");
                  } else
                    t2 = false;
                } else
                  t2 = false;
              } else
                t2 = false;
              if (t2) {
                result = hn.firstChild;
                if (result == null)
                  H.throwExpression(P.StateError$("No elements"));
                rects = J.getClientRects$0$x(result);
                if (rects.length === 0)
                  return;
                box = C._ClientRectList_methods.get$first(rects);
                t2 = J.getInterceptor$x(box);
                hnx1 = t2.get$left(box);
                hny1 = t2.get$top(box);
                result = hn.lastChild;
                if (result == null)
                  H.throwExpression(P.StateError$("No elements"));
                rects = J.getClientRects$0$x(result);
                if (rects.length === 0)
                  return;
                box = C._ClientRectList_methods.get$last(rects);
                t2 = J.getInterceptor$x(box);
                hnx2 = t2.get$right(box);
                hny2 = t2.get$bottom(box);
                lineHeight = t2.get$height(box);
              } else {
                span_test = W._ElementFactoryProvider_createElement_tag("span", null);
                t2 = J.getInterceptor$x(span_test);
                t2.append$1(span_test, document.createTextNode("|"));
                t3 = new W._ChildNodeListLazy(hn);
                if (t3.get$isEmpty(t3))
                  hn.appendChild(span_test);
                else {
                  result = hn.firstChild;
                  if (result == null)
                    H.throwExpression(P.StateError$("No elements"));
                  hn.insertBefore(span_test, result);
                }
                box = t2.getBoundingClientRect$0(span_test);
                t2 = J.getInterceptor$x(box);
                hnx1 = t2.get$left(box);
                hny1 = t2.get$top(box);
                t2 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(span_test.offsetLeft));
                t3 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(span_test.offsetTop));
                t4 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(span_test.offsetWidth));
                t5 = C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(span_test.offsetHeight));
                if (t4 < 0)
                  t4 = -t4 * 0;
                lineHeight = t5 < 0 ? -t5 * 0 : t5;
                new P.Rectangle(t2, t3, t4, lineHeight).$builtinTypeInfo = [null];
                t2 = span_test.parentNode;
                if (t2 != null)
                  t2.removeChild(span_test);
                hn.appendChild(span_test);
                box = span_test.getBoundingClientRect();
                t2 = J.getInterceptor$x(box);
                hnx2 = t2.get$left(box);
                hny2 = t2.get$bottom(box);
                t2 = span_test.parentNode;
                if (t2 != null)
                  t2.removeChild(span_test);
              }
            }
          }
          if (typeof hny1 !== "number")
            return hny1.$add();
          if (typeof lineHeight !== "number")
            return H.iae(lineHeight);
          if (typeof y !== "number")
            return y.$lt();
          if (y < hny1 + lineHeight)
            if (!(y < hny1)) {
              if (typeof x !== "number")
                return x.$lt();
              if (typeof hnx1 !== "number")
                return H.iae(hnx1);
              t2 = x < hnx1 && !t1.$isLIElement;
            } else
              t2 = true;
          else
            t2 = false;
          if (t2)
            return pos;
          if (typeof hny2 !== "number")
            return hny2.$sub();
          if (y > hny2 - lineHeight)
            if (!(y > hny2)) {
              if (typeof x !== "number")
                return x.$gt();
              if (typeof hnx2 !== "number")
                return H.iae(hnx2);
              t1 = x > hnx2 && !t1.$isLIElement;
            } else
              t1 = true;
          else
            t1 = false;
          if (t1) {
            t1 = this.offsetOf$1(dn);
            if (typeof t1 !== "number")
              return t1.$add();
            pos = new Z.Position(null, null);
            pos._dn = this;
            pos._dnOffset = t1 + 1;
          } else
            return dn.findPosition$2(x, y);
        }
      else if (t1 === 3)
        for (t1 = C.NodeList_methods.get$iterator(document.getElementById(this._id).childNodes), pp = 0; t1.moveNext$0();) {
          hn = t1._html$_current;
          t2 = J.getInterceptor(hn);
          if (!!t2.$isText)
            ht = hn;
          else {
            if (!!t2.$isElement0) {
              result = hn.firstChild;
              if (result == null)
                H.throwExpression(P.StateError$("No elements"));
            } else
              continue;
            ht = result;
          }
          range = document.createRange();
          t2 = J.getInterceptor$asx(ht);
          i = 0;
          while (true) {
            t3 = t2.get$length(ht);
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (!(i < t3))
              break;
            t3 = pp + i;
            t4 = i + 1;
            if (!J.$eq(J.$index$asx(this.nodeValue, t3), "\n")) {
              range.setStart(ht, i);
              range.setEnd(ht, t4);
              for (t4 = C._ClientRectList_methods.get$iterator(range.getClientRects()); t4.moveNext$0();) {
                r = t4._html$_current;
                t5 = J.get$length$asx(this.nodeValue);
                if (typeof t5 !== "number")
                  return t5.$sub();
                if (i < t5 - 1) {
                  t5 = J.getInterceptor$x(r);
                  t6 = t5.get$left(r);
                  t7 = t5.get$right(r);
                  if (t6 == null ? t7 == null : t6 === t7) {
                    t6 = t5.get$left(r);
                    if (typeof x !== "number")
                      return x.$lt();
                    if (typeof t6 !== "number")
                      return H.iae(t6);
                    if (x < t6) {
                      t5 = t5.get$bottom(r);
                      if (typeof y !== "number")
                        return y.$lt();
                      if (typeof t5 !== "number")
                        return H.iae(t5);
                      t5 = y < t5;
                    } else
                      t5 = false;
                  } else
                    t5 = false;
                } else
                  t5 = false;
                if (t5) {
                  t1 = new Z.Position(null, null);
                  t1._dn = this;
                  t1._dnOffset = t3 + 1;
                  return t1;
                }
                t5 = J.getInterceptor$x(r);
                t6 = t5.get$right(r);
                if (typeof x !== "number")
                  return x.$lt();
                if (typeof t6 !== "number")
                  return H.iae(t6);
                if (x < t6) {
                  t6 = t5.get$bottom(r);
                  if (typeof y !== "number")
                    return y.$le();
                  if (typeof t6 !== "number")
                    return H.iae(t6);
                  t6 = y <= t6;
                } else
                  t6 = false;
                if (t6) {
                  t1 = t5.get$left(r);
                  t5 = t5.get$right(r);
                  if (typeof t1 !== "number")
                    return t1.$add();
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  if (x < (t1 + t5) / 2) {
                    t1 = new Z.Position(null, null);
                    t1._dn = this;
                    t1._dnOffset = t3;
                    return t1;
                  } else {
                    t1 = new Z.Position(null, null);
                    t1._dn = this;
                    t1._dnOffset = t3 + 1;
                    return t1;
                  }
                } else {
                  t5 = t5.get$top(r);
                  if (typeof t5 !== "number")
                    return t5.$sub();
                  if (typeof y !== "number")
                    return y.$lt();
                  if (y < t5 - 5)
                    if (t3 === 0 || J.$eq(J.$index$asx(this.nodeValue, t3), " ")) {
                      t1 = new Z.Position(null, null);
                      t1._dn = this;
                      t1._dnOffset = t3;
                      return t1;
                    } else {
                      t1 = new Z.Position(null, null);
                      t1._dn = this;
                      t1._dnOffset = t3 - 1;
                      return t1;
                    }
                }
              }
            } else {
              s = ht.textContent;
              ht.textContent = J.getInterceptor$s(s).substring$2(s, 0, i) + "|" + C.JSString_methods.substring$1(s, i);
              range.setStart(ht, i);
              range.setEnd(ht, t4);
              rects = range.getClientRects();
              ht.textContent = s;
              for (t4 = C._ClientRectList_methods.get$iterator(rects); t4.moveNext$0();) {
                r = t4._html$_current;
                t5 = J.getInterceptor$x(r);
                t6 = t5.get$left(r);
                if (typeof x !== "number")
                  return x.$gt();
                if (typeof t6 !== "number")
                  return H.iae(t6);
                if (x > t6) {
                  t5 = t5.get$bottom(r);
                  if (typeof y !== "number")
                    return y.$le();
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t5 = y <= t5;
                } else
                  t5 = false;
                if (t5) {
                  t1 = new Z.Position(null, null);
                  t1._dn = this;
                  t1._dnOffset = t3;
                  return t1;
                }
              }
            }
            ++i;
          }
          t2 = t2.get$length(ht);
          if (typeof t2 !== "number")
            return H.iae(t2);
          pp += t2;
        }
      return Z.Position$(this, this.get$offsetLength());
    },
    firstCursorPositionInside$0: function() {
      return Z.Position$(this, 0);
    },
    lastCursorPositionInside$0: function() {
      return Z.Position$(this, this.get$offsetLength());
    },
    setStyle$1: function(hn) {
      var styleParam, styleList, t1, style, t2, fontParam, sizeParam;
      styleParam = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "style", null);
      if (styleParam != null) {
        styleList = J.split$1$s(styleParam, ";");
        for (t1 = new H.ListIterator(styleList, styleList.length, 0, null); t1.moveNext$0();) {
          style = t1._current;
          t2 = J.getInterceptor(style);
          if (t2.$eq(style, "GRAS"))
            J.set$fontWeight$x(hn.style, "bold");
          else if (t2.$eq(style, "ITALIQUE"))
            J.set$fontStyle$x(hn.style, "italic");
          else if (t2.$eq(style, "EXPOSANT")) {
            J.set$verticalAlign$x(hn.style, "super");
            J.set$fontSize$x(hn.style, "80%");
          } else if (t2.$eq(style, "INDICE")) {
            J.set$verticalAlign$x(hn.style, "sub");
            J.set$fontSize$x(hn.style, "80%");
          } else if (t2.$eq(style, "SOULIGNE"))
            J.set$textDecoration$x(hn.style, "underline");
          else if (t2.$eq(style, "BARRE"))
            J.set$textDecoration$x(hn.style, "line-through");
          else if (t2.startsWith$1(style, "FCOULEUR"))
            J.set$background$x(hn.style, this._getColor$1(style));
          else if (C.JSString_methods.startsWith$1(style, "PCOULEUR"))
            J.set$color$x(hn.style, this._getColor$1(style));
        }
      }
      fontParam = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "police", null);
      if (fontParam != null) {
        if (J.$eq(fontParam, "Monospaced"))
          fontParam = "monospace";
        J.set$fontFamily$x(hn.style, fontParam);
      }
      sizeParam = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "taille", null);
      if (sizeParam != null)
        J.set$fontSize$x(hn.style, sizeParam);
    },
    _getColor$1: function(style) {
      var matches, t1, m, color, j, j0, value;
      matches = C.JSString_methods.allMatches$1("^.*\\[(x[0-9a-fA-F]{2}|[0-9]{1,3}),(x[0-9a-fA-F]{2}|[0-9]{1,3}),(x[0-9a-fA-F]{2}|[0-9]{1,3})\\]$", style);
      t1 = new H.ListIterator(matches, matches.length, 0, null);
      if (t1.moveNext$0()) {
        m = t1._current;
        color = [];
        color.$builtinTypeInfo = [P.$int];
        for (j = 0; j < 3; j = j0) {
          j0 = j + 1;
          value = m.group$1(j0);
          if (J.getInterceptor$s(value).startsWith$1(value, "x")) {
            t1 = H.Primitives_parseInt(C.JSString_methods.substring$1(value, 1), 16, null);
            if (j >= 0)
              return H.ioore(color, j);
            color[j] = t1;
          } else {
            t1 = H.Primitives_parseInt(value, null, null);
            if (j >= 0)
              return H.ioore(color, j);
            color[j] = t1;
          }
        }
        if (0 >= 0)
          return H.ioore(color, 0);
        t1 = "rgb(" + H.S(color[0]) + ", ";
        return H.ioore(color, 1);
        t1 = t1 + H.S(color[1]) + ", ";
        return H.ioore(color, 2);
        return t1 + H.S(color[2]) + ")";
      }
      return;
    },
    copyAttrFromXml$1: function(elem) {
      var t1, t2, att, t3, dataString, attrname, attrval;
      for (t1 = J.get$iterator$ax(this.attributes), t2 = J.getInterceptor$x(elem); t1.moveNext$0();) {
        att = t1._current;
        t3 = J.getInterceptor$x(att);
        if (!J.startsWith$1$s(t3.get$localName(att), "data-"))
          if (J.$eq(t3.get$localName(att), "class"))
            t2.get$classes(elem).add$1(0, t3.get$value(att));
          else {
            elem.toString;
            elem.setAttribute(t3.get$localName(att), t3.get$value(att));
          }
        else if (J.startsWith$1$s(t3.get$localName(att), "data-toattr-")) {
          dataString = J.split$1$s(t3.get$localName(att), "-");
          if (2 >= dataString.length)
            return H.ioore(dataString, 2);
          attrname = dataString[2];
          attrval = t3.get$value(att);
          if (J.$eq(attrname, "class"))
            t2.get$classes(elem).add$1(0, t3.get$value(att));
          else
            elem.setAttribute(attrname, attrval);
        }
      }
    },
    DaxeNode$fromNode$3$createChildren: function(node, $parent, createChildren) {
      var t1, nm, t2, n, t3, t4, prev, dn;
      this._id = $.doc.newId$1(this);
      this.parent = $parent;
      t1 = J.getInterceptor$x(node);
      if (t1.get$nodeType(node) === 1 || t1.get$nodeType(node) === 3 || t1.get$nodeType(node) === 9)
        this.nodeType = t1.get$nodeType(node);
      else
        this.nodeType = 1;
      this._namespaceURI = node.get$namespaceURI();
      this.prefix = node.get$prefix();
      if (t1.get$nodeType(node) === 7)
        this.localName = t1.get$nodeName(node);
      else if (t1.get$nodeType(node) === 4)
        this.localName = "#cdata-section";
      else if (t1.get$nodeType(node) === 8)
        this.localName = "#comment";
      else if (t1.get$nodeType(node) === 9)
        this.localName = "#document";
      else
        this.localName = t1.get$localName(node);
      if (this.nodeType === 3)
        this.nodeValue = t1.get$nodeValue(node);
      this.attributes = H.setRuntimeTypeInfo([], [Z.DaxeAttr]);
      nm = t1.get$attributes(node);
      if (nm != null)
        for (t2 = J.get$iterator$ax(J.get$values$x(nm)); t2.moveNext$0();) {
          n = t2.get$current();
          t3 = this.attributes;
          t4 = new Z.DaxeAttr(null, null, null, null);
          t4.DaxeAttr$fromNode$1(n);
          J.add$1$ax(t3, t4);
        }
      if (!!t1.$isElement) {
        t2 = $.doc.cfg;
        t3 = $parent == null ? null : $parent.get$ref();
        this.ref = t2._schema.elementReference$2(node, t3);
      }
      if (createChildren)
        if (t1.get$childNodes(node) != null)
          for (t1 = t1.get$childNodes(node), t1 = new H.ListIterator(t1, t1.length, 0, null), prev = null; t1.moveNext$0(); prev = dn) {
            dn = Z.NodeFactory_createFromNode(t1._current, this);
            if (prev == null)
              this.firstChild = dn;
            else
              prev.set$nextSibling(dn);
          }
        else if ((t1.get$nodeType(node) === 4 || t1.get$nodeType(node) === 7 || t1.get$nodeType(node) === 8) && t1.get$nodeValue(node) != null && !J.$eq(t1.get$nodeValue(node), "")) {
          t2 = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
          t2.DaxeNode$text$1(t1.get$nodeValue(node));
          this.appendChild$1(t2);
        }
      if (this.nodeType === 1)
        this.valid = $.doc.cfg.elementIsValid$1(this);
      else
        this.valid = true;
    },
    DaxeNode$fromRef$1: function(elementRef) {
      var t1, t2;
      this.ref = elementRef;
      this._id = $.doc.newId$1(this);
      this.parent = null;
      this.nodeType = 1;
      t1 = $.doc.cfg;
      t2 = this.ref;
      this._namespaceURI = t1._schema.elementNamespace$1(t2);
      this.prefix = $.doc.cfg.elementPrefix$1(this.ref);
      t2 = $.doc.cfg;
      t1 = this.ref;
      this.localName = t2._elementsToNamesCache.$index(0, t1);
      this.nodeValue = null;
      this.firstChild = null;
      this.nextSibling = null;
      this.attributes = H.setRuntimeTypeInfo([], [Z.DaxeAttr]);
      this.valid = true;
    },
    DaxeNode$fromNodeType$1: function(nodeType) {
      this.ref = null;
      this._id = $.doc.newId$1(this);
      this.parent = null;
      this.nodeType = nodeType;
      this._namespaceURI = null;
      this.prefix = null;
      this.localName = null;
      this.nodeValue = null;
      this.firstChild = null;
      this.nextSibling = null;
      this.attributes = H.setRuntimeTypeInfo([], [Z.DaxeAttr]);
      this.valid = true;
    },
    DaxeNode$text$1: function(value) {
      this._id = $.doc.newId$1(this);
      this.parent = null;
      this.nodeType = 3;
      this._namespaceURI = null;
      this.prefix = null;
      this.localName = null;
      this.nodeValue = value;
      this.firstChild = null;
      this.nextSibling = null;
      this.attributes = null;
      this.valid = true;
    }
  },
  FindDialog: {
    "^": "Object;",
    show$0: function(_) {
      var div_find, form, table, tr, td, inputFind, t1, inputReplace, div_options, cbCaseSensitive, labelIgnoreCase, cbBackwards, labelBackwards, div_buttons, bClose, bReplace, bReplaceFind, bReplaceAll, bNext;
      if (document.getElementById("find_dlg") != null) {
        document.getElementById("find_dlg_find_field").focus();
        return;
      }
      J.set$bottom$x(document.querySelector("#doc1").style, "10.5em");
      div_find = document.createElement("div", null);
      div_find.id = "find_dlg";
      J.get$classes$x(div_find).add$1(0, "find");
      form = document.createElement("form", null);
      table = document.createElement("table", null);
      tr = document.createElement("tr", null);
      td = document.createElement("td", null);
      td.textContent = $.Strings_map.$index(0, "find.find");
      tr.appendChild(td);
      td = document.createElement("td", null);
      inputFind = W.InputElement_InputElement("text");
      inputFind.id = "find_dlg_find_field";
      t1 = J.getInterceptor$x(inputFind);
      t1.set$name(inputFind, "find");
      t1.set$size(inputFind, 40);
      t1.set$value(inputFind, $.FindDialog_findString);
      td.appendChild(inputFind);
      tr.appendChild(td);
      table.appendChild(tr);
      tr = document.createElement("tr", null);
      td = document.createElement("td", null);
      td.textContent = $.Strings_map.$index(0, "find.replace_by");
      tr.appendChild(td);
      td = document.createElement("td", null);
      inputReplace = W.InputElement_InputElement("text");
      inputReplace.id = "find_dlg_replace_field";
      t1 = J.getInterceptor$x(inputReplace);
      t1.set$name(inputReplace, "replace_by");
      t1.set$size(inputReplace, 40);
      td.appendChild(inputReplace);
      tr.appendChild(td);
      table.appendChild(tr);
      div_find.appendChild(table);
      div_options = document.createElement("div", null);
      J.get$classes$x(div_options).add$1(0, "options");
      cbCaseSensitive = W.InputElement_InputElement("checkbox");
      cbCaseSensitive.id = "find_cb_ignore_case";
      t1 = J.getInterceptor$x(cbCaseSensitive);
      t1.set$checked(cbCaseSensitive, $.FindDialog_caseSensitive);
      t1 = t1.get$onChange(cbCaseSensitive);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure(cbCaseSensitive)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_options.appendChild(cbCaseSensitive);
      labelIgnoreCase = document.createElement("label", null);
      J.set$htmlFor$x(labelIgnoreCase, "find_cb_ignore_case");
      labelIgnoreCase.textContent = $.Strings_map.$index(0, "find.case_sensitive");
      div_options.appendChild(labelIgnoreCase);
      cbBackwards = W.InputElement_InputElement("checkbox");
      cbBackwards.id = "find_cb_backwards";
      t1 = J.getInterceptor$x(cbBackwards);
      t1.set$checked(cbBackwards, $.FindDialog_backwards);
      t1 = t1.get$onChange(cbBackwards);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure0(cbBackwards)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_options.appendChild(cbBackwards);
      labelBackwards = document.createElement("label", null);
      J.set$htmlFor$x(labelBackwards, "find_cb_backwards");
      labelBackwards.textContent = $.Strings_map.$index(0, "find.backwards");
      div_options.appendChild(labelBackwards);
      form.appendChild(div_options);
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bClose = document.createElement("button", null);
      bClose.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "button.Close");
      bClose.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bClose);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bClose);
      bReplace = document.createElement("button", null);
      bReplace.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "find.replace");
      bReplace.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bReplace);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bReplace);
      bReplaceFind = document.createElement("button", null);
      bReplaceFind.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "find.replace_find");
      bReplaceFind.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bReplaceFind);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure3(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bReplaceFind);
      bReplaceAll = document.createElement("button", null);
      bReplaceAll.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "find.replace_all");
      bReplaceAll.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bReplaceAll);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure4(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bReplaceAll);
      bNext = document.createElement("button", null);
      bNext.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "find.next");
      bNext.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bNext);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.FindDialog_show_closure5(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bNext);
      form.appendChild(div_buttons);
      div_find.appendChild(form);
      document.body.appendChild(div_find);
      inputFind.focus();
    },
    next$0: [function() {
      var t1, t2, end, pos, start, t3, t4;
      t1 = J.get$value$x(H.interceptedTypeCast(document.getElementById("find_dlg_find_field"), "$isTextInputElement"));
      $.FindDialog_findString = t1;
      if (t1 === "")
        return;
      t1 = $.FindDialog_backwards;
      t2 = $.page;
      if (t1 !== true) {
        end = t2._cursor.selectionEnd;
        pos = this.nextAt$1(end == null ? Z.Position$($.doc.dndoc, 0) : end);
      } else {
        start = t2._cursor.selectionStart;
        if (start == null) {
          t1 = $.doc.dndoc;
          start = Z.Position$(t1, t1.get$offsetLength());
        }
        pos = this.previousAt$1(start);
      }
      if (pos != null) {
        $.page._cursor.moveTo$1(0, pos);
        t1 = $.page._cursor;
        t2 = pos._dn;
        t3 = pos._dnOffset;
        t4 = $.FindDialog_findString.length;
        if (typeof t3 !== "number")
          return t3.$add();
        t1.setSelection$2(pos, Z.Position$(t2, t3 + t4));
      }
    }, "call$0", "get$next", 0, 0, 2],
    nextAt$1: function(pos) {
      var $parent, offset, t1, t2, t3, index;
      $parent = pos._dn;
      offset = pos._dnOffset;
      if (!J.getInterceptor($parent).$isDNText) {
        $parent = $parent.childAtOffset$1(offset);
        offset = 0;
      }
      for (; $parent != null; offset = 0) {
        t1 = J.getInterceptor($parent);
        if (!!t1.$isDNText) {
          t2 = $.FindDialog_caseSensitive;
          t3 = $parent.nodeValue;
          if (t2 !== true) {
            t2 = J.toLowerCase$0$s(t3);
            t3 = $.FindDialog_findString;
            t3.toString;
            index = C.JSString_methods.indexOf$2(t2, t3.toLowerCase(), offset);
          } else
            index = J.indexOf$2$asx(t3, $.FindDialog_findString, offset);
          if (index !== -1) {
            t1 = new Z.Position(null, null);
            t1._dn = $parent;
            t1._dnOffset = index;
            return t1;
          }
        }
        $parent = t1.nextNode$0($parent);
      }
      return;
    },
    previousAt$1: function(pos) {
      var $parent, offset, p, t1, t2, t3, index;
      $parent = pos._dn;
      offset = pos._dnOffset;
      if (!J.getInterceptor($parent).$isDNText) {
        if (typeof offset !== "number")
          return offset.$gt();
        if (offset > 0)
          $parent = $parent.childAtOffset$1(offset - 1);
        else {
          p = $parent;
          while (true) {
            if (!(p != null)) {
              $parent = null;
              break;
            }
            if (p.get$previousSibling() != null) {
              $parent = p.get$previousSibling();
              break;
            }
            p = p.get$parent(p);
          }
        }
        if ($parent != null)
          offset = $parent.get$offsetLength();
      }
      for (; $parent != null;) {
        t1 = J.getInterceptor($parent);
        if (!!t1.$isDNText) {
          t2 = $.FindDialog_caseSensitive;
          t3 = $parent.nodeValue;
          if (t2 !== true) {
            t2 = C.JSString_methods.substring$2(J.toLowerCase$0$s(t3), 0, offset);
            t3 = $.FindDialog_findString;
            t3.toString;
            index = C.JSString_methods.lastIndexOf$1(t2, t3.toLowerCase());
          } else
            index = C.JSString_methods.lastIndexOf$1(J.substring$2$s(t3, 0, offset), $.FindDialog_findString);
          if (index !== -1) {
            t1 = new Z.Position(null, null);
            t1._dn = $parent;
            t1._dnOffset = index;
            return t1;
          }
        }
        $parent = t1.previousNode$0($parent);
        if ($parent != null)
          offset = $parent.get$offsetLength();
      }
      return;
    },
    replace$0: function(_) {
      var t1, t2, start, t3, end, replaceString, edit, t4;
      t1 = $.page._cursor;
      t2 = t1.selectionStart;
      start = new Z.Position(null, null);
      t3 = t2._dn;
      start._dn = t3;
      start._dnOffset = t2._dnOffset;
      t1 = t1.selectionEnd;
      end = new Z.Position(null, null);
      end._dn = t1._dn;
      end._dnOffset = t1._dnOffset;
      if (!J.getInterceptor(t3).$isDNText)
        return;
      replaceString = J.get$value$x(H.interceptedTypeCast(document.getElementById("find_dlg_replace_field"), "$isTextInputElement"));
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "find.replace"));
      if (replaceString !== "") {
        t1 = Z.UndoableEdit$insertString(end, replaceString, true);
        edit.subEdits.push(t1);
      }
      if (!start.$eq(0, end) && J.$eq(start._dn, end._dn)) {
        t1 = end._dnOffset;
        t2 = start._dnOffset;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = Z.UndoableEdit$removeString(start, t1 - t2, true);
        edit.subEdits.push(t2);
      }
      $.doc.doNewEdit$1(edit);
      t1 = $.page._cursor;
      t2 = start._dn;
      t3 = start._dnOffset;
      t4 = replaceString.length;
      if (typeof t3 !== "number")
        return t3.$add();
      t1.setSelection$2(start, Z.Position$(t2, t3 + t4));
    },
    replaceAll$0: function(_) {
      var t1, replaceString, pos, edit, t2, t3, t4, t5;
      t1 = J.get$value$x(H.interceptedTypeCast(document.getElementById("find_dlg_find_field"), "$isTextInputElement"));
      $.FindDialog_findString = t1;
      if (t1 === "")
        return;
      replaceString = J.get$value$x(H.interceptedTypeCast(document.getElementById("find_dlg_replace_field"), "$isTextInputElement"));
      t1 = $.doc.dndoc;
      pos = this.previousAt$1(Z.Position$(t1, t1.get$offsetLength()));
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "find.replace_all"));
      for (t1 = replaceString !== ""; pos != null;) {
        if (t1) {
          t2 = pos._dn;
          t3 = pos._dnOffset;
          t4 = $.FindDialog_findString.length;
          if (typeof t3 !== "number")
            return t3.$add();
          t5 = new Z.Position(null, null);
          t5._dn = t2;
          t5._dnOffset = t3 + t4;
          t5 = Z.UndoableEdit$insertString(t5, replaceString, true);
          edit.subEdits.push(t5);
        }
        t2 = Z.UndoableEdit$removeString(pos, $.FindDialog_findString.length, true);
        edit.subEdits.push(t2);
        pos = this.previousAt$1(pos);
      }
      $.doc.doNewEdit$1(edit);
    },
    static: {"^": "FindDialog_caseSensitive,FindDialog_backwards,FindDialog_findString"}
  },
  FindDialog_show_closure: {
    "^": "Closure:28;cbCaseSensitive_0",
    call$1: function($event) {
      var t1 = J.get$checked$x(this.cbCaseSensitive_0);
      $.FindDialog_caseSensitive = t1;
      return t1;
    },
    $isFunction: true
  },
  FindDialog_show_closure0: {
    "^": "Closure:28;cbBackwards_1",
    call$1: function($event) {
      var t1 = J.get$checked$x(this.cbBackwards_1);
      $.FindDialog_backwards = t1;
      return t1;
    },
    $isFunction: true
  },
  FindDialog_show_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      var t1;
      J.remove$0$ax(document.getElementById("find_dlg"));
      J.set$bottom$x(document.querySelector("#doc1").style, "1.5em");
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      return;
    },
    $isFunction: true
  },
  FindDialog_show_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.replace$0(0);
    },
    $isFunction: true
  },
  FindDialog_show_closure3: {
    "^": "Closure:29;this_4",
    call$1: function($event) {
      var t1 = this.this_4;
      t1.replace$0(0);
      t1.next$0();
      return;
    },
    $isFunction: true
  },
  FindDialog_show_closure4: {
    "^": "Closure:29;this_5",
    call$1: function($event) {
      return this.this_5.replaceAll$0(0);
    },
    $isFunction: true
  },
  FindDialog_show_closure5: {
    "^": "Closure:29;this_6",
    call$1: function($event) {
      return this.this_6.next$0();
    },
    $isFunction: true
  },
  HelpDialog: {
    "^": "Object;elementRef,attributeRef",
    show$0: function(_) {
      var div1, div2, div3, title, t1, t2, t3, documentation, regexp, divRegExp, titleParents, titleChildren, titleAttributes, divList, ul, div_buttons, bOk;
      div1 = document.createElement("div", null);
      div1.id = "dlg1";
      J.get$classes$x(div1).add$1(0, "dlg1");
      div2 = document.createElement("div", null);
      J.get$classes$x(div2).add$1(0, "dlg2");
      div3 = document.createElement("div", null);
      J.get$classes$x(div3).add$1(0, "dlg3");
      title = document.createElement("div", null);
      J.get$classes$x(title).add$1(0, "dlgtitle");
      t1 = this.attributeRef;
      t2 = $.doc;
      t3 = this.elementRef;
      if (t1 == null)
        title.textContent = t2.cfg.elementTitle$1(t3);
      else
        title.textContent = t2.cfg.attributeTitle$2(t3, t1);
      div3.appendChild(title);
      t1 = this.attributeRef;
      t2 = $.doc;
      t3 = this.elementRef;
      documentation = t1 == null ? t2.cfg.documentation$1(t3) : t2.cfg.attributeDocumentation$2(t3, t1);
      if (documentation != null)
        div3.appendChild(W.Element_Element$html("<p>" + H.S(Z.Config_formatDoc(documentation)) + "</p>", null, null));
      if (this.attributeRef == null) {
        t1 = $.doc.cfg;
        t2 = this.elementRef;
        regexp = t1._schema.regularExpression$3(t2, true, false);
        if (regexp != null) {
          divRegExp = document.createElement("div", null);
          J.get$classes$x(divRegExp).add$1(0, "help_regexp");
          divRegExp.textContent = regexp;
          div3.appendChild(divRegExp);
        }
        titleParents = document.createElement("span", null);
        titleParents.id = "help_parents";
        t1 = J.getInterceptor$x(titleParents);
        t1.get$classes(titleParents).add$1(0, "help_list_title");
        titleParents.textContent = $.Strings_map.$index(0, "help.parents");
        t1 = t1.get$onClick(titleParents);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.HelpDialog_show_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        div3.appendChild(titleParents);
        titleChildren = document.createElement("span", null);
        titleChildren.id = "help_children";
        t1 = J.getInterceptor$x(titleChildren);
        t1.get$classes(titleChildren).add$1(0, "help_list_title");
        titleChildren.textContent = $.Strings_map.$index(0, "help.children");
        t1 = t1.get$onClick(titleChildren);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.HelpDialog_show_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        div3.appendChild(titleChildren);
        titleAttributes = document.createElement("span", null);
        titleAttributes.id = "help_attributes";
        t1 = J.getInterceptor$x(titleAttributes);
        t1.get$classes(titleAttributes).add$1(0, "help_list_title");
        titleAttributes.textContent = $.Strings_map.$index(0, "help.attributes");
        t1 = t1.get$onClick(titleAttributes);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.HelpDialog_show_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        div3.appendChild(titleAttributes);
        divList = document.createElement("div", null);
        J.get$classes$x(divList).add$1(0, "help_list_div");
        ul = document.createElement("ul", null);
        ul.id = "help_list";
        divList.appendChild(ul);
        div3.appendChild(divList);
      }
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bOk = document.createElement("button", null);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.Close");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.HelpDialog_show_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bOk);
      div3.appendChild(div_buttons);
      div2.appendChild(div3);
      div1.appendChild(div2);
      document.body.appendChild(div1);
      if (this.attributeRef == null)
        this.fillChildren$0();
    },
    fillParents$0: function() {
      var ul, t1, t2, parents, parentRef, li, t3, t4, t5;
      J.get$classes$x(document.getElementById("help_parents")).add$1(0, "selected_tab");
      J.get$classes$x(document.getElementById("help_children")).remove$1(0, "selected_tab");
      J.get$classes$x(document.getElementById("help_attributes")).remove$1(0, "selected_tab");
      ul = document.getElementById("help_list");
      J._clearChildren$0$x(ul);
      t1 = $.doc.cfg;
      t2 = this.elementRef;
      parents = t1._schema.parentElements$1(t2);
      for (t1 = new H.ListIterator(parents, parents.length, 0, null); t1.moveNext$0();) {
        parentRef = t1._current;
        li = document.createElement("li", null);
        li.textContent = $.doc.cfg.elementTitle$1(parentRef);
        t2 = J.get$onClick$x(li);
        t3 = t2._eventType;
        t4 = t2._useCapture;
        t5 = new W._EventStreamSubscription(0, t2._target, t3, W._wrapZone(new Z.HelpDialog_fillParents_closure(this, parentRef)), t4);
        t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        t2 = t5._onData;
        if (t2 != null && t5._pauseCount <= 0)
          J.addEventListener$3$x(t5._target, t3, t2, t4);
        J.set$cursor$x(li.style, "default");
        ul.appendChild(li);
      }
    },
    fillChildren$0: function() {
      var ul, t1, t2, children, childRef, li, t3, t4, t5;
      J.get$classes$x(document.getElementById("help_parents")).remove$1(0, "selected_tab");
      J.get$classes$x(document.getElementById("help_children")).add$1(0, "selected_tab");
      J.get$classes$x(document.getElementById("help_attributes")).remove$1(0, "selected_tab");
      ul = document.getElementById("help_list");
      J._clearChildren$0$x(ul);
      t1 = $.doc.cfg;
      t2 = this.elementRef;
      children = t1._schema.subElements$1(t2);
      if (children == null)
        return;
      for (t1 = new H.ListIterator(children, children.length, 0, null); t1.moveNext$0();) {
        childRef = t1._current;
        li = document.createElement("li", null);
        li.textContent = $.doc.cfg.elementTitle$1(childRef);
        t2 = J.get$onClick$x(li);
        t3 = t2._eventType;
        t4 = t2._useCapture;
        t5 = new W._EventStreamSubscription(0, t2._target, t3, W._wrapZone(new Z.HelpDialog_fillChildren_closure(this, childRef)), t4);
        t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        t2 = t5._onData;
        if (t2 != null && t5._pauseCount <= 0)
          J.addEventListener$3$x(t5._target, t3, t2, t4);
        J.set$cursor$x(li.style, "default");
        ul.appendChild(li);
      }
    },
    fillAttributes$0: function() {
      var ul, t1, t2, attributes, attRef, li;
      J.get$classes$x(document.getElementById("help_parents")).remove$1(0, "selected_tab");
      J.get$classes$x(document.getElementById("help_children")).remove$1(0, "selected_tab");
      J.get$classes$x(document.getElementById("help_attributes")).add$1(0, "selected_tab");
      ul = document.getElementById("help_list");
      J._clearChildren$0$x(ul);
      t1 = $.doc.cfg;
      t2 = this.elementRef;
      attributes = t1._schema.elementAttributes$1(t2);
      for (t1 = new H.ListIterator(attributes, attributes.length, 0, null); t1.moveNext$0();) {
        attRef = t1._current;
        li = document.createElement("li", null);
        li.textContent = $.doc.cfg.attributeTitle$2(this.elementRef, attRef);
        ul.appendChild(li);
      }
    },
    switchToElement$1: function(elementRef) {
      this.elementRef = elementRef;
      this.attributeRef = null;
      J.remove$0$ax(document.getElementById("dlg1"));
      this.show$0(0);
    }
  },
  HelpDialog_show_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.fillParents$0();
    },
    $isFunction: true
  },
  HelpDialog_show_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.fillChildren$0();
    },
    $isFunction: true
  },
  HelpDialog_show_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      return this.this_2.fillAttributes$0();
    },
    $isFunction: true
  },
  HelpDialog_show_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      var t1;
      J.remove$0$ax(document.getElementById("dlg1"));
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      return;
    },
    $isFunction: true
  },
  HelpDialog_fillParents_closure: {
    "^": "Closure:29;this_0,parentRef_1",
    call$1: function($event) {
      return this.this_0.switchToElement$1(this.parentRef_1);
    },
    $isFunction: true
  },
  HelpDialog_fillChildren_closure: {
    "^": "Closure:29;this_0,childRef_1",
    call$1: function($event) {
      return this.this_0.switchToElement$1(this.childRef_1);
    },
    $isFunction: true
  },
  InsertPanel: {
    "^": "Object;",
    update$1: function(pos) {
      var divInsert, t1, cfg, $parent, $name, span, refs, validRefs, ref, button, t2, t3, t4, t5, branddiv, brandimg, versiontag;
      divInsert = document.querySelector("div#insert");
      for (t1 = J.get$children$x(divInsert), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
      if (pos == null)
        return;
      cfg = $.doc.cfg;
      if (cfg == null)
        return;
      $parent = pos._dn;
      t1 = J.getInterceptor$x($parent);
      if (t1.get$nodeType($parent) === 3)
        $parent = t1.get$parent($parent);
      if (J.get$nodeType$x($parent) === 1 && $parent.get$ref() != null) {
        divInsert.appendChild(this._makeHelpButton$1($parent.get$ref()));
        t1 = $parent.ref;
        $name = cfg._elementsToNamesCache.$index(0, t1);
        span = document.createElement("span", null);
        t1 = cfg.menuTitle$1($name);
        span.toString;
        span.appendChild(document.createTextNode(t1));
        divInsert.appendChild(span);
        divInsert.appendChild(document.createElement("hr", null));
      }
      refs = $.doc.elementsAllowedUnder$1($parent);
      validRefs = $.doc.validElementsInSelection$1(refs);
      for (t1 = new H.ListIterator(refs, refs.length, 0, null); t1.moveNext$0();) {
        ref = t1._current;
        divInsert.appendChild(this._makeHelpButton$1(ref));
        button = document.createElement("button", null);
        button.setAttribute("type", "button");
        t2 = J.getInterceptor$x(button);
        t2.get$classes(button).add$1(0, "insertb");
        $name = cfg._elementsToNamesCache.$index(0, ref);
        t2.set$value(button, $name);
        button.textContent = cfg.menuTitle$1($name);
        if (!C.JSArray_methods.contains$1(validRefs, ref))
          t2.set$disabled(button, true);
        t2 = t2.get$onClick(button);
        t3 = t2._eventType;
        t4 = t2._useCapture;
        t5 = new W._EventStreamSubscription(0, t2._target, t3, W._wrapZone(new Z.InsertPanel_update_closure(this, ref)), t4);
        t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
        t2 = t5._onData;
        if (t2 != null && t5._pauseCount <= 0)
          J.addEventListener$3$x(t5._target, t3, t2, t4);
        divInsert.appendChild(button);
        divInsert.appendChild(document.createElement("br", null));
      }
      branddiv = document.createElement("div", null);
      J.get$classes$x(branddiv).add$1(0, "dtawas-editor-branddiv");
      brandimg = W.ImageElement_ImageElement(null, null, null);
      brandimg.setAttribute("src", "images/brandimg.png");
      J.get$classes$x(brandimg).add$1(0, "dtawas-editor-brandimg");
      versiontag = document.createElement("p", null);
      versiontag.textContent = $.applicationVersion;
      branddiv.appendChild(brandimg);
      branddiv.appendChild(versiontag);
      divInsert.appendChild(branddiv);
    },
    _makeHelpButton$1: function(ref) {
      var bHelp, t1, t2, t3, t4;
      bHelp = document.createElement("button", null);
      bHelp.setAttribute("type", "button");
      t1 = J.getInterceptor$x(bHelp);
      t1.get$classes(bHelp).add$1(0, "help");
      t1.set$value(bHelp, "?");
      bHelp.textContent = "?";
      bHelp.title = $.doc.cfg.documentation$1(ref);
      t1 = t1.get$onClick(bHelp);
      t2 = t1._eventType;
      t3 = t1._useCapture;
      t4 = new W._EventStreamSubscription(0, t1._target, t2, W._wrapZone(new Z.InsertPanel__makeHelpButton_closure(this, ref)), t3);
      t4.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
      t1 = t4._onData;
      if (t1 != null && t4._pauseCount <= 0)
        J.addEventListener$3$x(t4._target, t2, t1, t3);
      return bHelp;
    }
  },
  InsertPanel_update_closure: {
    "^": "Closure:28;this_0,ref_1",
    call$1: function($event) {
      $.doc.insertNewNode$2(this.ref_1, "element");
      return;
    },
    $isFunction: true
  },
  InsertPanel__makeHelpButton_closure: {
    "^": "Closure:28;this_0,ref_1",
    call$1: function($event) {
      new Z.HelpDialog(this.ref_1, null).show$0(0);
      return;
    },
    $isFunction: true
  },
  Locale: {
    "^": "Object;language>,country<",
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.language);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = J.get$hashCode$(this.country);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return 37 * (629 + t1) + t2;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return J.$eq(this.language, J.get$language$x(other)) && J.$eq(this.country, other.get$country());
    },
    Locale$0: function() {
      var l, t1;
      l = J.split$1$s($.Strings_systemLocale, "_");
      t1 = l.length;
      if (0 >= t1)
        return H.ioore(l, 0);
      this.language = l[0];
      if (t1 > 1)
        this.country = l[1];
      else
        this.country = null;
    },
    static: {Locale$: function() {
        var t1 = new Z.Locale(null, null);
        t1.Locale$0();
        return t1;
      }}
  },
  Menu: {
    "^": "MenuItem;items<,id,_title,parent,action,shortcut,data,enabled,is_separator,toolTipText",
    add$1: function(_, item) {
      J.set$parent$x(item, this);
      this.items.push(item);
    },
    html$0: function(_) {
      var div, table, t1;
      div = document.createElement("div", null);
      J.get$classes$x(div).add$1(0, "dropdown_menu");
      div.id = "menu_" + H.S(this.id);
      table = document.createElement("table", null);
      J.get$classes$x(table).add$1(0, "menu");
      for (t1 = this.items, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        table.appendChild(J.html$0$x(t1._current));
      div.appendChild(table);
      return div;
    },
    show$0: function(_) {
      var t1 = "#menu_" + H.S(this.id);
      J.set$display$x(document.querySelector(t1).style, "block");
    },
    hide$0: function() {
      var t1, item;
      for (t1 = this.items, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        item = t1._current;
        if (!!J.getInterceptor(item).$isMenu)
          item.hide$0();
      }
      t1 = "#menu_" + H.S(this.id);
      J.set$display$x(document.querySelector(t1).style, "none");
    },
    isVisible$0: function() {
      var t1 = "#menu_" + H.S(this.id);
      return J.get$display$x(document.querySelector(t1).style) !== "none";
    },
    $isMenu: true
  },
  MenuItem: {
    "^": "Object;id>,_title,parent*,action,shortcut<,data>,enabled,is_separator,toolTipText",
    action$0: function($receiver) {
      return this.action.call$0();
    },
    html$0: function(_) {
      var tr, td, t1, t2;
      tr = document.createElement("tr", null);
      if (this.is_separator) {
        td = document.createElement("td", null);
        td.toString;
        td.appendChild(document.createTextNode("-"));
        tr.appendChild(td);
      } else {
        tr.toString;
        tr.setAttribute("id", "menu_" + H.S(this.id));
        td = document.createElement("td", null);
        td.textContent = this._title;
        t1 = J.getInterceptor$x(td);
        t2 = t1.get$onMouseUp(td);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.MenuItem_html_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t2 = t1.get$onMouseOver(td);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.MenuItem_html_closure0(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        t1 = t1.get$onMouseOut(td);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.MenuItem_html_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        tr.appendChild(td);
        td = document.createElement("td", null);
        t1 = this.shortcut;
        if (t1 != null)
          td.textContent = "Ctrl+" + H.S(t1);
        tr.appendChild(td);
        if (this.enabled !== true)
          J.get$classes$x(tr).add$1(0, "disabled");
      }
      t1 = this.toolTipText;
      if (t1 != null)
        J.set$title$x(tr, t1);
      return tr;
    },
    getHTMLNode$0: function() {
      var t1 = "#menu_" + H.S(this.id);
      return document.querySelector(t1);
    },
    activate$0: function() {
      if (this.enabled !== true)
        return;
      this.action$0(0);
    },
    select$0: function(_) {
      var t1;
      if (this.enabled !== true)
        return;
      t1 = "#menu_" + H.S(this.id);
      J.get$classes$x(document.querySelector(t1)).add$1(0, "selected");
    },
    deselect$0: function() {
      var t1, tr;
      if (this.enabled !== true)
        return;
      t1 = "#menu_" + H.S(this.id);
      tr = document.querySelector(t1);
      if (tr != null)
        J.get$classes$x(tr).remove$1(0, "selected");
    },
    disable$0: function() {
      var t1, tr;
      this.enabled = false;
      t1 = "#menu_" + H.S(this.id);
      tr = document.querySelector(t1);
      t1 = J.getInterceptor$x(tr);
      t1.get$classes(tr).remove$1(0, "selected");
      t1.get$classes(tr).add$1(0, "disabled");
    },
    enable$0: function() {
      this.enabled = true;
      var t1 = "#menu_" + H.S(this.id);
      J.get$classes$x(document.querySelector(t1)).remove$1(0, "disabled");
    },
    get$title: function(_) {
      return this._title;
    },
    set$title: function(_, title) {
      var t1, tr;
      this._title = title;
      t1 = "#menu_" + H.S(this.id);
      tr = document.querySelector(t1);
      tr.toString;
      t1 = new W._ChildNodeListLazy(tr);
      J.set$text$x(t1.get$first(t1), title);
    },
    MenuItem$4$data$shortcut: function(_title, action, data, shortcut) {
      this.id = "menu_" + $.MenuItem_idcount;
      $.MenuItem_idcount = $.MenuItem_idcount + 1;
      this.parent = null;
      this.enabled = true;
      this.is_separator = false;
    },
    static: {"^": "MenuItem_idcount", MenuItem$: function(_title, action, data, shortcut) {
        var t1 = new Z.MenuItem(null, _title, null, action, shortcut, data, null, null, null);
        t1.MenuItem$4$data$shortcut(_title, action, data, shortcut);
        return t1;
      }}
  },
  MenuItem_html_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.activate$0();
    },
    $isFunction: true
  },
  MenuItem_html_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.select$0(0);
    },
    $isFunction: true
  },
  MenuItem_html_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      return this.this_2.deselect$0();
    },
    $isFunction: true
  },
  MenuBar: {
    "^": "Object;menus,ignoreClick,visibleMenu",
    add$1: function(_, m) {
      this.menus.push(m);
    },
    html$0: function(_) {
      var div, t1, m, divMenu, t2, t3, t4, t5, t6, t7, dropdown;
      div = document.createElement("div", null);
      J.get$classes$x(div).add$1(0, "menubar");
      for (t1 = this.menus, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        m = t1._current;
        divMenu = document.createElement("div", null);
        t2 = J.getInterceptor$x(m);
        divMenu.textContent = t2.get$title(m);
        divMenu.id = "menutitle_" + H.S(t2.get$id(m));
        t3 = J.getInterceptor$x(divMenu);
        t3.get$classes(divMenu).add$1(0, "menu_title");
        t4 = t3.get$onMouseDown(divMenu);
        t5 = t4._eventType;
        t6 = t4._useCapture;
        t7 = new W._EventStreamSubscription(0, t4._target, t5, W._wrapZone(new Z.MenuBar_html_closure(this, m)), t6);
        t7.$builtinTypeInfo = [H.getTypeArgumentByIndex(t4, 0)];
        t4 = t7._onData;
        if (t4 != null && t7._pauseCount <= 0)
          J.addEventListener$3$x(t7._target, t5, t4, t6);
        t4 = t3.get$onMouseOver(divMenu);
        t5 = t4._eventType;
        t6 = t4._useCapture;
        t7 = new W._EventStreamSubscription(0, t4._target, t5, W._wrapZone(new Z.MenuBar_html_closure0(this, m)), t6);
        t7.$builtinTypeInfo = [H.getTypeArgumentByIndex(t4, 0)];
        t4 = t7._onData;
        if (t4 != null && t7._pauseCount <= 0)
          J.addEventListener$3$x(t7._target, t5, t4, t6);
        t3 = t3.get$onClick(divMenu);
        t4 = t3._eventType;
        t5 = t3._useCapture;
        t6 = new W._EventStreamSubscription(0, t3._target, t4, W._wrapZone(new Z.MenuBar_html_closure1(this, m)), t5);
        t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
        t3 = t6._onData;
        if (t3 != null && t6._pauseCount <= 0)
          J.addEventListener$3$x(t6._target, t4, t3, t5);
        div.appendChild(divMenu);
        dropdown = t2.html$0(m);
        J.set$display$x(dropdown.style, "none");
        divMenu.appendChild(dropdown);
      }
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, "mouseup", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.MenuBar_html_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      return div;
    },
    mouseOver$2: function($event, m) {
      var t1 = this.visibleMenu;
      if (t1 == null || t1 === m)
        return;
      this.hideMenu$1(t1);
      this.showMenu$1(m);
    },
    click$1: function(_, m) {
      if (this.ignoreClick)
        return;
      if (!m.isVisible$0())
        this.showMenu$1(m);
      else
        this.hideMenu$1(m);
    },
    docMouseUp$1: function($event) {
      var t1, r, t2, t3, t4;
      t1 = this.visibleMenu;
      if (t1 == null)
        return;
      t1 = "#menutitle_" + H.S(J.get$id$x(t1));
      r = document.querySelector(t1).getBoundingClientRect();
      t1 = J.getInterceptor$x($event);
      t2 = t1.get$client($event);
      t2 = t2.get$x(t2);
      t3 = J.getInterceptor$x(r);
      t4 = t3.get$left(r);
      if (typeof t2 !== "number")
        return t2.$lt();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (!(t2 < t4)) {
        t2 = t1.get$client($event);
        t2 = t2.get$x(t2);
        t4 = t3.get$right(r);
        if (typeof t2 !== "number")
          return t2.$gt();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(t2 > t4)) {
          t2 = t1.get$client($event);
          t2 = t2.get$y(t2);
          t4 = t3.get$top(r);
          if (typeof t2 !== "number")
            return t2.$lt();
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(t2 < t4)) {
            t1 = t1.get$client($event);
            t1 = t1.get$y(t1);
            t3 = t3.get$bottom(r);
            if (typeof t1 !== "number")
              return t1.$gt();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = t1 > t3;
            t1 = t3;
          } else
            t1 = true;
        } else
          t1 = true;
      } else
        t1 = true;
      if (t1) {
        this.hideMenu$1(this.visibleMenu);
        this.ignoreClick = true;
      }
    },
    showMenu$1: function(m) {
      var t1, t2;
      this.visibleMenu = m;
      t1 = J.getInterceptor$x(m);
      t2 = "#menutitle_" + H.S(t1.get$id(m));
      J.get$classes$x(document.querySelector(t2)).add$1(0, "selected");
      t1.show$0(m);
    },
    hideMenu$1: function(m) {
      var t1;
      this.visibleMenu = null;
      t1 = "#menutitle_" + H.S(J.get$id$x(m));
      J.get$classes$x(document.querySelector(t1)).remove$1(0, "selected");
      m.hide$0();
    },
    MenuBar$0: function() {
      this.menus = H.setRuntimeTypeInfo([], [Z.Menu]);
      this.ignoreClick = false;
      this.visibleMenu = null;
    }
  },
  MenuBar_html_closure: {
    "^": "Closure:29;this_0,m_1",
    call$1: function($event) {
      var t1, t2;
      t1 = this.this_0;
      t2 = this.m_1;
      J.preventDefault$0$x($event);
      if (!t2.isVisible$0()) {
        t1.showMenu$1(t2);
        t1.ignoreClick = true;
      } else
        t1.ignoreClick = false;
      return;
    },
    $isFunction: true
  },
  MenuBar_html_closure0: {
    "^": "Closure:29;this_2,m_3",
    call$1: function($event) {
      return this.this_2.mouseOver$2($event, this.m_3);
    },
    $isFunction: true
  },
  MenuBar_html_closure1: {
    "^": "Closure:29;this_4,m_5",
    call$1: function($event) {
      return this.this_4.click$1(0, this.m_5);
    },
    $isFunction: true
  },
  MenuBar_html_closure2: {
    "^": "Closure:29;this_6",
    call$1: function($event) {
      return this.this_6.docMouseUp$1($event);
    },
    $isFunction: true
  },
  NodeFactory: {
    "^": "Object;constructorsFromRef,constructorsFromNode",
    static: {NodeFactory_addCoreDisplayTypes: function() {
        Z.NodeFactory_addDisplayType("division", new Z.NodeFactory_addCoreDisplayTypes_closure(), new Z.NodeFactory_addCoreDisplayTypes_closure0());
        Z.NodeFactory_addDisplayType("item", new Z.NodeFactory_addCoreDisplayTypes_closure1(), new Z.NodeFactory_addCoreDisplayTypes_closure2());
        Z.NodeFactory_addDisplayType("liste", new Z.NodeFactory_addCoreDisplayTypes_closure3(), new Z.NodeFactory_addCoreDisplayTypes_closure4());
        Z.NodeFactory_addDisplayType("fichier", new Z.NodeFactory_addCoreDisplayTypes_closure5(), new Z.NodeFactory_addCoreDisplayTypes_closure6());
        Z.NodeFactory_addDisplayType("formulaire", new Z.NodeFactory_addCoreDisplayTypes_closure7(), new Z.NodeFactory_addCoreDisplayTypes_closure8());
        Z.NodeFactory_addDisplayType("string", new Z.NodeFactory_addCoreDisplayTypes_closure9(), new Z.NodeFactory_addCoreDisplayTypes_closure10());
        Z.NodeFactory_addDisplayType("style", new Z.NodeFactory_addCoreDisplayTypes_closure11(), new Z.NodeFactory_addCoreDisplayTypes_closure12());
        Z.NodeFactory_addDisplayType("symbole2", new Z.NodeFactory_addCoreDisplayTypes_closure13(), new Z.NodeFactory_addCoreDisplayTypes_closure14());
        Z.NodeFactory_addDisplayType("table", new Z.NodeFactory_addCoreDisplayTypes_closure15(), new Z.NodeFactory_addCoreDisplayTypes_closure16());
        Z.NodeFactory_addDisplayType("tabletexte", new Z.NodeFactory_addCoreDisplayTypes_closure17(), new Z.NodeFactory_addCoreDisplayTypes_closure18());
        Z.NodeFactory_addDisplayType("texte", null, new Z.NodeFactory_addCoreDisplayTypes_closure19());
        Z.NodeFactory_addDisplayType("typesimple", new Z.NodeFactory_addCoreDisplayTypes_closure20(), new Z.NodeFactory_addCoreDisplayTypes_closure21());
        Z.NodeFactory_addDisplayType("vide", new Z.NodeFactory_addCoreDisplayTypes_closure22(), new Z.NodeFactory_addCoreDisplayTypes_closure23());
        Z.NodeFactory_addDisplayType("zone", new Z.NodeFactory_addCoreDisplayTypes_closure24(), new Z.NodeFactory_addCoreDisplayTypes_closure25());
        Z.NodeFactory_addDisplayType("section", new Z.NodeFactory_addCoreDisplayTypes_closure26(), new Z.NodeFactory_addCoreDisplayTypes_closure27());
        Z.NodeFactory_addDisplayType("layout", new Z.NodeFactory_addCoreDisplayTypes_closure28(), new Z.NodeFactory_addCoreDisplayTypes_closure29());
        Z.NodeFactory_addDisplayType("block", new Z.NodeFactory_addCoreDisplayTypes_closure30(), new Z.NodeFactory_addCoreDisplayTypes_closure31());
      }, NodeFactory_addDisplayType: function(displayType, cref, cnode) {
        if (cref != null)
          $.get$nodeFactory().constructorsFromRef.$indexSet(0, displayType, cref);
        $.get$nodeFactory().constructorsFromNode.$indexSet(0, displayType, cnode);
      }, NodeFactory_createFromNode: function(n, $parent) {
        var t1, t2, t3, ref, dt, cnode, dn, className;
        t1 = J.getInterceptor(n);
        if (!!t1.$isDocument) {
          t1 = new S.DNDocument(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNode$3$createChildren(n, null, true);
          t1.xmlVersion = n.get$xmlVersion();
          t1.xmlEncoding = n.get$xmlEncoding();
          return t1;
        } else if (!!t1.$isComment) {
          t1 = new S.DNComment(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNode$3$createChildren(n, $parent, true);
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 0;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b1 = t2;
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 1;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b2 = t2;
          return t1;
        } else if (!!t1.$isProcessingInstruction) {
          t1 = new S.DNProcessingInstruction(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNode$3$createChildren(n, $parent, true);
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 0;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b1 = t2;
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 1;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b2 = t2;
          return t1;
        } else if (!!t1.$isCDATASection) {
          t1 = new S.DNCData(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNode$3$createChildren(n, $parent, true);
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 0;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b1 = t2;
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 1;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b2 = t2;
          return t1;
        }
        if (!!t1.$isElement) {
          t2 = $.doc.cfg;
          t3 = $parent != null ? $parent.get$ref() : null;
          ref = t2._schema.elementReference$2(n, t3);
        } else
          ref = null;
        dt = $.doc.cfg.nodeDisplayType$3(ref, t1.get$nodeName(n), t1.get$nodeType(n));
        cnode = $.get$nodeFactory().constructorsFromNode.$index(0, dt);
        if (cnode != null)
          dn = cnode.call$2(n, $parent);
        else if (J.$eq(dt, "plugin")) {
          className = $.doc.cfg.nodeParameterValue$5(ref, "element", t1.get$nodeName(n), "classe", null);
          t1 = J.getInterceptor(className);
          if (t1.$eq(className, "xpages.JEEquationMemoire")) {
            dn = new S.DNEquationMem(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
            dn.DaxeNode$fromNode$3$createChildren(n, $parent, false);
            dn.DNEquationMem$fromNode$2(n, $parent);
          } else if (t1.$eq(className, "xpages.JEEquaTeXMemoire")) {
            dn = new S.DNEquaTexMem(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
            dn.DaxeNode$fromNode$3$createChildren(n, $parent, false);
            dn.DNEquaTexMem$fromNode$2(n, $parent);
          } else
            dn = t1.$eq(className, "xpages.jeimage.JEImage") ? S.DNFile$fromNode(n, $parent) : null;
        } else {
          dn = new S.DNString(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          dn.DaxeNode$fromNode$3$createChildren(n, $parent, true);
          t1 = new Z.Tag(null, null, null, null);
          t1._dn = dn;
          t1._daxe$_type = 0;
          t1._long = false;
          t1._hideElementTitle = false;
          dn._b1 = t1;
          t1 = new Z.Tag(null, null, null, null);
          t1._dn = dn;
          t1._daxe$_type = 1;
          t1._long = false;
          t1._hideElementTitle = false;
          dn._b2 = t1;
        }
        return dn;
      }, NodeFactory_create: function(elementRef, nodeType) {
        var t1, t2, dt, cref, dn, className;
        t1 = J.getInterceptor(nodeType);
        if (t1.$eq(nodeType, "commentaire")) {
          t1 = new S.DNComment(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNodeType$1(1);
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 0;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b1 = t2;
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 1;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b2 = t2;
          return t1;
        } else if (t1.$eq(nodeType, "instruction")) {
          t1 = new S.DNProcessingInstruction(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNodeType$1(1);
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 0;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b1 = t2;
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 1;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b2 = t2;
          return t1;
        } else if (t1.$eq(nodeType, "cdata")) {
          t1 = new S.DNCData(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$fromNodeType$1(1);
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 0;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b1 = t2;
          t2 = new Z.Tag(null, null, null, null);
          t2._dn = t1;
          t2._daxe$_type = 1;
          t2._long = false;
          t2._hideElementTitle = false;
          t1._b2 = t2;
          return t1;
        }
        t1 = $.doc.cfg;
        dt = t1.nodeDisplayType$3(elementRef, t1._elementsToNamesCache.$index(0, elementRef), 1);
        cref = $.get$nodeFactory().constructorsFromRef.$index(0, dt);
        if (cref != null)
          dn = cref.call$1(elementRef);
        else if (J.$eq(dt, "plugin")) {
          t1 = $.doc.cfg;
          className = t1.nodeParameterValue$5(elementRef, "element", t1._elementsToNamesCache.$index(0, elementRef), "classe", null);
          t1 = J.getInterceptor(className);
          if (t1.$eq(className, "xpages.JEEquationMemoire")) {
            dn = new S.DNEquationMem(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
            dn.DaxeNode$fromRef$1(elementRef);
            dn._textAtt = $.doc.cfg.nodeParameterValue$5(dn.ref, "element", null, "texteAtt", "src");
            B.MathBase_loadFonts();
          } else if (t1.$eq(className, "xpages.JEEquaTeXMemoire")) {
            dn = new S.DNEquaTexMem(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
            dn.DaxeNode$fromRef$1(elementRef);
            dn.DNEquaTexMem$fromRef$1(elementRef);
          } else
            dn = t1.$eq(className, "xpages.jeimage.JEImage") ? S.DNFile$fromRef(elementRef) : null;
        } else {
          dn = new S.DNString(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
          dn.DaxeNode$fromRef$1(elementRef);
          t1 = new Z.Tag(null, null, null, null);
          t1._dn = dn;
          t1._daxe$_type = 0;
          t1._long = false;
          t1._hideElementTitle = false;
          dn._b1 = t1;
          t1 = new Z.Tag(null, null, null, null);
          t1._dn = dn;
          t1._daxe$_type = 1;
          t1._long = false;
          t1._hideElementTitle = false;
          dn._b2 = t1;
        }
        return dn;
      }}
  },
  NodeFactory_addCoreDisplayTypes_closure: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNDivision(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNDivision$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure0: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNDivision(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.DNDivision$fromNode$2(node, $parent);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure1: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNItem(null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure2: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNItem(null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.fixLineBreaks$0();
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure3: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNList(null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.init$0();
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure4: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNList(null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.init$0();
      t1.fixLineBreaks$0();
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure5: {
    "^": "Closure:36;",
    call$1: function(ref) {
      return S.DNFile$fromRef(ref);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure6: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      return S.DNFile$fromNode(node, $parent);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure7: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNForm(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNForm$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure8: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      return S.DNForm$fromNode(node, $parent);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure9: {
    "^": "Closure:36;",
    call$1: function(ref) {
      return S.DNString$fromRef(ref);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure10: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      return S.DNString$fromNode(node, $parent);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure11: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNStyle(null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNStyle$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure12: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNStyle(null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.DNStyle$fromNode$2(node, $parent);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure13: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNSpecial(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure14: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNSpecial(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, false);
      t1._character = J.get$nodeValue$x(J.get$firstChild$x(node));
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure15: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNTable(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.init$0();
      t1.newElementDialog$0();
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure16: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      return S.DNTable$fromNode(node, $parent);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure17: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNTable(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.init$0();
      t1.newElementDialog$0();
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure18: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      return S.DNTable$fromNode(node, $parent);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure19: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure20: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNSimpleType(null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure21: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      return S.DNSimpleType$fromNode(node, $parent);
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure22: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNEmpty(null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNEmpty$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure23: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNEmpty(null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1._b1 = Z.Tag$(t1, 2, null, null);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure24: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNArea(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNArea$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure25: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNArea(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.DNArea$fromNode$2(node, $parent);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure26: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNSection(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNSection$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure27: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNSection(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.DNSection$fromNode$2(node, $parent);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure28: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNLayout(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNLayout$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure29: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNLayout(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.DNLayout$fromNode$2(node, $parent);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure30: {
    "^": "Closure:36;",
    call$1: function(ref) {
      var t1 = new S.DNBlock(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromRef$1(ref);
      t1.DNBlock$fromRef$1(ref);
      return t1;
    },
    $isFunction: true
  },
  NodeFactory_addCoreDisplayTypes_closure31: {
    "^": "Closure:37;",
    call$2: function(node, $parent) {
      var t1 = new S.DNBlock(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
      t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
      t1.DNBlock$fromNode$2(node, $parent);
      return t1;
    },
    $isFunction: true
  },
  Position: {
    "^": "Object;_dn,_dnOffset",
    get$dn: function() {
      return this._dn;
    },
    get$dnOffset: function() {
      return this._dnOffset;
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._dn);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 37 * (629 + t1) + J.get$hashCode$(this._dnOffset);
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (J.$eq(this._dn, other.get$dn())) {
        t1 = this._dnOffset;
        t2 = other.get$dnOffset();
        t2 = t1 == null ? t2 == null : t1 === t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    $lt: function(_, other) {
      var p1, offset1, p2, offset2, t1, t2, t3;
      p1 = this._dn;
      offset1 = J.toDouble$0$n(this._dnOffset);
      for (; p1 != null;) {
        p2 = other.get$dn();
        offset2 = J.toDouble$0$n(other.get$dnOffset());
        for (t1 = J.getInterceptor(p1); p2 != null;) {
          if (t1.$eq(p1, p2))
            return offset1 < offset2;
          t2 = J.getInterceptor$x(p2);
          if (t2.get$parent(p2) == null)
            break;
          t3 = t2.get$parent(p2).offsetOf$1(p2);
          if (typeof t3 !== "number")
            return t3.$add();
          offset2 = t3 + 0.5;
          p2 = t2.get$parent(p2);
        }
        if (t1.get$parent(p1) == null)
          break;
        t2 = t1.get$parent(p1).offsetOf$1(p1);
        if (typeof t2 !== "number")
          return t2.$add();
        offset1 = t2 + 0.5;
        p1 = t1.get$parent(p1);
      }
    },
    $le: function(_, other) {
      return this.$lt(0, other) === true || this.$eq(0, other);
    },
    $gt: function(_, other) {
      return !(this.$eq(0, other) || this.$lt(0, other) === true);
    },
    $ge: function(_, other) {
      return this.$gt(0, other) || this.$eq(0, other);
    },
    move$1: function(offset) {
      var t1, t2, pos, prev, next;
      this.moveInsideTextNodeIfPossible$0();
      if (offset < 0) {
        t1 = this._dnOffset;
        if (typeof t1 !== "number")
          return t1.$add();
        t1 = t1 + offset >= 0 && J.get$nodeType$x(this._dn) !== 3;
      } else
        t1 = false;
      if (t1) {
        t1 = J.get$childNodes$x(this._dn);
        t2 = this._dnOffset;
        if (typeof t2 !== "number")
          return t2.$sub();
        --t2;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        pos = t1[t2].lastCursorPositionInside$0();
        if (pos != null) {
          this._dn = pos._dn;
          this._dnOffset = pos._dnOffset;
        } else {
          t1 = this._dnOffset;
          if (typeof t1 !== "number")
            return t1.$sub();
          this._dnOffset = t1 - 1;
        }
      } else {
        t1 = this._dnOffset;
        if (typeof t1 !== "number")
          return t1.$add();
        if (t1 + offset < 0) {
          prev = this._dn.get$previousSibling();
          if (prev != null && J.get$nodeType$x(this._dn) === 3) {
            pos = prev.lastCursorPositionInside$0();
            if (pos != null) {
              this._dn = pos._dn;
              this._dnOffset = pos._dnOffset;
            } else {
              t1 = prev.parent;
              this._dn = t1;
              this._dnOffset = t1.offsetOf$1(prev);
            }
          } else {
            if (J.get$parent$x(this._dn) == null)
              return;
            if (J.get$nodeType$x(this._dn) === 3 && J.get$parent$x(J.get$parent$x(this._dn)) != null) {
              if (J.get$parent$x(this._dn).get$previousSibling() != null) {
                t1 = J.get$parent$x(this._dn).get$previousSibling();
                t1 = t1.get$nodeType(t1) === 3;
              } else
                t1 = false;
              t2 = this._dn;
              if (t1) {
                this._dnOffset = J.get$parent$x(t2).get$previousSibling().get$offsetLength();
                this._dn = J.get$parent$x(this._dn).get$previousSibling();
              } else {
                this._dnOffset = J.get$parent$x(J.get$parent$x(t2)).offsetOf$1(J.get$parent$x(this._dn));
                this._dn = J.get$parent$x(J.get$parent$x(this._dn));
              }
            } else {
              this._dnOffset = J.get$parent$x(this._dn).offsetOf$1(this._dn);
              this._dn = J.get$parent$x(this._dn);
            }
          }
        } else {
          if (J.get$nodeValue$x(this._dn) != null) {
            t1 = this._dnOffset;
            if (typeof t1 !== "number")
              return t1.$add();
            t2 = J.get$length$asx(J.get$nodeValue$x(this._dn));
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 + offset > t2;
            t1 = t2;
          } else
            t1 = true;
          if (t1) {
            if (J.get$nodeType$x(this._dn) === 1 || J.get$nodeType$x(this._dn) === 9) {
              t1 = this._dn.get$offsetLength();
              t2 = this._dnOffset;
              if (typeof t1 !== "number")
                return t1.$gt();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = t1 > t2;
              t1 = t2;
            } else
              t1 = false;
            t2 = this._dn;
            if (t1) {
              t1 = J.get$childNodes$x(t2);
              t2 = this._dnOffset;
              if (t2 >>> 0 !== t2 || t2 >= t1.length)
                return H.ioore(t1, t2);
              pos = t1[t2].firstCursorPositionInside$0();
              if (pos != null) {
                this._dn = pos._dn;
                this._dnOffset = pos._dnOffset;
              } else {
                t1 = this._dnOffset;
                if (typeof t1 !== "number")
                  return t1.$add();
                this._dnOffset = t1 + 1;
              }
            } else {
              next = t2.get$nextSibling();
              if (next != null && J.get$nodeType$x(this._dn) === 3) {
                pos = next.firstCursorPositionInside$0();
                if (pos != null) {
                  this._dn = pos._dn;
                  this._dnOffset = pos._dnOffset;
                } else {
                  t1 = next.parent;
                  this._dn = t1;
                  t1 = t1.offsetOf$1(next);
                  if (typeof t1 !== "number")
                    return t1.$add();
                  this._dnOffset = t1 + 1;
                }
              } else if (J.get$parent$x(this._dn) != null) {
                t1 = J.get$nodeType$x(this._dn) === 3 && J.get$parent$x(J.get$parent$x(this._dn)) != null;
                t2 = this._dn;
                if (t1) {
                  t1 = J.get$parent$x(J.get$parent$x(t2)).offsetOf$1(J.get$parent$x(this._dn));
                  if (typeof t1 !== "number")
                    return t1.$add();
                  this._dnOffset = t1 + 1;
                  this._dn = J.get$parent$x(J.get$parent$x(this._dn));
                } else {
                  t1 = J.get$parent$x(t2).offsetOf$1(this._dn);
                  if (typeof t1 !== "number")
                    return t1.$add();
                  this._dnOffset = t1 + 1;
                  this._dn = J.get$parent$x(this._dn);
                }
              }
            }
          } else {
            t1 = this._dnOffset;
            if (typeof t1 !== "number")
              return t1.$add();
            this._dnOffset = t1 + offset;
          }
        }
      }
      this.moveInsideTextNodeIfPossible$0();
    },
    moveInsideTextNodeIfPossible$0: function() {
      var t1, t2;
      if (J.get$nodeType$x(this._dn) === 1) {
        t1 = this._dnOffset;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > 0) {
          t1 = J.get$childNodes$x(this._dn);
          t2 = this._dnOffset;
          if (typeof t2 !== "number")
            return t2.$sub();
          --t2;
          if (t2 >>> 0 !== t2 || t2 >= t1.length)
            return H.ioore(t1, t2);
          t2 = J.get$nodeType$x(t1[t2]) === 3;
          t1 = t2;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        t1 = J.get$childNodes$x(this._dn);
        t2 = this._dnOffset;
        if (typeof t2 !== "number")
          return t2.$sub();
        --t2;
        if (t2 >>> 0 !== t2 || t2 >= t1.length)
          return H.ioore(t1, t2);
        t2 = t1[t2];
        this._dn = t2;
        this._dnOffset = t2.get$offsetLength();
      } else {
        if (J.get$nodeType$x(this._dn) === 1) {
          t1 = this._dnOffset;
          t2 = this._dn.get$offsetLength();
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t1 = t1 < t2 && J.get$nodeType$x(this._dn.childAtOffset$1(this._dnOffset)) === 3;
        } else
          t1 = false;
        if (t1) {
          this._dn = this._dn.childAtOffset$1(this._dnOffset);
          this._dnOffset = 0;
        } else if (this._dnOffset === 0 && J.get$firstChild$x(this._dn) != null && J.get$nodeType$x(J.get$firstChild$x(this._dn)) === 3)
          this._dn = J.get$firstChild$x(this._dn);
      }
    },
    positionOnScreen$0: function() {
      var t1, t2, hn, n, offset, s, range, r, pt, t3, spos, rects, children;
      t1 = J.get$nodeType$x(this._dn);
      t2 = this._dn;
      if (t1 === 3) {
        hn = t2.getHTMLContentsNode$0();
        if (hn == null || hn.childNodes.length === 0)
          return;
        hn.toString;
        t1 = new W._ChildNodeListLazy(hn);
        n = t1.get$first(t1);
        J.get$nodeValue$x(this._dn);
        offset = this._dnOffset;
        s = J.get$text$x(n);
        range = document.createRange();
        if (offset === 0) {
          range.setStart(n, offset);
          range.setEnd(n, s.length);
          r = C._ClientRectList_methods.get$first(range.getClientRects());
          t1 = J.getInterceptor$x(r);
          pt = new Z.Point0(t1.get$left(r), t1.get$top(r));
        } else {
          if (typeof offset !== "number")
            return offset.$sub();
          t1 = offset - 1;
          t2 = s.length;
          if (t1 >>> 0 !== t1 || t1 >= t2)
            return H.ioore(s, t1);
          t3 = s[t1];
          if (t3 === "\n" || t3 === " ")
            if (offset === t2)
              if (this._dn.get$nextSibling() != null && J.get$nodeType$x(this._dn.get$nextSibling()) === 1) {
                t1 = this._dn.get$nextSibling().getHTMLNode$0().getClientRects();
                if (0 >= t1.length)
                  return H.ioore(t1, 0);
                r = t1[0];
                t1 = J.getInterceptor$x(r);
                pt = new Z.Point0(t1.get$left(r), t1.get$top(r));
              } else if (s[t1] === " ") {
                range.setStart(n, 0);
                range.setEnd(n, offset);
                r = C._ClientRectList_methods.get$last(range.getClientRects());
                t1 = J.getInterceptor$x(r);
                pt = new Z.Point0(t1.get$right(r), t1.get$top(r));
              } else {
                spos = document.createElement("span", null);
                spos.toString;
                spos.appendChild(document.createTextNode("|"));
                t1 = n.nextSibling;
                if (t1 == null)
                  hn.appendChild(spos);
                else
                  hn.insertBefore(spos, t1);
                t1 = spos.getClientRects();
                if (0 >= t1.length)
                  return H.ioore(t1, 0);
                r = t1[0];
                t1 = J.getInterceptor$x(r);
                pt = new Z.Point0(t1.get$left(r), t1.get$top(r));
                J.remove$0$ax(spos);
              }
            else {
              range.setStart(n, offset);
              range.setEnd(n, offset + 1);
              rects = range.getClientRects();
              t1 = s[t1];
              if (t1 === " ") {
                if (offset >>> 0 !== offset || offset >= t2)
                  return H.ioore(s, offset);
                t3 = s[offset] === "\n";
              } else
                t3 = false;
              if (t3)
                r = C._ClientRectList_methods.get$first(rects);
              else {
                if (offset >>> 0 !== offset || offset >= t2)
                  return H.ioore(s, offset);
                t2 = s[offset] === "\n";
                if (t2 && rects.length === 3) {
                  if (1 >= rects.length)
                    return H.ioore(rects, 1);
                  r = rects[1];
                } else
                  r = t1 === "\n" && t2 && rects.length === 2 ? C._ClientRectList_methods.get$first(rects) : C._ClientRectList_methods.get$last(rects);
              }
              t1 = J.getInterceptor$x(r);
              pt = new Z.Point0(t1.get$left(r), t1.get$top(r));
            }
          else {
            range.setStart(n, 0);
            range.setEnd(n, offset);
            r = C._ClientRectList_methods.get$last(range.getClientRects());
            t1 = J.getInterceptor$x(r);
            pt = new Z.Point0(t1.get$right(r), t1.get$top(r));
          }
        }
        return pt;
      } else {
        children = J.get$childNodes$x(t2);
        t1 = children != null;
        if (t1) {
          t2 = this._dnOffset;
          if (typeof t2 !== "number")
            return t2.$gt();
          t2 = t2 > 0 && t2 === children.length;
        } else
          t2 = false;
        if (t2) {
          t1 = this._dnOffset;
          if (typeof t1 !== "number")
            return t1.$sub();
          --t1;
          if (t1 >>> 0 !== t1 || t1 >= children.length)
            return H.ioore(children, t1);
          n = children[t1].getHTMLNode$0();
          if (n == null)
            return;
          t1 = J.getInterceptor(n);
          if (!!t1.$isImageElement || !!t1.$isTableRowElement) {
            r = n.getBoundingClientRect();
            t1 = J.getInterceptor$x(r);
            return new Z.Point0(t1.get$right(r), t1.get$top(r));
          } else if (!!t1.$isDivElement || !!t1.$isTableElement || !!t1.$isUListElement || !!t1.$isLIElement) {
            r = n.getBoundingClientRect();
            t1 = J.getInterceptor$x(r);
            return new Z.Point0(t1.get$left(r), t1.get$bottom(r));
          } else {
            rects = n.getClientRects();
            if (rects.length === 0)
              return;
            r = C._ClientRectList_methods.get$last(rects);
            t1 = J.getInterceptor$x(r);
            return new Z.Point0(t1.get$right(r), t1.get$top(r));
          }
        } else {
          if (t1) {
            t1 = this._dnOffset;
            t2 = children.length;
            if (typeof t1 !== "number")
              return t1.$lt();
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
          if (t1) {
            t1 = this._dnOffset;
            if (t1 >>> 0 !== t1 || t1 >= children.length)
              return H.ioore(children, t1);
            hn = children[t1].getHTMLNode$0();
            if (hn == null)
              return;
            t1 = hn.getClientRects();
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            r = t1[0];
            t1 = J.getInterceptor$x(r);
            return new Z.Point0(t1.get$left(r), t1.get$top(r));
          } else {
            t1 = J.getClientRects$0$x(this._dn.getHTMLContentsNode$0());
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            r = t1[0];
            t1 = J.getInterceptor$x(r);
            return new Z.Point0(t1.get$left(r), t1.get$top(r));
          }
        }
      }
    },
    xPath$0: function() {
      var n, s, t1, n2, position, t2, spos;
      n = this._dn;
      for (s = ""; n != null;) {
        t1 = J.getInterceptor$x(n);
        if (t1.get$parent(n) != null) {
          for (n2 = J.get$firstChild$x(t1.get$parent(n)), position = 1; n2 != null; n2 = n2.get$nextSibling()) {
            t2 = J.getInterceptor(n2);
            if (t2.$eq(n2, n))
              break;
            if (t2.get$nodeType(n2) === 1 && J.$eq(t2.get$nodeName(n2), t1.get$nodeName(n)))
              ++position;
          }
          spos = "[" + position + "]";
        } else
          spos = "";
        if (t1.get$nodeType(n) === 1)
          s = H.S(t1.get$nodeName(n)) + spos + "/" + s;
        else if (t1.get$nodeType(n) === 3)
          s = "#text";
        n = t1.get$parent(n);
      }
      return "/" + s;
    },
    toString$0: function(_) {
      return "[Position " + H.S(J.get$nodeName$x(this._dn)) + " " + H.S(this._dnOffset) + "]";
    },
    Position$2: function(node, offset) {
      this._dn = node;
      this._dnOffset = offset;
    },
    static: {Position$: function(node, offset) {
        var t1 = new Z.Position(null, null);
        t1.Position$2(node, offset);
        return t1;
      }}
  },
  Point0: {
    "^": "Object;x>,y>"
  },
  SourceWindow: {
    "^": "Object;",
    show$0: function(_) {
      var t1, domdoc, div1, divWindow, divContent, divBottom, bSelect, bOk;
      t1 = $.doc;
      t1.toString;
      domdoc = Z.DocumentImpl$(new Z.DOMImplementationImpl(), null, null, null);
      t1.dndoc.toDOMNode$1(domdoc);
      div1 = document.createElement("div", null);
      div1.id = "dlg1";
      J.get$classes$x(div1).add$1(0, "dlg1");
      divWindow = document.createElement("div", null);
      J.get$classes$x(divWindow).add$1(0, "source_window");
      divContent = document.createElement("div", null);
      J.get$classes$x(divContent).add$1(0, "source_content");
      this.addNode$2(domdoc, divContent);
      divWindow.appendChild(divContent);
      divBottom = document.createElement("div", null);
      J.get$classes$x(divBottom).add$1(0, "source_bottom");
      bSelect = document.createElement("button", null);
      bSelect.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "source.select_all");
      bSelect.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bSelect);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.SourceWindow_show_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      divBottom.appendChild(bSelect);
      bOk = document.createElement("button", null);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.Close");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.SourceWindow_show_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      divBottom.appendChild(bOk);
      divWindow.appendChild(divBottom);
      div1.appendChild(divWindow);
      document.body.appendChild(div1);
    },
    addNode$2: function(node, html) {
      var t1, xmldec, xmlVersion, xmlEncoding, t2, n, elementName, att, attributeName, t3, t4, attributeValue, span;
      t1 = J.getInterceptor$x(node);
      switch (t1.get$nodeType(node)) {
        case 9:
          xmldec = document.createElement("span", null);
          J.get$classes$x(xmldec).add$1(0, "source_pi");
          H.interceptedTypeCast(node, "$isDocument");
          xmlVersion = node.get$xmlVersion();
          xmlEncoding = node.get$xmlEncoding();
          t2 = "<?xml version=\"" + H.S(xmlVersion) + "\" encoding=\"" + H.S(xmlEncoding) + "\"?>";
          xmldec.appendChild(document.createTextNode(t2));
          html.appendChild(xmldec);
          html.appendChild(document.createTextNode("\n"));
          for (n = t1.get$firstChild(node); n != null; n = n.get$nextSibling())
            this.addNode$2(n, html);
          break;
        case 1:
          html.appendChild(document.createTextNode("<"));
          elementName = document.createElement("span", null);
          J.get$classes$x(elementName).add$1(0, "source_element_name");
          t2 = t1.get$nodeName(node);
          elementName.appendChild(document.createTextNode(t2));
          html.appendChild(elementName);
          if (t1.get$attributes(node) != null)
            for (t2 = J.get$iterator$ax(J.get$values$x(t1.get$attributes(node))); t2.moveNext$0();) {
              att = t2.get$current();
              html.appendChild(document.createTextNode(" "));
              attributeName = document.createElement("span", null);
              J.get$classes$x(attributeName).add$1(0, "source_attribute_name");
              t3 = J.getInterceptor$x(att);
              t4 = t3.get$nodeName(att);
              attributeName.appendChild(document.createTextNode(t4));
              html.appendChild(attributeName);
              html.appendChild(document.createTextNode("=\""));
              attributeValue = document.createElement("span", null);
              J.get$classes$x(attributeValue).add$1(0, "source_attribute_value");
              this._appendTextWithEntities$2(attributeValue, t3.get$nodeValue(att));
              html.appendChild(attributeValue);
              html.appendChild(document.createTextNode("\""));
            }
          if (t1.get$firstChild(node) != null) {
            html.appendChild(document.createTextNode(">"));
            if (t1.get$childNodes(node) != null)
              for (t2 = J.get$iterator$ax(t1.get$childNodes(node)); t2.moveNext$0();)
                this.addNode$2(t2.get$current(), html);
            html.appendChild(document.createTextNode("</"));
            elementName = document.createElement("span", null);
            J.get$classes$x(elementName).add$1(0, "source_element_name");
            t1 = t1.get$nodeName(node);
            elementName.appendChild(document.createTextNode(t1));
            html.appendChild(elementName);
            html.appendChild(document.createTextNode(">"));
          } else
            html.appendChild(document.createTextNode("/>"));
          break;
        case 3:
          this._appendTextWithEntities$2(html, t1.get$nodeValue(node));
          break;
        case 8:
          span = document.createElement("span", null);
          J.get$classes$x(span).add$1(0, "source_comment");
          t1 = t1.toString$0(node);
          span.appendChild(document.createTextNode(t1));
          html.appendChild(span);
          break;
        case 5:
          span = document.createElement("span", null);
          J.get$classes$x(span).add$1(0, "source_entity");
          t1 = t1.toString$0(node);
          span.appendChild(document.createTextNode(t1));
          html.appendChild(span);
          break;
        case 4:
          span = document.createElement("span", null);
          J.get$classes$x(span).add$1(0, "source_cdata");
          t1 = t1.toString$0(node);
          span.appendChild(document.createTextNode(t1));
          html.appendChild(span);
          break;
        case 7:
          span = document.createElement("span", null);
          J.get$classes$x(span).add$1(0, "source_pi");
          t1 = t1.toString$0(node);
          span.appendChild(document.createTextNode(t1));
          html.appendChild(span);
          break;
        case 10:
          span = document.createElement("span", null);
          J.get$classes$x(span).add$1(0, "source_doctype");
          t1 = t1.toString$0(node);
          span.appendChild(document.createTextNode(t1));
          html.appendChild(span);
          break;
        default:
          t1 = t1.toString$0(node);
          html.appendChild(document.createTextNode(t1));
          break;
      }
    },
    _appendTextWithEntities$2: function(html, s) {
      var cent, keys, p, t1, t2, c, entity;
      cent = P.LinkedHashMap_LinkedHashMap$_literal(["&", "&amp;", "\"", "&quot;", "<", "&lt;", ">", "&gt;"], P.String, P.String);
      keys = cent.get$keys();
      p = 0;
      while (true) {
        t1 = J.getInterceptor$asx(s);
        t2 = t1.get$length(s);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(p < t2))
          break;
        c = t1.$index(s, p);
        if (keys.contains$1(0, c)) {
          if (p > 0) {
            t2 = t1.substring$2(s, 0, p);
            html.appendChild(document.createTextNode(t2));
          }
          entity = document.createElement("span", null);
          J.get$classes$x(entity).add$1(0, "source_entity");
          t2 = cent.$index(0, c);
          entity.appendChild(document.createTextNode(t2));
          html.appendChild(entity);
          s = t1.substring$1(s, p + 1);
          p = 0;
        } else
          ++p;
      }
      t1 = t1.get$length(s);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0)
        html.appendChild(document.createTextNode(s));
    }
  },
  SourceWindow_show_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      var selection, r;
      selection = window.getSelection();
      r = document.createRange();
      r.selectNodeContents(document.querySelector(".source_content"));
      selection.removeAllRanges();
      selection.addRange(r);
      return;
    },
    $isFunction: true
  },
  SourceWindow_show_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      var t1;
      J.remove$0$ax(document.getElementById("dlg1"));
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      return;
    },
    $isFunction: true
  },
  Tag: {
    "^": "Object;_dn,_daxe$_type,_long,_hideElementTitle",
    html$0: function(_) {
      var span, t1, classe, t2, attRefs, bAttr, t3, title, ja, nom_att, val_att, titleAttributes, attr, value, t4, t5, valueTitle;
      span = document.createElement("span", null);
      t1 = this._daxe$_type;
      if (t1 === 0)
        classe = "start_tag";
      else if (t1 === 1)
        classe = "end_tag";
      else
        classe = t1 === 2 ? "empty_tag" : null;
      t1 = J.getInterceptor$x(span);
      t1.get$classes(span).add$1(0, classe);
      if (this._long)
        t1.get$classes(span).add$1(0, "long");
      t2 = this._dn.ref;
      if (t2 != null) {
        attRefs = $.doc.cfg._schema.elementAttributes$1(t2);
        if (this._daxe$_type !== 1 && attRefs != null && attRefs.length > 0) {
          bAttr = document.createElement("button", null);
          bAttr.setAttribute("type", "button");
          t2 = J.getInterceptor$x(bAttr);
          t2.get$classes(bAttr).add$1(0, "attr");
          t2.set$value(bAttr, "..");
          bAttr.textContent = "..";
          t2 = t2.get$onClick(bAttr);
          H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.Tag_html_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
          span.appendChild(bAttr);
        }
      }
      t2 = this._dn;
      t3 = t2.ref;
      if (t3 != null) {
        title = $.doc.cfg.elementTitle$1(t3);
        if (title == null) {
          t2 = this._dn;
          title = t2.get$nodeName(t2);
        }
      } else if (!!t2.$isDNComment)
        title = this._daxe$_type === 0 ? "(" : ")";
      else if (!!t2.$isDNProcessingInstruction)
        title = this._daxe$_type === 0 ? "PI " + H.S(t2.get$nodeName(t2)) : "PI";
      else if (!!t2.$isDNCData)
        title = "CDATA";
      else if (t2.get$nodeName(t2) != null) {
        t2 = this._dn;
        title = t2.get$nodeName(t2);
      } else
        title = "?";
      if (this._daxe$_type !== 1)
        if (J.$eq($.doc.cfg.nodeParameterValue$5(this._dn.ref, "element", null, "attributsVisibles", "false"), "true")) {
          span.appendChild(document.createTextNode(title));
          for (t2 = J.get$iterator$ax(this._dn.attributes); t2.moveNext$0();) {
            ja = t2._current;
            span.appendChild(document.createTextNode(" "));
            nom_att = document.createElement("span", null);
            nom_att.setAttribute("class", "attribute_name");
            t3 = J.getInterceptor$x(ja);
            nom_att.textContent = t3.get$localName(ja);
            span.appendChild(nom_att);
            span.appendChild(document.createTextNode("="));
            val_att = document.createElement("span", null);
            val_att.setAttribute("class", "attribute_value");
            val_att.textContent = t3.get$value(ja);
            span.appendChild(val_att);
          }
        } else {
          titleAttributes = J.$index$asx($.doc.cfg.getNodeParameters$3(this._dn.ref, "element", null), "titreAtt");
          if (titleAttributes != null)
            for (t2 = J.get$iterator$ax(titleAttributes); t2.moveNext$0();) {
              attr = t2.get$current();
              value = this._dn.getAttribute$1(0, attr);
              t3 = $.doc.cfg;
              t4 = this._dn.ref;
              t5 = t3._schema.elementAttributes$1(t4);
              t5.toString;
              valueTitle = t3.attributeValueTitle$3(t4, H.IterableMixinWorkaround_firstWhere(t5, new Z.Tag_html_closure0(attr), null), value);
              if (value != null && !J.$eq(value, "")) {
                title = this._hideElementTitle ? H.S(valueTitle) : J.$add$ns(title, ": " + H.S(valueTitle));
                break;
              }
            }
          span.appendChild(document.createTextNode(title));
        }
      else
        span.appendChild(document.createTextNode(title));
      t1 = t1.get$onDoubleClick(span);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.Tag_html_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      return span;
    },
    Tag$4: function(dn, type, $long, hide) {
      this._dn = dn;
      this._daxe$_type = type;
      if ($long != null)
        this._long = $long;
      else
        this._long = false;
      if (hide != null)
        this._hideElementTitle = hide;
      else
        this._hideElementTitle = false;
    },
    static: {"^": "Tag_START,Tag_END,Tag_EMPTY", Tag$: function(dn, type, $long, hide) {
        var t1 = new Z.Tag(null, null, null, null);
        t1.Tag$4(dn, type, $long, hide);
        return t1;
      }}
  },
  Tag_html_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      this.this_0._dn.attributeDialog$0();
      return;
    },
    $isFunction: true
  },
  Tag_html_closure0: {
    "^": "Closure:12;attr_1",
    call$1: function(x) {
      return J.$eq(J.getAttribute$1$x(x, "name"), this.attr_1);
    },
    $isFunction: true
  },
  Tag_html_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      $.page.selectNode$1(0, this.this_2._dn);
      J.preventDefault$0$x($event);
      $event.stopPropagation();
    },
    $isFunction: true
  },
  UndoableEdit: {
    "^": "Object;operation,title>,pos,text,length>,dn<,cutNode,attributes*,subEdits<,updateDisplay",
    attributes$0: function($receiver) {
      return this.attributes.call$0();
    },
    addEdit$1: function(edit) {
      var t1, t2, t3;
      t1 = this.operation;
      if (t1 !== edit.operation)
        return false;
      if (t1 === 0) {
        t1 = this.dn;
        if (!!J.getInterceptor(t1).$isDNText)
          if (edit.text != null)
            if (J.$eq(edit.pos._dn, t1)) {
              t1 = edit.pos._dnOffset;
              if (typeof t1 !== "number")
                return t1.$add();
              t1 = t1 + 1 === this.dn.get$offsetLength();
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      } else
        t1 = false;
      if (t1)
        return true;
      if (this.text == null || edit.text == null)
        return false;
      if (!J.$eq(this.dn, edit.dn))
        return false;
      if (this.operation === 0) {
        t1 = edit.pos._dnOffset;
        t2 = this.pos._dnOffset;
        t3 = J.get$length$asx(this.text);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t1 === t2 + t3;
        t1 = t3;
      } else
        t1 = false;
      if (!t1)
        if (this.operation === 1) {
          t1 = edit.pos._dnOffset;
          t2 = this.pos._dnOffset;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        this.text = H.S(this.text) + H.S(edit.text);
        return true;
      }
      t1 = this.operation;
      if (t1 === 0) {
        t2 = edit.pos._dnOffset;
        t3 = this.pos._dnOffset;
        t3 = t2 == null ? t3 == null : t2 === t3;
        t2 = t3;
      } else
        t2 = false;
      if (!t2)
        if (t1 === 1) {
          t1 = this.pos._dnOffset;
          t2 = edit.pos._dnOffset;
          t3 = J.get$length$asx(edit.text);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = t1 === t2 + t3;
          t1 = t3;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        this.text = H.S(edit.text) + H.S(this.text);
        if (this.operation === 1) {
          t1 = this.pos;
          t2 = t1._dn;
          t1 = t1._dnOffset;
          t3 = J.get$length$asx(edit.text);
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          this.pos = Z.Position$(t2, t1 - t3);
        }
        return true;
      }
      return false;
    },
    doit$0: function() {
      var t1 = this.operation;
      if (t1 === 0)
        this._insert$1(this.updateDisplay);
      else if (t1 === 1)
        this._daxe$_remove$1(this.updateDisplay);
      else if (t1 === 2)
        this._changeAttributes$1(this.updateDisplay);
      else if (t1 === 3)
        for (t1 = this.subEdits, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          t1._current.doit$0();
      this.updateDisplay = true;
    },
    undo$0: function() {
      var t1 = this.operation;
      if (t1 === 0)
        this._daxe$_remove$1(this.updateDisplay);
      else if (t1 === 1)
        this._insert$1(this.updateDisplay);
      else if (t1 === 2)
        this._changeAttributes$1(this.updateDisplay);
      else if (t1 === 3)
        for (t1 = this.subEdits, t1.toString, t1 = H.setRuntimeTypeInfo(new H.ReversedListIterable(t1), [H.getTypeArgumentByIndex(H.setRuntimeTypeInfo(new H.IterableMixinWorkaround(), [H.getTypeArgumentByIndex(t1, 0)]), 0)]), t1 = new H.ListIterator(t1, t1.get$length(t1), 0, null); t1.moveNext$0();)
          t1._current.undo$0();
    },
    _insert$1: function(update) {
      var t1, t2, t3, v, t4, $parent, childrenUpdate, s1, s2, parentToUpdate, newjn, next;
      if (this.text != null) {
        this.pos.moveInsideTextNodeIfPossible$0();
        if (J.get$nodeType$x(this.pos._dn) === 1) {
          t1 = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
          t1.DaxeNode$text$1(this.text);
          this.dn = t1;
          this.text = null;
        }
      }
      t1 = this.text;
      t2 = this.pos;
      if (t1 != null) {
        t3 = H.interceptedTypeCast(t2._dn, "$isDNText");
        v = t3.nodeValue;
        if (v == null)
          v = "";
        t3.nodeValue = J.getInterceptor$s(v).substring$2(v, 0, t2._dnOffset) + H.S(t1) + C.JSString_methods.substring$1(v, t2._dnOffset);
        if (update) {
          this.pos._dn.updateHTML$0();
          t1 = $.page;
          t2 = this.pos;
          t3 = t2._dn;
          t2 = t2._dnOffset;
          t4 = J.get$length$asx(this.text);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = Z.Position$(t3, t2 + t4);
          t1._cursor.moveTo$1(0, t4);
        }
      } else {
        $parent = t2._dn;
        childrenUpdate = H.setRuntimeTypeInfo([], [Z.DaxeNode]);
        childrenUpdate.push(this.dn);
        t1 = J.getInterceptor$x($parent);
        if (t1.get$nodeType($parent) === 3 && J.get$nodeType$x(this.dn) === 3) {
          s1 = J.substring$2$s(t1.get$nodeValue($parent), 0, this.pos._dnOffset);
          s2 = J.substring$1$s(t1.get$nodeValue($parent), this.pos._dnOffset);
          t1.set$nodeValue($parent, s1 + H.S(J.get$nodeValue$x(this.dn)) + s2);
          parentToUpdate = $parent;
        } else if (this.pos._dnOffset === 0)
          if (t1.get$nodeType($parent) === 3) {
            J.insertBefore$2$x(t1.get$parent($parent), this.dn, $parent);
            parentToUpdate = t1.get$parent($parent);
          } else {
            t1.insertBefore$2($parent, this.dn, t1.get$firstChild($parent));
            parentToUpdate = $parent;
          }
        else {
          t2 = $parent.get$offsetLength();
          t3 = this.pos._dnOffset;
          if (t2 == null ? t3 == null : t2 === t3) {
            t1 = $parent.nodeType;
            t2 = this.dn;
            if (t1 === 3) {
              J.insertBefore$2$x($parent.parent, t2, $parent.nextSibling);
              parentToUpdate = $parent.parent;
            } else {
              $parent.appendChild$1(t2);
              parentToUpdate = $parent;
            }
          } else if ($parent.nodeType === 3) {
            if (this.cutNode == null) {
              H.interceptedTypeCast($parent, "$isDNText");
              s1 = J.substring$2$s($parent.nodeValue, 0, t3);
              s2 = J.substring$1$s($parent.nodeValue, t3);
              $parent.nodeValue = s1;
              newjn = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
              newjn.DaxeNode$text$1(s2);
              J.insertBefore$2$x($parent.parent, newjn, $parent.nextSibling);
              this.cutNode = newjn;
            } else {
              $parent.nodeValue = J.substring$2$s($parent.nodeValue, 0, t3);
              $parent.parent.insertAfter$2(this.cutNode, $parent);
            }
            J.insertBefore$2$x($parent.parent, this.dn, this.cutNode);
            childrenUpdate.push($parent);
            childrenUpdate.push(this.cutNode);
            parentToUpdate = $parent.parent;
          } else {
            next = $parent.childAtOffset$1(t3);
            t1.insertBefore$2($parent, this.dn, next);
            parentToUpdate = $parent;
          }
        }
        if (update) {
          if (J.get$nodeType$x(this.dn) === 1)
            this.dn.updateValidity$0();
          parentToUpdate.updateValidity$0();
          parentToUpdate.updateHTMLAfterChildrenChange$1(childrenUpdate);
          t1 = this.dn;
          t2 = J.getInterceptor(t1);
          t3 = $.page;
          if (!!t2.$isDNText) {
            t1 = Z.Position$(t1, J.get$length$asx(t2.get$nodeValue(t1)));
            t3._cursor.moveTo$1(0, t1);
          } else {
            t1 = t2.get$parent(t1);
            t2 = J.get$parent$x(this.dn).offsetOf$1(this.dn);
            if (typeof t2 !== "number")
              return t2.$add();
            t2 = Z.Position$(t1, t2 + 1);
            t3._cursor.moveTo$1(0, t2);
          }
        }
      }
    },
    _daxe$_remove$1: function(update) {
      var t1, t2, t3, $parent, prev, next, childrenUpdate;
      if (this.dn == null && this.text == null) {
        t1 = this.pos;
        if (t1._dnOffset === 0) {
          t1 = t1._dn.get$offsetLength();
          t2 = this.length;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = this.pos;
        if (t1) {
          t1 = t2._dn;
          this.dn = t1;
          this.pos = Z.Position$(J.get$parent$x(t1), J.get$parent$x(this.dn).offsetOf$1(this.dn));
        } else {
          t1 = J.get$nodeValue$x(t2._dn);
          t2 = this.pos._dnOffset;
          t3 = this.length;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          this.text = J.substring$2$s(t1, t2, t2 + t3);
        }
      }
      t1 = this.text;
      if (t1 != null) {
        t2 = this.pos;
        J.remove$2$ax(t2._dn, t2, J.get$length$asx(t1));
        if (update) {
          this.pos._dn.updateHTML$0();
          t1 = $.page;
          t2 = this.pos;
          t1._cursor.moveTo$1(0, t2);
        }
      } else {
        $parent = J.get$parent$x(this.dn);
        if (this.pos == null) {
          if (this.dn.get$previousSibling() != null) {
            t1 = this.dn.get$previousSibling();
            t1 = t1.get$nodeType(t1) === 3;
          } else
            t1 = false;
          t2 = this.dn;
          if (t1)
            this.pos = Z.Position$(t2.get$previousSibling(), this.dn.get$previousSibling().get$offsetLength());
          else
            this.pos = Z.Position$($parent, $parent.offsetOf$1(t2));
        }
        prev = this.dn.get$previousSibling();
        next = this.dn.get$nextSibling();
        $parent.removeChild$1(this.dn);
        childrenUpdate = H.setRuntimeTypeInfo([], [Z.DaxeNode]);
        if (prev != null && prev.get$nodeType(prev) === 3 && next != null && J.get$nodeType$x(next) === 3) {
          this.cutNode = next;
          t1 = J.getInterceptor$x(next);
          prev.set$nodeValue(0, H.S(prev.get$nodeValue(prev)) + H.S(t1.get$nodeValue(next)));
          t1.get$parent(next).removeChild$1(next);
          childrenUpdate.push(prev);
          childrenUpdate.push(this.dn);
          childrenUpdate.push(next);
        } else
          childrenUpdate.push(this.dn);
        if (update) {
          $parent.updateValidity$0();
          $parent.updateHTMLAfterChildrenChange$1(childrenUpdate);
          t1 = $.page;
          t2 = this.pos;
          t1._cursor.moveTo$1(0, t2);
        }
      }
    },
    _changeAttributes$1: function(update) {
      var oldAttributes = J.get$attributes$x(this.dn);
      J.set$attributes$x(this.dn, this.attributes);
      this.attributes = oldAttributes;
      if (update) {
        this.dn.updateValidity$0();
        this.dn.updateAttributes$0();
      }
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      switch (this.operation) {
        case 0:
          sb.write$1("Insert ");
          break;
        case 1:
          sb.write$1("Remove ");
          break;
        case 2:
          sb.write$1("Attributes ");
          break;
        case 3:
          sb.write$1("Compound ");
          break;
      }
      t1 = this.text;
      if (t1 != null)
        sb.write$1("text '" + H.S(t1) + "'");
      else {
        t1 = this.dn;
        if (t1 != null)
          sb.write$1("node " + H.S(J.get$nodeName$x(t1)));
        else if (this.pos != null)
          sb.write$1(H.S(this.length) + " chars at " + J.toString$0(this.pos));
      }
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    UndoableEdit$insertString$3$updateDisplay: function(pos, text, updateDisplay) {
      var t1;
      this.operation = 0;
      this.title = $.Strings_map.$index(0, "undo.insert_text");
      t1 = new Z.Position(null, null);
      t1._dn = pos._dn;
      t1._dnOffset = pos._dnOffset;
      this.pos = t1;
      this.text = text;
      this.dn = null;
      this.cutNode = null;
      this.attributes = null;
      this.subEdits = null;
      this.updateDisplay = updateDisplay;
    },
    UndoableEdit$removeString$3$updateDisplay: function(pos, $length, updateDisplay) {
      var t1;
      this.operation = 1;
      this.title = $.Strings_map.$index(0, "undo.remove_text");
      t1 = new Z.Position(null, null);
      t1._dn = pos._dn;
      t1._dnOffset = pos._dnOffset;
      this.pos = t1;
      this.text = null;
      this.length = $length;
      this.dn = null;
      this.cutNode = null;
      this.attributes = null;
      this.subEdits = null;
      this.updateDisplay = updateDisplay;
    },
    UndoableEdit$removeNode$2$updateDisplay: function(dn, updateDisplay) {
      this.operation = 1;
      this.title = $.Strings_map.$index(0, "undo.remove_element");
      this.pos = null;
      this.text = null;
      this.dn = dn;
      this.cutNode = null;
      this.attributes = null;
      this.subEdits = null;
      this.updateDisplay = updateDisplay;
    },
    UndoableEdit$insertNode$3$updateDisplay: function(pos, dn, updateDisplay) {
      var t1;
      this.operation = 0;
      this.title = $.Strings_map.$index(0, "undo.insert_element");
      t1 = new Z.Position(null, null);
      t1._dn = pos._dn;
      t1._dnOffset = pos._dnOffset;
      this.pos = t1;
      this.text = null;
      this.dn = dn;
      this.cutNode = null;
      this.attributes = null;
      this.subEdits = null;
      this.updateDisplay = updateDisplay;
    },
    UndoableEdit$compound$1: function(title) {
      this.operation = 3;
      this.title = title;
      this.pos = null;
      this.text = null;
      this.dn = null;
      this.cutNode = null;
      this.attributes = null;
      this.subEdits = H.setRuntimeTypeInfo([], [Z.UndoableEdit]);
      this.updateDisplay = true;
    },
    UndoableEdit$changeAttribute$3$updateDisplay: function(dn, attr, updateDisplay) {
      var map;
      this.operation = 2;
      this.title = $.Strings_map.$index(0, "undo.attributes");
      this.pos = null;
      this.text = null;
      this.dn = dn;
      this.cutNode = null;
      map = dn.getAttributesMapCopy$0();
      if (attr.value == null) {
        if (map.$index(0, attr.get$name(attr)) != null)
          map.remove$1(0, attr.get$name(attr));
      } else
        map.$indexSet(0, attr.get$name(attr), attr);
      this.attributes = P.List_List$from(map.get$values(map), true, null);
      this.subEdits = null;
      this.updateDisplay = updateDisplay;
    },
    UndoableEdit$changeAttributes$3$updateDisplay: function(dn, attributes, updateDisplay) {
      this.operation = 2;
      this.title = $.Strings_map.$index(0, "undo.attributes");
      this.pos = null;
      this.text = null;
      this.dn = dn;
      this.cutNode = null;
      this.attributes = attributes;
      this.subEdits = null;
      this.updateDisplay = updateDisplay;
    },
    static: {"^": "UndoableEdit_INSERT,UndoableEdit_REMOVE,UndoableEdit_ATTRIBUTES,UndoableEdit_COMPOUND", UndoableEdit$insertString: function(pos, text, updateDisplay) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$insertString$3$updateDisplay(pos, text, updateDisplay);
        return t1;
      }, UndoableEdit$removeString: function(pos, $length, updateDisplay) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$removeString$3$updateDisplay(pos, $length, updateDisplay);
        return t1;
      }, UndoableEdit$insertNode: function(pos, dn, updateDisplay) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$insertNode$3$updateDisplay(pos, dn, updateDisplay);
        return t1;
      }, UndoableEdit$removeNode: function(dn, updateDisplay) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$removeNode$2$updateDisplay(dn, updateDisplay);
        return t1;
      }, UndoableEdit$changeAttributes: function(dn, attributes, updateDisplay) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$changeAttributes$3$updateDisplay(dn, attributes, updateDisplay);
        return t1;
      }, UndoableEdit$changeAttribute: function(dn, attr, updateDisplay) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$changeAttribute$3$updateDisplay(dn, attr, updateDisplay);
        return t1;
      }, UndoableEdit$compound: function(title) {
        var t1 = new Z.UndoableEdit(null, null, null, null, null, null, null, null, null, null);
        t1.UndoableEdit$compound$1(title);
        return t1;
      }}
  },
  WebPage: {
    "^": "Object;_insertP,_cursor,selectionStart,selectionEnd,mbar,undoMenu,redoMenu,contextualMenu,lastClickPosition,lastClickTime,selectionByWords",
    openDocument$2: function(filePath, configPath) {
      $.doc.openDocument$2(filePath, configPath).then$2$onError(new Z.WebPage_openDocument_closure(this, filePath), new Z.WebPage_openDocument_closure0());
    },
    openDocumentFromPost$1: function(configPath) {
      $.doc.openDocumentFromPost$1(configPath).then$2$onError(new Z.WebPage_openDocumentFromPost_closure(this), new Z.WebPage_openDocumentFromPost_closure0());
    },
    init$0: function() {
      var divdoc, t1, pos, t2;
      divdoc = document.querySelector("#doc2");
      t1 = J.getInterceptor$x(divdoc);
      t1.get$children(divdoc).clear$0(0);
      divdoc.appendChild(J.html$0$x($.doc.dndoc));
      pos = Z.Position$($.doc.dndoc, 0);
      this._cursor.moveTo$1(0, pos);
      this._insertP.update$1(this._cursor.selectionStart);
      this.updateMenus$0();
      this.updatePath$0();
      t2 = t1.get$onMouseDown(divdoc);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.WebPage_init_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = t1.get$onMouseMove(divdoc);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.WebPage_init_closure0(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = t1.get$onMouseUp(divdoc);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.WebPage_init_closure1(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1 = t1.get$onContextMenu(divdoc);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.WebPage_init_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onScroll$x(document.querySelector("#doc1"));
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.WebPage_init_closure3(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = H.setRuntimeTypeInfo(new W._EventStream(document, "mouseup", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new Z.WebPage_init_closure4(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    _buildMenus$0: function() {
      var t1, fileMenu, item, editMenu, findMenu, divdoc1, shortcuts;
      t1 = $.doc;
      this.mbar = t1.cfg.makeMenus$1(t1);
      t1 = $.Strings_map.$index(0, "menu.file");
      fileMenu = new Z.Menu(null, null, t1, null, null, null, null, null, null, null);
      fileMenu.MenuItem$4$data$shortcut(t1, null, null, null);
      fileMenu.items = H.setRuntimeTypeInfo([], [Z.MenuItem]);
      if ($.doc.saveURL != null) {
        item = Z.MenuItem$($.Strings_map.$index(0, "menu.save"), new Z.WebPage__buildMenus_closure(this), null, null);
        item.parent = fileMenu;
        fileMenu.items.push(item);
      }
      if ($.doc.textAreaId != null) {
        item = Z.MenuItem$($.Strings_map.$index(0, "menu.finish"), new Z.WebPage__buildMenus_closure0(this), null, "Q");
        item.parent = fileMenu;
        fileMenu.items.push(item);
      }
      item = Z.MenuItem$($.Strings_map.$index(0, "menu.source"), new Z.WebPage__buildMenus_closure1(this), null, null);
      item.parent = fileMenu;
      fileMenu.items.push(item);
      C.JSArray_methods.insert$2(this.mbar.menus, 0, fileMenu);
      t1 = $.Strings_map.$index(0, "menu.edit");
      editMenu = new Z.Menu(null, null, t1, null, null, null, null, null, null, null);
      editMenu.MenuItem$4$data$shortcut(t1, null, null, null);
      editMenu.items = H.setRuntimeTypeInfo([], [Z.MenuItem]);
      t1 = Z.MenuItem$($.Strings_map.$index(0, "undo.undo"), new Z.WebPage__buildMenus_closure2(), null, "Z");
      this.undoMenu = t1;
      t1.enabled = false;
      t1.parent = editMenu;
      editMenu.items.push(t1);
      t1 = Z.MenuItem$($.Strings_map.$index(0, "undo.redo"), new Z.WebPage__buildMenus_closure3(), null, "Y");
      this.redoMenu = t1;
      t1.enabled = false;
      t1.parent = editMenu;
      editMenu.items.push(t1);
      findMenu = Z.MenuItem$($.Strings_map.$index(0, "find.find_replace"), new Z.WebPage__buildMenus_closure4(), null, "F");
      findMenu.parent = editMenu;
      editMenu.items.push(findMenu);
      C.JSArray_methods.insert$2(this.mbar.menus, 1, editMenu);
      divdoc1 = document.querySelector("#doc1");
      divdoc1.parentElement.insertBefore(this.mbar.html$0(0), divdoc1);
      shortcuts = P.HashMap_HashMap(null, null, null, P.String, {func: "void_", void: true});
      for (t1 = this.mbar.menus, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        this.addShortcuts$2(t1._current, shortcuts);
      this._cursor.setShortcuts$1(shortcuts);
    },
    addShortcuts$2: function(menu, shortcuts) {
      var t1, item;
      for (t1 = menu.get$items(), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        item = t1._current;
        if (item.get$shortcut() != null && item.action != null)
          shortcuts.$indexSet(0, item.shortcut, item.action);
        if (!!item.$isMenu)
          this.addShortcuts$2(item, shortcuts);
      }
    },
    onMouseDown$1: function(_, $event) {
      var t1, t2, positions;
      t1 = J.getInterceptor$x($event);
      if (!!J.getInterceptor(t1.get$target($event)).$isImageElement || !!J.getInterceptor(t1.get$target($event)).$isButtonElement || !!J.getInterceptor(t1.get$target($event)).$isTextInputElement || !!J.getInterceptor(t1.get$target($event)).$isSelectElement)
        return;
      if (t1.get$button($event) === 1)
        return;
      $event.preventDefault();
      if ($event.button === 2)
        return;
      if ($event.shiftKey === true) {
        t1 = this._cursor.selectionStart;
        t2 = new Z.Position(null, null);
        t2._dn = t1._dn;
        t2._dnOffset = t1._dnOffset;
        this.selectionStart = t2;
        t2 = Z.Cursor_findPosition($event);
        this.selectionEnd = t2;
        if (t2 != null)
          this._cursor.setSelection$2(this.selectionStart, t2);
      } else {
        t1 = Z.Cursor_findPosition($event);
        this.selectionStart = t1;
        if (t1 != null)
          if (J.$eq(this.lastClickPosition, t1)) {
            t1 = this.lastClickTime;
            t2 = Date.now();
            new P.DateTime(t2, false).DateTime$_now$0();
            t1 = Math.abs(C.JSNumber_methods._tdivFast$1(P.Duration$(0, 0, 0, t1.millisecondsSinceEpoch - t2, 0, 0)._duration, 1000)) < 400 && J.get$nodeType$x(this.selectionStart._dn) !== 1;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          positions = this._extendPositionOnWord$1(this.selectionStart);
          t1 = positions.length;
          if (0 >= t1)
            return H.ioore(positions, 0);
          t2 = positions[0];
          this.selectionStart = t2;
          if (1 >= t1)
            return H.ioore(positions, 1);
          t1 = positions[1];
          this.selectionEnd = t1;
          this._cursor.setSelection$2(t2, t1);
          this.selectionByWords = true;
        }
      }
    },
    onMouseMove$1: function(_, $event) {
      var newpos, t1, positions, t2;
      if (this.selectionStart == null)
        return;
      if (this.contextualMenu != null)
        return;
      newpos = Z.Cursor_findPosition($event);
      if (this.selectionByWords) {
        if (this.selectionEnd.$gt(0, this.selectionStart)) {
          t1 = this.selectionStart;
          t1 = newpos.$lt(0, t1) === true || newpos.$eq(0, t1);
        } else
          t1 = false;
        if (t1)
          this.selectionStart = this.selectionEnd;
        else {
          if (this.selectionEnd.$lt(0, this.selectionStart) === true) {
            t1 = this.selectionStart;
            t1 = newpos.$gt(0, t1) || newpos.$eq(0, t1);
          } else
            t1 = false;
          if (t1)
            this.selectionStart = this.selectionEnd;
        }
      }
      this.selectionEnd = newpos;
      if (this.selectionStart != null && newpos != null) {
        if (this.selectionByWords && J.get$nodeType$x(newpos._dn) !== 1) {
          positions = this._extendPositionOnWord$1(this.selectionEnd);
          t1 = this.selectionEnd.$gt(0, this.selectionStart);
          t2 = positions.length;
          if (t1) {
            if (1 >= t2)
              return H.ioore(positions, 1);
            this.selectionEnd = positions[1];
          } else {
            if (0 >= t2)
              return H.ioore(positions, 0);
            this.selectionEnd = positions[0];
          }
        }
        this._cursor.setSelection$2(this.selectionStart, this.selectionEnd);
      }
      J.preventDefault$0$x($event);
    },
    _extendPositionOnWord$1: function(pos) {
      var positions, s, i1, t1, i10, i2, t2;
      positions = H.setRuntimeTypeInfo([], [Z.Position]);
      s = J.get$nodeValue$x(pos._dn);
      i1 = pos._dnOffset;
      t1 = J.getInterceptor$asx(s);
      i10 = i1;
      while (true) {
        if (typeof i10 !== "number")
          return i10.$gt();
        if (!(i10 > 0 && C.JSString_methods.indexOf$1(" \n,;:.?!/()[]{}", t1.$index(s, i10 - 1)) === -1))
          break;
        --i10;
      }
      i2 = i1;
      while (true) {
        t2 = t1.get$length(s);
        if (typeof i2 !== "number")
          return i2.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i2 < t2 && C.JSString_methods.indexOf$1(" \n,;:.?!/()[]{}", t1.$index(s, i2)) === -1))
          break;
        ++i2;
      }
      positions.push(Z.Position$(pos._dn, i10));
      positions.push(Z.Position$(pos._dn, i2));
      return positions;
    },
    onMouseUp$1: function(_, $event) {
      var t1, t2;
      t1 = J.getInterceptor$x($event);
      if (!!J.getInterceptor(t1.get$target($event)).$isImageElement || !!J.getInterceptor(t1.get$target($event)).$isButtonElement || !!J.getInterceptor(t1.get$target($event)).$isTextInputElement || !!J.getInterceptor(t1.get$target($event)).$isSelectElement)
        return;
      if (!this.selectionByWords)
        this.selectionEnd = Z.Cursor_findPosition($event);
      this.lastClickPosition = null;
      t2 = this.selectionStart;
      if (t2 != null && this.selectionEnd != null) {
        if (!this.selectionByWords)
          this._cursor.setSelection$2(t2, this.selectionEnd);
        if (J.$eq(this.selectionStart, this.selectionEnd)) {
          this.lastClickPosition = this.selectionStart;
          t2 = new P.DateTime(Date.now(), false);
          t2.DateTime$_now$0();
          this.lastClickTime = t2;
        }
      }
      this.selectionStart = null;
      this.selectionEnd = null;
      this.selectionByWords = false;
      t1.preventDefault$0($event);
    },
    onContextMenu$1: function(_, $event) {
      var newpos, t1, t2;
      if (J.get$shiftKey$x($event) === true)
        return;
      newpos = Z.Cursor_findPosition($event);
      if (newpos != null) {
        $event.preventDefault();
        t1 = this._cursor;
        t2 = t1.selectionStart;
        if (t2 != null)
          if (t1.selectionEnd != null)
            if (!(newpos.$lt(0, t2) === true && newpos.$lt(0, this._cursor.selectionEnd) === true))
              t1 = newpos.$gt(0, this._cursor.selectionStart) && newpos.$gt(0, this._cursor.selectionEnd);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          this._cursor.setSelection$2(newpos, newpos);
        if (this._cursor.selectionStart != null)
          this.showContextualMenu$1($event);
      }
    },
    showContextualMenu$1: function($event) {
      var t1, t2, t3, $parent, refs, validRefs, ref, $name, item, title, div;
      t1 = {};
      if ($.doc.cfg == null || this._cursor.selectionStart._dn == null)
        return;
      t1.parent_0 = null;
      t2 = this._cursor.selectionStart._dn;
      t3 = J.getInterceptor(t2);
      if (!!t3.$isDNText) {
        $parent = t3.get$parent(t2);
        t1.parent_0 = $parent;
        t2 = $parent;
      } else
        t1.parent_0 = t2;
      refs = $.doc.elementsAllowedUnder$1(t2);
      validRefs = $.doc.validElementsInSelection$1(refs);
      t2 = new Z.Menu(null, null, null, null, null, null, null, null, null, null);
      t2.MenuItem$4$data$shortcut(null, null, null, null);
      t2.items = H.setRuntimeTypeInfo([], [Z.MenuItem]);
      this.contextualMenu = t2;
      for (t2 = new H.ListIterator(validRefs, validRefs.length, 0, null); t2.moveNext$0();) {
        ref = t2._current;
        $name = $.doc.cfg._elementsToNamesCache.$index(0, ref);
        item = new Z.MenuItem(null, $.doc.cfg.menuTitle$1($name), null, new Z.WebPage_showContextualMenu_closure(ref), null, null, null, null, null);
        item.id = "menu_" + $.MenuItem_idcount;
        $.MenuItem_idcount = $.MenuItem_idcount + 1;
        item.parent = null;
        item.enabled = true;
        item.is_separator = false;
        t3 = this.contextualMenu;
        t3.toString;
        item.parent = t3;
        t3.items.push(item);
      }
      t2 = this.contextualMenu.items;
      t3 = new Z.MenuItem(null, null, null, null, null, null, null, null, null);
      t3.is_separator = true;
      t2.push(t3);
      if (t1.parent_0.get$ref() != null) {
        title = $.doc.cfg.menuTitle$1(J.get$nodeName$x(t1.parent_0));
        title = H.S($.Strings_map.$index(0, "contextual.help_about_element")) + " " + H.S(title);
        t2 = this.contextualMenu;
        t1 = Z.MenuItem$(title, new Z.WebPage_showContextualMenu_closure0(t1), null, null);
        t2.toString;
        t1.parent = t2;
        t2.items.push(t1);
      }
      div = this.contextualMenu.html$0(0);
      J.set$position$x(div.style, "fixed");
      J.set$display$x(div.style, "block");
      J.set$left$x(div.style, H.S(J.get$client$x($event).x) + "px");
      J.set$top$x(div.style, H.S(H.setRuntimeTypeInfo(new P.Point($event.clientX, $event.clientY), [null]).y) + "px");
      document.body.appendChild(div);
    },
    selectNode$1: function(_, dn) {
      var offset, p1, t1, p2;
      offset = dn.parent.offsetOf$1(dn);
      p1 = Z.Position$(dn.parent, offset);
      t1 = dn.parent;
      if (typeof offset !== "number")
        return offset.$add();
      p2 = Z.Position$(t1, offset + 1);
      this._cursor.moveTo$1(0, p1);
      this._cursor.setSelection$2(p1, p2);
      this._insertP.update$1(this._cursor.selectionStart);
      this.updateMenus$0();
      this.updatePath$0();
    },
    updateMenus$0: function() {
      var $parent, refs, validRefs, menus, t1, t2, item, t3;
      $parent = this._cursor.selectionStart._dn;
      if (!!J.getInterceptor($parent).$isDNText)
        $parent = $parent.parent;
      refs = $.doc.elementsAllowedUnder$1($parent);
      validRefs = $.doc.validElementsInSelection$1(refs);
      menus = this.mbar.menus;
      for (t1 = new H.ListIterator(menus, menus.length, 0, null); t1.moveNext$0();)
        for (t2 = t1._current.get$items(), t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
          item = t2._current;
          t3 = J.getInterceptor$x(item);
          if (!!J.getInterceptor(t3.get$data(item)).$isElement)
            if (C.JSArray_methods.contains$1(validRefs, t3.get$data(item)))
              item.enable$0();
            else
              item.disable$0();
        }
    },
    updatePath$0: function() {
      var div_path, t1;
      div_path = document.querySelector("div#path");
      t1 = this._cursor.selectionStart;
      if (t1 == null)
        div_path.textContent = "";
      else
        div_path.textContent = t1.xPath$0();
    },
    updateUndoMenus$0: function() {
      if ($.doc.undoPosition >= 0) {
        var t1 = this.undoMenu;
        if (t1.enabled !== true)
          t1.enable$0();
      } else {
        t1 = this.undoMenu;
        if (t1.enabled === true)
          t1.disable$0();
      }
      t1 = $.doc;
      if (t1.undoPosition < t1.edits.length - 1) {
        t1 = this.redoMenu;
        if (t1.enabled !== true)
          t1.enable$0();
      } else {
        t1 = this.redoMenu;
        if (t1.enabled === true)
          t1.disable$0();
      }
      this.undoMenu.set$title(0, $.doc.getUndoTitle$0());
      this.redoMenu.set$title(0, $.doc.getRedoTitle$0());
    },
    save$0: function(_) {
      $.doc.saveOnWebJaxe$0().then$2$onError(new Z.WebPage_save_closure(), new Z.WebPage_save_closure0());
    },
    WebPage$0: function() {
      this._insertP = new Z.InsertPanel();
      this._cursor = Z.Cursor$();
      this.lastClickPosition = null;
      this.lastClickTime = null;
      this.selectionByWords = false;
    },
    static: {"^": "WebPage_doubleClickTime"}
  },
  WebPage_openDocument_closure: {
    "^": "Closure:12;this_0,filePath_1",
    call$1: function(_) {
      var t1 = this.this_0;
      t1._buildMenus$0();
      t1.init$0();
      document.title = C.JSArray_methods.get$last(J.split$1$s(this.filePath_1, "/"));
    },
    $isFunction: true
  },
  WebPage_openDocument_closure0: {
    "^": "Closure:35;",
    call$1: function(ex) {
      document.querySelector("#doc2").textContent = "Error reading the document: " + H.S(ex);
    },
    $isFunction: true
  },
  WebPage_openDocumentFromPost_closure: {
    "^": "Closure:12;this_0",
    call$1: function(_) {
      var t1 = this.this_0;
      t1._buildMenus$0();
      t1.init$0();
      document.title = "x";
    },
    $isFunction: true
  },
  WebPage_openDocumentFromPost_closure0: {
    "^": "Closure:35;",
    call$1: function(ex) {
      document.querySelector("#doc2").textContent = "Error reading the document: " + H.S(ex);
    },
    $isFunction: true
  },
  WebPage_init_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.onMouseDown$1(0, $event);
    },
    $isFunction: true
  },
  WebPage_init_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.onMouseMove$1(0, $event);
    },
    $isFunction: true
  },
  WebPage_init_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      return this.this_2.onMouseUp$1(0, $event);
    },
    $isFunction: true
  },
  WebPage_init_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.onContextMenu$1(0, $event);
    },
    $isFunction: true
  },
  WebPage_init_closure3: {
    "^": "Closure:28;this_4",
    call$1: function($event) {
      this.this_4._cursor.updateCaretPosition$1(false);
      return;
    },
    $isFunction: true
  },
  WebPage_init_closure4: {
    "^": "Closure:29;this_5",
    call$1: function($event) {
      var t1, t2;
      t1 = this.this_5;
      t2 = t1.contextualMenu;
      if (t2 != null) {
        t2 = "#menu_" + H.S(t2.id);
        J.remove$0$ax(document.querySelector(t2));
        t1.contextualMenu = null;
        J.preventDefault$0$x($event);
      }
    },
    $isFunction: true
  },
  WebPage__buildMenus_closure: {
    "^": "Closure:10;this_0",
    call$0: function() {
      return this.this_0.save$0(0);
    },
    $isFunction: true
  },
  WebPage__buildMenus_closure0: {
    "^": "Closure:10;this_1",
    call$0: function() {
      var t1 = $.doc;
      t1.toString;
      J.postMessage$2$x(W._convertNativeToDart_Window(window.parent), J.toString$0(t1.dndoc), window.location.href);
      return;
    },
    $isFunction: true
  },
  WebPage__buildMenus_closure1: {
    "^": "Closure:10;this_2",
    call$0: function() {
      new Z.SourceWindow().show$0(0);
      return;
    },
    $isFunction: true
  },
  WebPage__buildMenus_closure2: {
    "^": "Closure:10;",
    call$0: function() {
      return $.doc.undo$0();
    },
    $isFunction: true
  },
  WebPage__buildMenus_closure3: {
    "^": "Closure:10;",
    call$0: function() {
      return $.doc.redo$0();
    },
    $isFunction: true
  },
  WebPage__buildMenus_closure4: {
    "^": "Closure:10;",
    call$0: function() {
      return new Z.FindDialog().show$0(0);
    },
    $isFunction: true
  },
  WebPage_showContextualMenu_closure: {
    "^": "Closure:10;ref_1",
    call$0: function() {
      return $.doc.insertNewNode$2(this.ref_1, "element");
    },
    $isFunction: true
  },
  WebPage_showContextualMenu_closure0: {
    "^": "Closure:10;box_0",
    call$0: function() {
      return new Z.HelpDialog(this.box_0.parent_0.get$ref(), null).show$0(0);
    },
    $isFunction: true
  },
  WebPage_save_closure: {
    "^": "Closure:12;",
    call$1: function(_) {
      window.alert($.Strings_map.$index(0, "save.success"));
    },
    $isFunction: true
  },
  WebPage_save_closure0: {
    "^": "Closure:35;",
    call$1: function(ex) {
      window.alert(J.$add$ns(J.$add$ns($.Strings_map.$index(0, "save.error"), ": "), J.get$message$x(ex)));
    },
    $isFunction: true
  }
},
1],
["equations", "equations/equations.dart", , B, {
  "^": "",
  MathElement: {
    "^": "Object;parent*",
    addMathElement$1: function(child) {
      if (child != null) {
        this.children.push(child);
        child.setMathBase$1(this.base);
        child.parent = this;
        child.setFontSize$1(this.fontsize);
      }
    },
    getMathElement$1: function(index) {
      var t1;
      if (index < this.children.length) {
        t1 = this.children;
        if (index >= t1.length)
          return H.ioore(t1, index);
        return t1[index];
      }
      return;
    },
    addText$1: function(text) {
      var t1, t2, i, t3, str;
      t1 = J.getInterceptor$asx(text);
      t2 = this.text;
      i = 0;
      while (true) {
        t3 = t1.get$length(text);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        if (C.JSString_methods.indexOf$1(" \t\n\r", t1.$index(text, i)) < 0) {
          str = t1.$index(text, i);
          t2._contents += typeof str === "string" ? str : H.S(str);
        } else if (" " === t1.$index(text, i) && i > 0 && " " !== t1.$index(text, i - 1)) {
          str = t1.$index(text, i);
          t2._contents += typeof str === "string" ? str : H.S(str);
        }
        ++i;
      }
    },
    setMathBase$1: function(base) {
      var t1;
      this.base = base;
      for (t1 = this.children, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1._current.setMathBase$1(base);
    },
    getParent$0: function() {
      return this.parent;
    },
    setFontSize$1: function(fontsize) {
      var t1;
      this.fontsize = P.max(fontsize, 8);
      for (t1 = this.children, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1._current.setFontSize$1(this.fontsize);
    },
    getFont$0: function() {
      var t1 = this.base;
      if (t1 != null)
        return t1.getFont$1(this.fontsize);
      return;
    },
    getItalicFont$0: function() {
      var t1 = this.base;
      if (t1 != null)
        return t1.getFont$2(this.fontsize, 2);
      return;
    },
    getBoldFont$0: function() {
      var t1 = this.base;
      if (t1 != null)
        return t1.getFont$2(this.fontsize, 1);
      return;
    },
    getBoldItalicFont$0: function() {
      var t1 = this.base;
      if (t1 != null)
        return t1.getFont$2(this.fontsize, 3);
      return;
    },
    getFontMetrics$0: function() {
      var t1 = this.base;
      if (t1 != null)
        return t1.getFontMetrics$1(this.fontsize);
      return;
    },
    debug$3: function(context, posX, posY) {
      var t1, t2;
      context.strokeStyle = "blue";
      context.beginPath();
      context.moveTo(posX, posY - this.getAscentHeight$1(true));
      t1 = this.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      context.lineTo(posX + t1, posY - this.getAscentHeight$1(true));
      t1 = this.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      context.moveTo(posX + t1, posY - this.getAscentHeight$1(true));
      t1 = this.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = this.getDescentHeight$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      context.lineTo(posX + t1, posY + t2);
      t2 = this.getDescentHeight$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      context.moveTo(posX, posY + t2);
      t2 = this.getWidth$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1 = this.getDescentHeight$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      context.lineTo(posX + t2, posY + t1);
      context.moveTo(posX, posY - this.getAscentHeight$1(true));
      t1 = this.getDescentHeight$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      context.lineTo(posX, posY + t1);
      context.stroke();
      context.strokeStyle = "red";
      context.beginPath();
      context.moveTo(posX, posY);
      t1 = this.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      context.lineTo(posX + t1, posY);
      context.stroke();
      context.strokeStyle = "black";
    },
    paint$3: function(context, posX, posY) {
      var t1, pos, i, child, t2;
      if (this.base._debug)
        this.debug$3(context, posX, posY);
      for (t1 = this.children, pos = posX, i = 0; i < t1.length; ++i) {
        child = this.getMathElement$1(i);
        child.paint$3(context, pos, posY);
        t2 = child.getWidth$1(true);
        if (typeof t2 !== "number")
          return t2.$add();
        pos += t2 + 2;
      }
    },
    getWidth$1: function(dynamicParts) {
      var t1, width, t2;
      for (t1 = this.children, t1 = new H.ListIterator(t1, t1.length, 0, null), width = 0; t1.moveNext$0();) {
        t2 = t1._current.getWidth$1(dynamicParts);
        if (typeof t2 !== "number")
          return t2.$add();
        width += t2 + 2;
      }
      return width - 2;
    },
    getHeight$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getAscentHeight$1(dynamicParts);
      t2 = this.getDescentHeight$1(dynamicParts);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    getRealAscentHeight$0: function() {
      return this.getAscentHeight$1(true);
    },
    getAscentHeight$1: function(dynamicParts) {
      var t1, height;
      for (t1 = this.children, t1 = new H.ListIterator(t1, t1.length, 0, null), height = 0; t1.moveNext$0();)
        height = P.max(height, t1._current.getAscentHeight$1(dynamicParts));
      return height;
    },
    getDescentHeight$1: function(dynamicParts) {
      var t1, height;
      for (t1 = this.children, t1 = new H.ListIterator(t1, t1.length, 0, null), height = 0; t1.moveNext$0();)
        height = P.max(height, t1._current.getDescentHeight$1(dynamicParts));
      return height;
    },
    MathElement$2: function(base, fontsize) {
    }
  },
  MathFrac: {
    "^": "MathElement;_linethickness,base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      var e1, e2, middle, width, t1, t2, y;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      middle = posY - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
      width = this.getWidth$1(true);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = e1.getDescentHeight$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      e1.paint$3(context, posX + (width - t1) / 2, middle - t2 - 1);
      t2 = this._linethickness;
      context.lineWidth = t2;
      context.beginPath();
      y = middle - t2 / 2;
      if (t2 === 1)
        y = Math.floor(y) + 0.5;
      context.moveTo(posX + 1, y);
      context.lineTo(posX + width - 1, y);
      context.stroke();
      context.lineWidth = 1;
      t1 = e2.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      e2.paint$3(context, posX + (width - t1) / 2, middle + e2.getAscentHeight$1(true) + 1);
    },
    getWidth$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getWidth$1(dynamicParts), this.getMathElement$1(1).getWidth$1(dynamicParts)) + 4;
    },
    getHeight$1: function(dynamicParts) {
      return this.getAscentHeight$1(true) + this.getDescentHeight$1(true);
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getHeight$1(true) + 1 + this._linethickness / 2 + this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
    },
    getDescentHeight$1: function(dynamicParts) {
      return P.max(0, this.getMathElement$1(1).getHeight$1(true) + 1 + this._linethickness / 2 - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3);
    },
    static: {"^": "MathFrac_ELEMENT,MathFrac_ATTRIBUTE_LINETHICKNESS"}
  },
  MathIdentifier: {
    "^": "MathText;_mathvariant,base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      var t1, s, f;
      t1 = this.text._contents;
      s = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
      t1 = this._mathvariant;
      if (t1 === "italic")
        f = this.getItalicFont$0();
      else if (t1 === "bold")
        f = this.getBoldFont$0();
      else
        f = t1 === "bold-italic" ? this.getBoldItalicFont$0() : this.getFont$0();
      context.font = f;
      C.CanvasRenderingContext2D_methods.fillText$3(context, s, posX, posY);
    },
    getFont$0: function() {
      var t1 = this.base;
      if (t1 != null)
        return t1.getFont$2(this.fontsize, 2);
      return;
    },
    $isMathIdentifier: true,
    static: {"^": "MathIdentifier_ELEMENT,MathIdentifier_ATTRIBUTE_MATHVARIANT"}
  },
  MathNumber: {
    "^": "MathText;base,parent,fontsize,children,text",
    static: {"^": "MathNumber_ELEMENT"}
  },
  MathOperator: {
    "^": "MathElement;_stretchy,_lspace,_rspace,base,parent,fontsize,children,text",
    paintDelimiter$6: function(context, posX, posY, upperSymbol, middleSymbol, lowerSymbol) {
      var height, aheight, topMetrics, midMetrics, botMetrics, t1, topHeight, t2, t3, t4, botHeight, t5, sy;
      context.font = this.getFont$0();
      height = this.getExpr$0().getHeight$1(false);
      aheight = this.getExpr$0().getAscentHeight$1(false);
      topMetrics = B.TextMetrics$(upperSymbol, this.getFont$0());
      midMetrics = B.TextMetrics$(middleSymbol, this.getFont$0());
      botMetrics = B.TextMetrics$(lowerSymbol, this.getFont$0());
      t1 = topMetrics.actualBoundingBoxAscent;
      topHeight = t1 + topMetrics.actualBoundingBoxDescent;
      t2 = midMetrics.actualBoundingBoxAscent;
      t3 = midMetrics.actualBoundingBoxDescent;
      t4 = botMetrics.actualBoundingBoxAscent;
      botHeight = t4 + botMetrics.actualBoundingBoxDescent;
      t5 = height - topHeight - botHeight;
      if (t5 > 0) {
        sy = (t5 + 2) / (t2 + t3);
        context.save();
        context.scale(1, sy);
        C.CanvasRenderingContext2D_methods.fillText$3(context, middleSymbol, posX, (posY - aheight + topHeight) / sy + t2);
        context.restore();
      }
      C.CanvasRenderingContext2D_methods.fillText$3(context, upperSymbol, posX, posY - aheight + t1);
      C.CanvasRenderingContext2D_methods.fillText$3(context, lowerSymbol, posX, posY + height - aheight - C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(botHeight - t4)));
    },
    paintCurlyDelimiter$7: function(context, posX, posY, upperSymbol, middleSymbol, connectSymbol, lowerSymbol) {
      var height, metrics, cheight, halfcount, i, t1;
      height = this.getExpr$0().getHeight$1(false);
      context.fillStyle = "black";
      context.font = this.getFont$0();
      metrics = B.TextMetrics$(connectSymbol, this.getFont$0());
      cheight = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;
      halfcount = C.JSNumber_methods.toInt$0(Math.floor(height / cheight / 2));
      for (i = 1; i < halfcount; ++i) {
        t1 = cheight * i;
        context.fillText(connectSymbol, posX, posY - t1);
        context.fillText(connectSymbol, posX, posY + t1);
      }
      C.CanvasRenderingContext2D_methods.fillText$3(context, middleSymbol, posX, posY);
      t1 = cheight * halfcount;
      C.CanvasRenderingContext2D_methods.fillText$3(context, upperSymbol, posX, posY - t1);
      C.CanvasRenderingContext2D_methods.fillText$3(context, lowerSymbol, posX, posY + t1);
    },
    paintCurlyDelimiterHorizontal$7: function(context, posX, posY, upperSymbol, middleSymbol, connectSymbol, lowerSymbol) {
      var height, t1, ascent, halfcount, i;
      height = this.parent.getWidth$1(true);
      t1 = this.base.getFontMetrics$1(this.fontsize).ascent;
      context.save();
      context.fillStyle = "black";
      context.font = this.getFont$0();
      context.translate(posX, posY);
      context.rotate(1.5707963267948966);
      context.translate(-posX, -(posY - t1 * 0.3));
      ascent = this.getFontMetrics$0().ascent - 1;
      if (typeof height !== "number")
        return height.$div();
      halfcount = C.JSInt_methods._tdivFast$1(C.JSNumber_methods.toInt$0(Math.floor(height / ascent)), 2);
      for (i = 1; i < halfcount; ++i) {
        t1 = ascent * i;
        context.fillText(connectSymbol, posX, posY - t1);
        context.fillText(connectSymbol, posX, posY + t1);
      }
      C.CanvasRenderingContext2D_methods.fillText$3(context, middleSymbol, posX, posY);
      t1 = ascent * halfcount;
      C.CanvasRenderingContext2D_methods.fillText$3(context, upperSymbol, posX, posY - t1);
      C.CanvasRenderingContext2D_methods.fillText$3(context, lowerSymbol, posX, posY + t1);
      context.restore();
    },
    paint$3: function(context, posX, posY) {
      var empix, t1, t2, ascent, descent, height, width;
      if (this._lspace !== 0) {
        empix = this.base.stringWidth$2("A", this.getFont$0());
        t1 = this._lspace;
        if (typeof empix !== "number")
          return H.iae(empix);
        posX += t1 * empix;
      }
      t1 = this.text;
      t2 = t1._contents;
      if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
        t2 = t1._contents;
        t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = C.JSString_methods.indexOf$1("[{(|)}]\u222b", t2[0]) >= 0 && this._stretchy;
      } else
        t2 = false;
      if (t2) {
        ascent = this.parent.getAscentHeight$1(false);
        descent = this.parent.getDescentHeight$1(false);
        if (typeof descent !== "number")
          return H.iae(descent);
        height = ascent + descent - 1;
        t2 = t1._contents;
        if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "(")
          if (height < this.getFontMetrics$0().height) {
            context.font = this.getFont$0();
            t1 = t1._contents;
            C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
          } else
            this.paintDelimiter$6(context, posX, posY, "\u239b", "\u239c", "\u239d");
        else {
          t2 = t1._contents;
          if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === ")")
            if (height < this.getFontMetrics$0().height) {
              context.font = this.getFont$0();
              t1 = t1._contents;
              C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
            } else
              this.paintDelimiter$6(context, posX, posY, "\u239e", "\u239f", "\u23a0");
          else {
            t2 = t1._contents;
            if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "[")
              if (height < this.getFontMetrics$0().height) {
                context.font = this.getFont$0();
                t1 = t1._contents;
                C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
              } else
                this.paintDelimiter$6(context, posX, posY, "\u23a1", "\u23a2", "\u23a3");
            else {
              t2 = t1._contents;
              if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "]")
                if (height < this.getFontMetrics$0().height) {
                  context.font = this.getFont$0();
                  t1 = t1._contents;
                  C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
                } else
                  this.paintDelimiter$6(context, posX, posY, "\u23a4", "\u23a5", "\u23a6");
              else {
                t2 = t1._contents;
                if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "{")
                  if (height < this.getFontMetrics$0().height) {
                    context.font = this.getFont$0();
                    t1 = t1._contents;
                    C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
                  } else
                    this.paintCurlyDelimiter$7(context, posX, posY, "\u23a7", "\u23a8", "\u23aa", "\u23a9");
                else {
                  t2 = t1._contents;
                  if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "}")
                    if (height < this.getFontMetrics$0().height) {
                      context.font = this.getFont$0();
                      t1 = t1._contents;
                      C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
                    } else
                      this.paintCurlyDelimiter$7(context, posX, posY, "\u23ab", "\u23ac", "\u23aa", "\u23ad");
                  else {
                    t2 = t1._contents;
                    if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "|") {
                      context.beginPath();
                      t1 = posX + 2;
                      context.moveTo(t1, posY - ascent);
                      context.lineTo(t1, posY + descent);
                      context.stroke();
                    } else {
                      t1 = t1._contents;
                      if (J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1) === "\u222b")
                        this.paintDelimiter$6(context, posX, posY, "\u2320", "\u23ae", "\u2321");
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        t2 = t1._contents;
        if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
          t2 = t1._contents;
          t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = C.JSString_methods.indexOf$1("\ufe37\ufe38", t2[0]) >= 0;
        } else
          t2 = false;
        if (t2) {
          t2 = t1._contents;
          if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "\ufe37")
            this.paintCurlyDelimiterHorizontal$7(context, posX, posY, "\u23a7", "\u23a8", "\u23aa", "\u23a9");
          else {
            t1 = t1._contents;
            if (J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1) === "\ufe38")
              this.paintCurlyDelimiterHorizontal$7(context, posX, posY, "\u23ab", "\u23ac", "\u23aa", "\u23ad");
          }
        } else {
          t2 = t1._contents;
          if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
            t2 = t1._contents;
            t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = C.JSString_methods.indexOf$1("\u2211\u220f", t2[0]) >= 0 && this._stretchy;
          } else
            t2 = false;
          if (t2) {
            context.strokeStyle = "black";
            context.fillStyle = "black";
            if (this.getExpr$0().getHeight$1(false) > this.getFontMetrics$0().height)
              context.font = this.base.getFont$1(this.fontsize * 2);
            else
              context.font = this.getFont$0();
            t1 = t1._contents;
            t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            if (C.JSString_methods.indexOf$1("\u2211", t1[0]) >= 0)
              C.CanvasRenderingContext2D_methods.fillText$3(context, "\u2211", posX, posY);
            else
              C.CanvasRenderingContext2D_methods.fillText$3(context, "\u220f", posX, posY);
            context.font = this.getFont$0();
          } else {
            t2 = t1._contents;
            if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "\u00af" && this._stretchy) {
              t1 = this.parent.getWidth$1(false);
              if (typeof t1 !== "number")
                return t1.$sub();
              context.beginPath();
              context.moveTo(posX, posY);
              context.lineTo(posX + (t1 - 2), posY);
              context.stroke();
            } else {
              t2 = t1._contents;
              if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "^" && this._stretchy) {
                t1 = this.parent.getWidth$1(false);
                if (typeof t1 !== "number")
                  return t1.$sub();
                width = t1 - 3;
                context.beginPath();
                context.moveTo(posX, posY);
                t1 = posX + width / 2;
                t2 = posY - 3;
                context.lineTo(t1, t2);
                context.moveTo(t1, t2);
                context.lineTo(posX + width, posY);
                context.stroke();
              } else {
                t2 = t1._contents;
                if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) !== ".") {
                  t2 = t1._contents;
                  if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) !== "..") {
                    t2 = t1._contents;
                    t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "...";
                  } else
                    t2 = true;
                } else
                  t2 = true;
                if (t2) {
                  context.font = this.getFont$0();
                  t1 = t1._contents;
                  C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX + 1, posY);
                } else {
                  context.font = this.getFont$0();
                  t1 = t1._contents;
                  C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
                }
              }
            }
          }
        }
      }
    },
    getExpr$0: function() {
      var t1, t2, contenu, interieur1, interieur2;
      t1 = this.text;
      t2 = t1._contents;
      if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) !== "\u222b") {
        t1 = t1._contents;
        t1 = C.JSString_methods.contains$1("\u2211\u220f", J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1));
      } else
        t1 = true;
      if (t1) {
        t1 = this.parent;
        contenu = (!!J.getInterceptor(t1).$isMathRow ? H.interceptedTypeCast(t1, "$isMathRow") : H.interceptedTypeCast(t1.getParent$0(), "$isMathRow")).getMathElement$1(1);
        if (!(!!J.getInterceptor(contenu).$isMathRow && contenu.children.length > 0))
          return contenu;
        interieur1 = contenu.getMathElement$1(0);
        if (!(!!J.getInterceptor(interieur1).$isMathRow && interieur1.children.length > 0))
          return contenu;
        interieur2 = interieur1.getMathElement$1(0);
        t1 = J.getInterceptor(interieur2);
        t2 = !t1.$isMathUnderOver;
        if (!(!t2 || !!t1.$isMathUnder || !!t1.$isMathOver || !!t1.$isMathOperator))
          return contenu;
        t1 = (!t2 || !!t1.$isMathUnder || !!t1.$isMathOver ? interieur2.getMathElement$1(0) : interieur2).text;
        t2 = t1._contents;
        if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) !== "\u222b") {
          t1 = t1._contents;
          t1 = C.JSString_methods.contains$1("\u2211\u220f", J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1));
        } else
          t1 = true;
        if (!t1)
          return contenu;
        return interieur1.getMathElement$1(1);
      } else
        return this.parent;
    },
    getWidth$1: function(dynamicParts) {
      var empix, t1, totalspace, t2, firstchar, t3;
      if (this._lspace !== 0 || this._rspace !== 0) {
        empix = this.base.stringWidth$2("A", this.getFont$0());
        t1 = this._lspace;
        if (typeof empix !== "number")
          return H.iae(empix);
        totalspace = t1 * empix + this._rspace * empix;
      } else
        totalspace = 0;
      t1 = this.text;
      t2 = t1._contents;
      if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
        t2 = t1._contents;
        t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        firstchar = t2[0];
        if (C.JSString_methods.indexOf$1("|", firstchar) >= 0)
          return 5 + totalspace;
        else if (C.JSString_methods.indexOf$1("\ufe37\ufe38", firstchar) >= 0)
          return 1 + totalspace;
        else if (C.JSString_methods.indexOf$1("\u222b", firstchar) >= 0) {
          t1 = t1._contents;
          return B.TextMetrics$(J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), this.base.getFont$1(this.fontsize * 2)).width + totalspace;
        } else if (C.JSString_methods.indexOf$1("\u2211\u220f", firstchar) >= 0) {
          t2 = this.getExpr$0().getHeight$1(false);
          t3 = this.getFontMetrics$0().height;
          t1 = t1._contents;
          if (t2 > t3)
            return B.TextMetrics$(J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), this.base.getFont$1(this.fontsize * 2)).width + totalspace;
          else {
            t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
            return C.JSNumber_methods.toInt$0(J.roundToDouble$0$n(this.base.stringWidth$2(t1, this.getFont$0()))) + totalspace;
          }
        } else if (C.JSString_methods.indexOf$1("^\u00af", firstchar) >= 0 && this._stretchy && dynamicParts) {
          t1 = this.parent.getWidth$1(false);
          if (typeof t1 !== "number")
            return t1.$sub();
          return t1 - 2;
        }
      }
      t1 = t1._contents;
      t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
      return C.JSNumber_methods.toInt$0(J.roundToDouble$0$n(this.base.stringWidth$2(t1, this.getFont$0()))) + totalspace;
    },
    getHeight$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getAscentHeight$1(dynamicParts);
      t2 = this.getDescentHeight$1(dynamicParts);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    getAscentHeight$1: function(dynamicParts) {
      var t1, t2, ascent, countparts;
      t1 = this.text;
      t2 = t1._contents;
      if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
        t2 = t1._contents;
        t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = C.JSString_methods.indexOf$1("[()]\u222b", t2[0]) >= 0;
      } else
        t2 = false;
      if (t2) {
        if (!dynamicParts || !this._stretchy)
          return this.getFontMetrics$0().ascent;
        return this.getExpr$0().getAscentHeight$1(false) + 1;
      } else {
        t2 = t1._contents;
        if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
          t2 = t1._contents;
          t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = C.JSString_methods.indexOf$1("{}", t2[0]) >= 0;
        } else
          t2 = false;
        if (t2) {
          if (!dynamicParts || !this._stretchy)
            return this.getFontMetrics$0().ascent;
          ascent = this.getFontMetrics$0().ascent;
          countparts = C.JSNumber_methods.toInt$0(Math.floor(this.getExpr$0().getHeight$1(false) / ascent)) + 1;
          t1 = t1._contents;
          t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          if (C.JSString_methods.indexOf$1("{}", t1[0]) >= 0)
            if (C.JSInt_methods.$mod(countparts, 2) === 0)
              return (countparts + 1) * ascent * 0.5 + this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
          return countparts * ascent * 0.5 + this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
        } else {
          t2 = t1._contents;
          if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
            t2 = t1._contents;
            t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = C.JSString_methods.indexOf$1("\u2211\u220f", t2[0]) >= 0 && this._stretchy;
          } else
            t2 = false;
          if (t2)
            if (this.getExpr$0().getHeight$1(false) > this.getFontMetrics$0().height)
              return this.base.getFontMetrics$1(this.fontsize * 2).ascent;
            else
              return this.getFontMetrics$0().ascent;
          else {
            t2 = t1._contents;
            if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
              t2 = t1._contents;
              t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
              if (0 >= t2.length)
                return H.ioore(t2, 0);
              t2 = C.JSString_methods.indexOf$1("\ufe37\ufe38", t2[0]) >= 0;
            } else
              t2 = false;
            if (t2)
              return 0;
            else {
              t2 = t1._contents;
              if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "\u00af" && this._stretchy)
                return 3;
              else {
                t2 = t1._contents;
                if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) === "\u223c" && this._stretchy)
                  return C.JSNumber_methods._tdivFast$1(this.getFontMetrics$0().ascent, 2);
                else {
                  t2 = t1._contents;
                  if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) !== ".") {
                    t2 = t1._contents;
                    if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2) !== "..") {
                      t1 = t1._contents;
                      t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1) === "...";
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                  if (t1)
                    return C.JSNumber_methods._tdivFast$1(this.getFontMetrics$0().ascent, 2);
                  else
                    return this.getFontMetrics$0().ascent;
                }
              }
            }
          }
        }
      }
    },
    getDescentHeight$1: function(dynamicParts) {
      var t1, t2, ascent, countparts;
      t1 = this.text;
      t2 = t1._contents;
      if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
        t2 = t1._contents;
        t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2 = C.JSString_methods.indexOf$1("[()]\u222b", t2[0]) >= 0;
      } else
        t2 = false;
      if (t2) {
        if (!dynamicParts || !this._stretchy)
          return this.getFontMetrics$0().descent;
        t1 = this.getExpr$0().getDescentHeight$1(false);
        if (typeof t1 !== "number")
          return t1.$add();
        return t1 + 1;
      } else {
        t2 = t1._contents;
        if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
          t2 = t1._contents;
          t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
          if (0 >= t2.length)
            return H.ioore(t2, 0);
          t2 = C.JSString_methods.indexOf$1("{}", t2[0]) >= 0;
        } else
          t2 = false;
        if (t2) {
          if (!dynamicParts || !this._stretchy)
            return this.getFontMetrics$0().descent;
          ascent = this.getFontMetrics$0().ascent;
          countparts = C.JSNumber_methods.toInt$0(Math.floor(this.getExpr$0().getHeight$1(false) / ascent)) + 1;
          t1 = t1._contents;
          t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          if (C.JSString_methods.indexOf$1("{}", t1[0]) >= 0)
            if (C.JSInt_methods.$mod(countparts, 2) === 0)
              return (countparts + 1) * ascent * 0.5 - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
          return countparts * ascent * 0.5 - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
        } else {
          t2 = t1._contents;
          if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
            t2 = t1._contents;
            t2 = J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2);
            if (0 >= t2.length)
              return H.ioore(t2, 0);
            t2 = C.JSString_methods.indexOf$1("\u2211\u220f", t2[0]) >= 0 && this._stretchy;
          } else
            t2 = false;
          if (t2)
            if (this.getExpr$0().getHeight$1(false) > this.getFontMetrics$0().height)
              return this.base.getFontMetrics$1(this.fontsize * 2).descent;
            else
              return this.getFontMetrics$0().descent;
          else {
            t2 = t1._contents;
            if (J.trim$0$s(t2.charCodeAt(0) == 0 ? t2 : t2).length === 1) {
              t1 = t1._contents;
              t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
              if (0 >= t1.length)
                return H.ioore(t1, 0);
              t1 = C.JSString_methods.indexOf$1("\ufe37\ufe38", t1[0]) >= 0;
            } else
              t1 = false;
            if (t1)
              return this.base.stringWidth$2("}", this.getFont$0());
            else
              return this.getFontMetrics$0().descent;
          }
        }
      }
    },
    $isMathOperator: true,
    static: {"^": "MathOperator_ELEMENT,MathOperator_ATTRIBUTE_STRETCHY"}
  },
  MathOver: {
    "^": "MathElement;_accent,base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length === 2 && !this._accent;
      t2 = this.fontsize;
      if (t1)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null && !this._accent)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, width, t1, h, t2, t3;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      width = this.getWidth$1(true);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      e1.paint$3(context, posX + (width - t1) / 2, posY);
      if (this._accent) {
        h = !!e1.$isMathText || !!e1.$isMathIdentifier ? e1.getRealAscentHeight$0() + 3 : e1.getAscentHeight$1(true);
        t1 = e2.getWidth$1(true);
        if (typeof t1 !== "number")
          return H.iae(t1);
        e2.paint$3(context, posX + (width - t1) / 2, posY - h);
      } else {
        t1 = e2.getWidth$1(true);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = e1.getAscentHeight$1(true);
        t3 = e2.getDescentHeight$1(true);
        if (typeof t3 !== "number")
          return H.iae(t3);
        e2.paint$3(context, posX + (width - t1) / 2, posY - (t2 + t3));
      }
    },
    getWidth$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getWidth$1(dynamicParts), this.getMathElement$1(1).getWidth$1(dynamicParts));
    },
    getHeight$1: function(dynamicParts) {
      if (this._accent)
        return this.getMathElement$1(0).getHeight$1(dynamicParts) + this.getMathElement$1(1).getAscentHeight$1(dynamicParts) + 1;
      else
        return this.getMathElement$1(0).getHeight$1(dynamicParts) + this.getMathElement$1(1).getHeight$1(dynamicParts);
    },
    getAscentHeight$1: function(dynamicParts) {
      if (this._accent)
        return this.getMathElement$1(0).getAscentHeight$1(true) + this.getMathElement$1(1).getAscentHeight$1(true);
      else
        return this.getMathElement$1(0).getAscentHeight$1(true) + this.getMathElement$1(1).getHeight$1(true);
    },
    getDescentHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getDescentHeight$1(true);
    },
    $isMathOver: true,
    static: {"^": "MathOver_ELEMENT"}
  },
  MathRoot: {
    "^": "MathElement;base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length;
      t2 = this.fontsize;
      if (t1 === 2)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, width, width2, aheight1, dheight1, t1, t2;
      if (this.children.length < 2)
        return;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      width = this.getWidth$1(true);
      e1.getWidth$1(true);
      width2 = e2.getWidth$1(true);
      e2.getHeight$1(true);
      aheight1 = e1.getAscentHeight$1(true);
      dheight1 = e1.getDescentHeight$1(true);
      context.beginPath();
      context.moveTo(posX, posY);
      if (typeof width2 !== "number")
        return H.iae(width2);
      t1 = posX + width2;
      context.lineTo(t1, posY);
      context.moveTo(t1, posY);
      t2 = posX + 4 + width2;
      if (typeof dheight1 !== "number")
        return H.iae(dheight1);
      dheight1 = posY + dheight1;
      context.lineTo(t2, dheight1);
      context.moveTo(t1 - 1, posY);
      context.lineTo(t2, dheight1);
      context.moveTo(t2, dheight1);
      dheight1 = posX + 8 + width2;
      aheight1 = posY - (aheight1 + 2);
      context.lineTo(dheight1, aheight1);
      context.moveTo(dheight1, aheight1);
      context.lineTo(posX + width, aheight1);
      context.stroke();
      e1.paint$3(context, dheight1, posY);
      dheight1 = e2.getDescentHeight$1(true);
      if (typeof dheight1 !== "number")
        return H.iae(dheight1);
      e2.paint$3(context, posX, posY - dheight1);
    },
    getWidth$1: function(dynamicParts) {
      var t1, t2;
      if (this.children.length < 2)
        return 0;
      t1 = this.getMathElement$1(0).getWidth$1(dynamicParts);
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = this.getMathElement$1(1).getWidth$1(dynamicParts);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + 8 + t2;
    },
    getHeight$1: function(dynamicParts) {
      var t1, t2;
      if (this.children.length < 2)
        return 0;
      t1 = this.getDescentHeight$1(true);
      t2 = P.max(this.getMathElement$1(0).getAscentHeight$1(true) + 4, this.getMathElement$1(1).getHeight$1(true));
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    getAscentHeight$1: function(dynamicParts) {
      if (this.children.length < 2)
        return 0;
      return P.max(this.getMathElement$1(0).getAscentHeight$1(true) + 4, this.getMathElement$1(1).getHeight$1(true));
    },
    getDescentHeight$1: function(dynamicParts) {
      if (this.children.length < 2)
        return 0;
      return this.getMathElement$1(0).getDescentHeight$1(true);
    },
    static: {"^": "MathRoot_ELEMENT"}
  },
  MathRootElement: {
    "^": "MathElement;_mode,_debug,base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      if (this.getMathElement$1(0) != null)
        this.getMathElement$1(0).paint$3(context, posX, posY);
    },
    getWidth$1: function(dynamicParts) {
      var t1;
      if (this.getMathElement$1(0) == null)
        return 0;
      t1 = this.getMathElement$1(0).getWidth$1(true);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + 1;
    },
    getHeight$1: function(dynamicParts) {
      var t1, t2, t3, t4;
      if (this.getMathElement$1(0) == null)
        return 0;
      if (this._mode === 1)
        return this.getMathElement$1(0).getHeight$1(true) + 2;
      t1 = this.getMathElement$1(0).getAscentHeight$1(true);
      t2 = this.base.getFontMetrics$1(this.fontsize).ascent;
      t3 = this.getMathElement$1(0).getDescentHeight$1(true);
      t4 = this.base.getFontMetrics$1(this.fontsize).ascent;
      if (typeof t3 !== "number")
        return t3.$add();
      return P.max(t1 - t2 * 0.3, t3 + t4 * 0.3) * 2;
    },
    getAscentHeight$1: function(dynamicParts) {
      if (this.getMathElement$1(0) == null)
        return 0;
      if (this._mode === 1)
        return this.getMathElement$1(0).getAscentHeight$1(true);
      return P.max(this.getMathElement$1(0).getAscentHeight$1(true), this.getMathElement$1(0).getDescentHeight$1(true));
    },
    getDescentHeight$1: function(dynamicParts) {
      if (this.getMathElement$1(0) == null)
        return 0;
      if (this._mode === 1)
        return this.getMathElement$1(0).getDescentHeight$1(true);
      return P.max(this.getMathElement$1(0).getAscentHeight$1(true), this.getMathElement$1(0).getDescentHeight$1(true));
    },
    static: {"^": "MathRootElement_ELEMENT,MathRootElement_ATTRIBUTE_MODE,MathRootElement_INLINE,MathRootElement_DISPLAY"}
  },
  MathRow: {
    "^": "MathElement;base,parent,fontsize,children,text",
    $isMathRow: true,
    static: {"^": "MathRow_ELEMENT"}
  },
  MathSqrt: {
    "^": "MathElement;base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      var t1, aheight1, dheight1, t2, t3, pos, i, child;
      t1 = this.getMathElementsWidth$0();
      this.getMathElementsWidth$0();
      aheight1 = this.getMathElementsAscentHeight$1(true);
      dheight1 = this.getMathElementsDescentHeight$1(true);
      context.beginPath();
      context.moveTo(posX, posY);
      t2 = posX + 3;
      t3 = posY - 1;
      context.lineTo(t2, t3);
      context.moveTo(t2, posY);
      t2 = posX + 4 + 1;
      dheight1 = posY + dheight1;
      context.lineTo(t2, dheight1);
      context.moveTo(posX + 2, t3);
      context.lineTo(t2, dheight1);
      context.moveTo(t2, dheight1);
      pos = posX + 8 + 3;
      aheight1 = posY - (aheight1 + 1);
      context.lineTo(pos, aheight1);
      context.moveTo(pos, aheight1);
      context.lineTo(posX + (t1 + 8 + 3), aheight1);
      context.stroke();
      for (t1 = this.children, i = 0; i < t1.length; ++i) {
        child = this.getMathElement$1(i);
        child.paint$3(context, pos, posY);
        t2 = child.getWidth$1(true);
        if (typeof t2 !== "number")
          return H.iae(t2);
        pos += t2;
      }
    },
    getMathElementsWidth$0: function() {
      var t1, width, i, t2;
      for (t1 = this.children, width = 0, i = 0; i < t1.length; ++i) {
        t2 = this.getMathElement$1(i).getWidth$1(true);
        if (typeof t2 !== "number")
          return H.iae(t2);
        width += t2;
      }
      return width;
    },
    getWidth$1: function(dynamicParts) {
      return this.getMathElementsWidth$0() + 8 + 3;
    },
    getMathElementsHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, this.getMathElement$1(i).getHeight$1(true));
      return height;
    },
    getHeight$1: function(dynamicParts) {
      return this.getMathElementsHeight$1(true) + 4;
    },
    getMathElementsAscentHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, this.getMathElement$1(i).getAscentHeight$1(true));
      return height;
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getMathElementsAscentHeight$1(true) + 2;
    },
    getMathElementsDescentHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, this.getMathElement$1(i).getDescentHeight$1(true));
      return height;
    },
    getDescentHeight$1: function(dynamicParts) {
      return this.getMathElementsDescentHeight$1(true) + 2;
    },
    static: {"^": "MathSqrt_ELEMENT"}
  },
  MathSub: {
    "^": "MathElement;base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length;
      t2 = this.fontsize;
      if (t1 === 2)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, t1;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      e1.paint$3(context, posX, posY);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      e2.paint$3(context, posX + t1, posY + e2.getAscentHeight$1(true) - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3);
    },
    getWidth$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getMathElement$1(0).getWidth$1(dynamicParts);
      t2 = this.getMathElement$1(1).getWidth$1(dynamicParts);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    getHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getAscentHeight$1(true) + this.getDescentHeight$1(true);
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getAscentHeight$1(true);
    },
    getDescentHeight$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getDescentHeight$1(true), this.getMathElement$1(1).getHeight$1(true) - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3);
    },
    $isMathSub: true,
    static: {"^": "MathSub_ELEMENT"}
  },
  MathSubSup: {
    "^": "MathElement;base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length;
      t1 = t1 === 2 || t1 === 3;
      t2 = this.fontsize;
      if (t1)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
      if (this.getMathElement$1(2) != null)
        this.getMathElement$1(2).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, e3, childmiddleshift, t1, t2, t3;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      e3 = this.getMathElement$1(2);
      childmiddleshift = e2.base.getFontMetrics$1(e2.fontsize).ascent * 0.3;
      t1 = e1.getDescentHeight$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = e1.getAscentHeight$1(true);
      e1.paint$3(context, posX, posY);
      t3 = e1.getWidth$1(true);
      if (typeof t3 !== "number")
        return H.iae(t3);
      e2.paint$3(context, posX + t3, posY + t1 + childmiddleshift / 2);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      e3.paint$3(context, posX + t1, posY - t2 + childmiddleshift);
    },
    getWidth$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getMathElement$1(0).getWidth$1(dynamicParts);
      t2 = P.max(this.getMathElement$1(1).getWidth$1(dynamicParts), this.getMathElement$1(2).getWidth$1(dynamicParts));
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    getHeight$1: function(dynamicParts) {
      return this.getAscentHeight$1(true) + this.getDescentHeight$1(true);
    },
    getAscentHeight$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getAscentHeight$1(true), this.getMathElement$1(2).getHeight$1(true) + this.base.getFontMetrics$1(this.fontsize).ascent * 0.3);
    },
    getDescentHeight$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getDescentHeight$1(true), this.getMathElement$1(1).getHeight$1(true) - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3);
    },
    static: {"^": "MathSubSup_ELEMENT"}
  },
  MathSup: {
    "^": "MathElement;base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length;
      t2 = this.fontsize;
      if (t1 === 2)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, t1, t2, t3, t4, t5;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      e1.paint$3(context, posX, posY);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = e2.getDescentHeight$1(true);
      t3 = this.base.getFontMetrics$1(this.fontsize).ascent;
      if (typeof t2 !== "number")
        return t2.$add();
      t4 = e1.getAscentHeight$1(true);
      t5 = e2.getDescentHeight$1(true);
      if (typeof t5 !== "number")
        return H.iae(t5);
      e2.paint$3(context, posX + t1, posY - P.max(t2 + t3 * 0.3, t4 - t5));
    },
    getWidth$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getMathElement$1(0).getWidth$1(dynamicParts);
      t2 = this.getMathElement$1(1).getWidth$1(dynamicParts);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    getHeight$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getAscentHeight$1(true);
      t2 = this.getMathElement$1(0).getDescentHeight$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    getAscentHeight$1: function(dynamicParts) {
      var e1, e2, t1, t2, t3, t4, t5;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      t1 = e2.getAscentHeight$1(true);
      t2 = e2.getDescentHeight$1(true);
      t3 = this.base.getFontMetrics$1(this.fontsize).ascent;
      if (typeof t2 !== "number")
        return t2.$add();
      t4 = e1.getAscentHeight$1(true);
      t5 = e2.getDescentHeight$1(true);
      if (typeof t5 !== "number")
        return H.iae(t5);
      return t1 + P.max(t2 + t3 * 0.3, t4 - t5);
    },
    getDescentHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getDescentHeight$1(true);
    },
    static: {"^": "MathSup_ELEMENT"}
  },
  MathTable: {
    "^": "MathElement;base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      var t1, maxrowascentheight, maxrowdescentheight, t2, t3, i, t4, maxcolumns, maxcolumnwidth, t5, t6, y1, y, row, x, j, mtd, t7;
      t1 = this.children;
      maxrowascentheight = H.setRuntimeTypeInfo(Array(t1.length), [P.$double]);
      maxrowdescentheight = H.setRuntimeTypeInfo(Array(t1.length), [P.$double]);
      for (t2 = maxrowascentheight.length, t3 = maxrowdescentheight.length, i = 0; i < t1.length; ++i) {
        t4 = this.getMaxRowAscentHeight$1(i);
        if (i >= t2)
          return H.ioore(maxrowascentheight, i);
        maxrowascentheight[i] = t4;
        t4 = this.getMaxRowDescentHeight$1(i);
        if (i >= t3)
          return H.ioore(maxrowdescentheight, i);
        maxrowdescentheight[i] = t4;
      }
      maxcolumns = this.getMaxColumnCount$0();
      maxcolumnwidth = H.setRuntimeTypeInfo(Array(maxcolumns), [P.$double]);
      for (t4 = maxcolumnwidth.length, i = 0; i < maxcolumns; ++i) {
        t5 = this.getMaxColumnWidth$1(i);
        if (i >= t4)
          return H.ioore(maxcolumnwidth, i);
        maxcolumnwidth[i] = t5;
      }
      t5 = this.getHeight$1(true);
      if (0 >= t2)
        return H.ioore(maxrowascentheight, 0);
      t6 = maxrowascentheight[0];
      if (typeof t6 !== "number")
        return H.iae(t6);
      y1 = -t5 / 2 + t6 - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
      for (y = y1, i = 0; i < t1.length; ++i) {
        row = this.getMathElement$1(i);
        t5 = posY + y;
        x = posX;
        j = 0;
        while (true) {
          if (!(j < maxcolumns && j < row.children.length))
            break;
          mtd = H.interceptedTypeCast(row.getMathElement$1(j), "$isMathTableData");
          t6 = mtd._columnalign;
          if (t6 === "left")
            mtd.paint$3(context, x + 1, t5);
          else {
            t7 = maxcolumnwidth[j];
            if (t6 === "right") {
              if (j >= t4)
                return H.ioore(maxcolumnwidth, j);
              if (typeof t7 !== "number")
                return H.iae(t7);
              mtd.paint$3(context, x + t7 - mtd.getWidth$1(true), t5);
            } else {
              if (j >= t4)
                return H.ioore(maxcolumnwidth, j);
              if (typeof t7 !== "number")
                return t7.$div();
              mtd.paint$3(context, x + t7 / 2 - mtd.getWidth$1(true) / 2, t5);
            }
          }
          if (j >= t4)
            return H.ioore(maxcolumnwidth, j);
          t6 = maxcolumnwidth[j];
          if (typeof t6 !== "number")
            return H.iae(t6);
          x += t6;
          ++j;
        }
        if (i >= t3)
          return H.ioore(maxrowdescentheight, i);
        t5 = maxrowdescentheight[i];
        if (typeof t5 !== "number")
          return H.iae(t5);
        y += t5;
        if (i < t1.length - 1) {
          t5 = i + 1;
          if (t5 >= t2)
            return H.ioore(maxrowascentheight, t5);
          t5 = maxrowascentheight[t5];
          if (typeof t5 !== "number")
            return H.iae(t5);
          y += t5;
        }
      }
    },
    getMaxRowAscentHeight$1: function(row) {
      var child, t1, height, i;
      if (row >= this.children.length)
        return 0;
      child = this.getMathElement$1(row);
      for (t1 = child.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, child.getMathElement$1(i).getAscentHeight$1(true));
      return height;
    },
    getMaxRowDescentHeight$1: function(row) {
      var child, t1, height, i;
      if (row >= this.children.length)
        return 0;
      child = this.getMathElement$1(row);
      for (t1 = child.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, child.getMathElement$1(i).getDescentHeight$1(true));
      return height;
    },
    getMaxColumnWidth$1: function(column) {
      var t1, width, i, child;
      for (t1 = this.children, width = 0, i = 0; i < t1.length; ++i) {
        child = this.getMathElement$1(i);
        if (column < child.children.length)
          width = P.max(width, child.getMathElement$1(column).getWidth$1(true));
      }
      return width + 2;
    },
    getMaxColumnCount$0: function() {
      var t1, count, i;
      for (t1 = this.children, count = 0, i = 0; i < t1.length; ++i)
        count = P.max(count, this.getMathElement$1(i).children.length);
      return count;
    },
    getWidth$1: function(dynamicParts) {
      var maxcolumns, width, i;
      maxcolumns = this.getMaxColumnCount$0();
      for (width = 0, i = 0; i < maxcolumns; ++i)
        width += this.getMaxColumnWidth$1(i);
      return width;
    },
    getHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height += this.getMaxRowAscentHeight$1(i) + this.getMaxRowDescentHeight$1(i);
      return height;
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getHeight$1(true) / 2 + this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
    },
    getDescentHeight$1: function(dynamicParts) {
      return this.getHeight$1(true) / 2 - this.base.getFontMetrics$1(this.fontsize).ascent * 0.3;
    },
    static: {"^": "MathTable_ELEMENT"}
  },
  MathTableData: {
    "^": "MathElement;_columnalign,base,parent,fontsize,children,text",
    $isMathTableData: true,
    static: {"^": "MathTableData_ELEMENT"}
  },
  MathTableRow: {
    "^": "MathElement;base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      var columnwidth, t1, pos, i;
      if (this.base._debug)
        this.debug$3(context, posX, posY);
      columnwidth = this._getMaxColumnWidth$0();
      for (t1 = this.children, pos = posX, i = 0; i < t1.length; ++i) {
        this.getMathElement$1(i).paint$3(context, pos, posY);
        pos += columnwidth;
      }
    },
    _getMaxColumnWidth$0: function() {
      var t1, width, i;
      for (t1 = this.children, width = 0, i = 0; i < t1.length; ++i)
        width = P.max(width, this.getMathElement$1(i).getWidth$1(true));
      return width;
    },
    getWidth$1: function(dynamicParts) {
      return this._getMaxColumnWidth$0() * this.children.length;
    },
    getHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, this.getMathElement$1(i).getHeight$1(dynamicParts));
      return height;
    },
    getAscentHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, this.getMathElement$1(i).getAscentHeight$1(dynamicParts));
      return height;
    },
    getDescentHeight$1: function(dynamicParts) {
      var t1, height, i;
      for (t1 = this.children, height = 0, i = 0; i < t1.length; ++i)
        height = P.max(height, this.getMathElement$1(i).getDescentHeight$1(dynamicParts));
      return height;
    },
    static: {"^": "MathTableRow_ELEMENT"}
  },
  MathText: {
    "^": "MathElement;base,parent,fontsize,children,text",
    paint$3: function(context, posX, posY) {
      var t1;
      context.font = this.getFont$0();
      t1 = this.text._contents;
      C.CanvasRenderingContext2D_methods.fillText$3(context, J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), posX, posY);
    },
    getWidth$1: function(dynamicParts) {
      var t1 = this.text._contents;
      t1 = J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1);
      H.checkString("A");
      t1 = H.stringReplaceAllUnchecked(t1, " ", "A");
      return this.base.stringWidth$2(t1, this.getFont$0());
    },
    getHeight$1: function(dynamicParts) {
      return this.getFontMetrics$0().ascent + this.getFontMetrics$0().descent;
    },
    getRealAscentHeight$0: function() {
      var t1 = this.text._contents;
      return B.TextMetrics$(J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1), this.getFont$0()).actualBoundingBoxAscent;
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getFontMetrics$0().ascent;
    },
    getDescentHeight$1: function(dynamicParts) {
      return this.getFontMetrics$0().descent;
    },
    $isMathText: true,
    static: {"^": "MathText_ELEMENT"}
  },
  MathUnder: {
    "^": "MathElement;base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length;
      t2 = this.fontsize;
      if (t1 === 2)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, width, t1, t2;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      width = this.getWidth$1(true);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      e1.paint$3(context, posX + (width - t1) / 2, posY);
      t1 = e2.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = e1.getDescentHeight$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      e2.paint$3(context, posX + (width - t1) / 2, posY + t2 + e2.getAscentHeight$1(true));
    },
    getWidth$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getWidth$1(dynamicParts), this.getMathElement$1(1).getWidth$1(dynamicParts));
    },
    getHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getHeight$1(dynamicParts) + this.getMathElement$1(1).getHeight$1(dynamicParts);
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getAscentHeight$1(true);
    },
    getDescentHeight$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getMathElement$1(0).getDescentHeight$1(true);
      t2 = this.getMathElement$1(1).getHeight$1(true);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    $isMathUnder: true,
    static: {"^": "MathUnder_ELEMENT"}
  },
  MathUnderOver: {
    "^": "MathElement;base,parent,fontsize,children,text",
    addMathElement$1: function(child) {
      var t1, t2;
      B.MathElement.prototype.addMathElement$1.call(this, child);
      t1 = this.children.length;
      t1 = t1 === 2 || t1 === 3;
      t2 = this.fontsize;
      if (t1)
        child.setFontSize$1(t2 - 2);
      else
        child.setFontSize$1(t2);
    },
    setFontSize$1: function(fontsize) {
      B.MathElement.prototype.setFontSize$1.call(this, fontsize);
      if (this.getMathElement$1(1) != null)
        this.getMathElement$1(1).setFontSize$1(this.fontsize - 2);
      if (this.getMathElement$1(2) != null)
        this.getMathElement$1(2).setFontSize$1(this.fontsize - 2);
    },
    paint$3: function(context, posX, posY) {
      var e1, e2, e3, width, t1, t2, t3;
      e1 = this.getMathElement$1(0);
      e2 = this.getMathElement$1(1);
      e3 = this.getMathElement$1(2);
      width = this.getWidth$1(true);
      t1 = e1.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      e1.paint$3(context, posX + (width - t1) / 2, posY);
      t1 = e2.getWidth$1(true);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = e1.getDescentHeight$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      e2.paint$3(context, posX + (width - t1) / 2, posY + t2 + e2.getAscentHeight$1(true));
      t2 = e3.getWidth$1(true);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1 = e1.getAscentHeight$1(true);
      t3 = e3.getDescentHeight$1(true);
      if (typeof t3 !== "number")
        return H.iae(t3);
      e3.paint$3(context, posX + (width - t2) / 2, posY - (t1 + t3));
    },
    getWidth$1: function(dynamicParts) {
      return P.max(this.getMathElement$1(0).getWidth$1(dynamicParts), P.max(this.getMathElement$1(1).getWidth$1(dynamicParts), this.getMathElement$1(2).getWidth$1(dynamicParts)));
    },
    getHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getHeight$1(dynamicParts) + this.getMathElement$1(1).getHeight$1(dynamicParts) + this.getMathElement$1(2).getHeight$1(dynamicParts);
    },
    getAscentHeight$1: function(dynamicParts) {
      return this.getMathElement$1(0).getAscentHeight$1(true) + this.getMathElement$1(1).getHeight$1(true);
    },
    getDescentHeight$1: function(dynamicParts) {
      var t1, t2;
      t1 = this.getMathElement$1(0).getDescentHeight$1(true);
      t2 = this.getMathElement$1(2).getHeight$1(true);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    $isMathUnderOver: true,
    static: {"^": "MathUnderOver_ELEMENT"}
  },
  EquationDialog: {
    "^": "Object;_equations$_equationText,_equations$_labelName,_equations$_labelValue,_equations$_okfct,_equations$_base",
    _equations$_okfct$0: function() {
      return this._equations$_okfct.call$0();
    },
    show$0: function(_) {
      var div1, div2, div3, form, canvas, t1, ta, div_buttons, bCancel, bOk;
      div1 = document.createElement("div", null);
      div1.id = "dlg1";
      J.get$classes$x(div1).add$1(0, "dlg1");
      div2 = document.createElement("div", null);
      J.get$classes$x(div2).add$1(0, "dlg2");
      div3 = document.createElement("div", null);
      J.get$classes$x(div3).add$1(0, "dlg3");
      form = document.createElement("form", null);
      canvas = W.CanvasElement_CanvasElement(300, 500);
      canvas.id = "eqcanvas";
      t1 = B.StringMathBuilder$(this._equations$_equationText)._rootElement;
      t1 = B.MathBase$(J.get$context2D$x(canvas), 16, t1, 15);
      this._equations$_base = t1;
      t1.paint$1(canvas.getContext("2d"));
      form.appendChild(canvas);
      ta = document.createElement("textarea", null);
      ta.id = "eqtext";
      t1 = J.getInterceptor$x(ta);
      t1.set$value(ta, this._equations$_equationText);
      J.set$width$x(ta.style, "100%");
      J.set$height$x(ta.style, "4em");
      ta.setAttribute("spellcheck", "false");
      t1 = t1.get$onInput(ta);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.EquationDialog_show_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      form.appendChild(ta);
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bCancel = document.createElement("button", null);
      bCancel.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "button.Cancel");
      bCancel.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bCancel);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.EquationDialog_show_closure0(div1)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bCancel);
      bOk = document.createElement("button", null);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.OK");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new B.EquationDialog_show_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bOk);
      form.appendChild(div_buttons);
      div3.appendChild(form);
      div2.appendChild(div3);
      div1.appendChild(div2);
      document.body.appendChild(div1);
      ta.focus();
    },
    ok$1: function($event) {
      this._equations$_equationText = J.get$value$x(document.querySelector("textarea#eqtext"));
      J.remove$0$ax(document.querySelector("div#dlg1"));
      if ($event != null)
        J.preventDefault$0$x($event);
      this._equations$_okfct$0();
    },
    getData$0: function() {
      var t1, canvas2;
      if (J.$eq(this._equations$_equationText, ""))
        return;
      t1 = this._equations$_base.getWidth$0();
      canvas2 = W.CanvasElement_CanvasElement(this._equations$_base.getHeight$0(), t1);
      t1 = B.StringMathBuilder$(this._equations$_equationText)._rootElement;
      B.MathBase$(J.get$context2D$x(canvas2), 16, t1, 15).paint$1(canvas2.getContext("2d"));
      return J.substring$1$s(canvas2.toDataURL("image/png", null), 22);
    },
    updateDisplay$0: function() {
      var ta, t1, t2, canvas, sb;
      ta = document.querySelector("textarea#eqtext");
      t1 = J.getInterceptor$x(ta);
      t2 = t1.get$value(ta);
      this._equations$_equationText = t2;
      t2 = J.get$length$asx(t2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0 && J.contains$1$asx(this._equations$_equationText, "\n") === true) {
        t1.set$value(ta, J.replaceAll$2$s(this._equations$_equationText, "\n", ""));
        this.ok$1(null);
        return;
      }
      canvas = document.querySelector("canvas#eqcanvas");
      sb = B.StringMathBuilder$(this._equations$_equationText);
      this._equations$_base.setRootElement$1(sb._rootElement);
      this._equations$_base.paint$1(J.get$context2D$x(canvas));
    }
  },
  EquationDialog_show_closure: {
    "^": "Closure:28;this_0",
    call$1: function($event) {
      return this.this_0.updateDisplay$0();
    },
    $isFunction: true
  },
  EquationDialog_show_closure0: {
    "^": "Closure:29;div1_1",
    call$1: function($event) {
      return J.remove$0$ax(this.div1_1);
    },
    $isFunction: true
  },
  EquationDialog_show_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      return this.this_2.ok$1($event);
    },
    $isFunction: true
  },
  MathBase: {
    "^": "Object;_inlinefontsize,_displayfontsize,minfontsize,maxfontsize,_fontmetrics,_debug,_mode,_rootElement,_context",
    setRootElement$1: function(element) {
      var t1;
      this._rootElement = element;
      element.setMathBase$1(this);
      t1 = this._rootElement;
      if (element._mode === 1)
        t1.setFontSize$1(this._displayfontsize);
      else
        t1.setFontSize$1(this._inlinefontsize);
      this._rootElement._debug = this._debug;
    },
    getFont$2: function(fontsize, style) {
      var size, sfont, sstyle;
      size = this.minfontsize;
      if (fontsize < size)
        ;
      else {
        size = this.maxfontsize;
        size = fontsize > size ? size : fontsize;
      }
      if (style === 2) {
        sfont = $.MathBase_STIXFontItalic;
        sstyle = "";
      } else if (style === 1) {
        sfont = $.MathBase_STIXFontBold;
        sstyle = "";
      } else if (style === 3) {
        sfont = $.MathBase_STIXFontBold;
        sstyle = "italic";
      } else {
        sfont = $.MathBase_STIXFontRegular;
        sstyle = "";
      }
      return sstyle + " " + H.S(size) + "px " + sfont;
    },
    getFont$1: function(fontsize) {
      return this.getFont$2(fontsize, 0);
    },
    getFontMetrics$1: function(fontsize) {
      var size, t1;
      size = this.minfontsize;
      if (fontsize < size)
        ;
      else {
        size = this.maxfontsize;
        size = fontsize > size ? size : fontsize;
      }
      t1 = this._fontmetrics;
      if (size >>> 0 !== size || size >= t1.length)
        return H.ioore(t1, size);
      if (t1[size] == null)
        t1[size] = B.TextMetrics$("Hg", this.getFont$1(fontsize));
      t1 = this._fontmetrics;
      if (size >= t1.length)
        return H.ioore(t1, size);
      return t1[size];
    },
    stringWidth$2: function(s, font) {
      var t1, save, width;
      t1 = this._context;
      save = t1.font;
      t1.font = font;
      width = t1.measureText(s).width;
      this._context.font = save;
      return width;
    },
    paint$1: function(context) {
      var t1, t2, t3, t4, t5, hb;
      t1 = context.canvas;
      context.clearRect(0, 0, t1.width, t1.height);
      t1 = this._rootElement;
      if (t1 != null) {
        if (t1._debug) {
          context.strokeStyle = "blue";
          context.beginPath();
          context.moveTo(0, 0);
          context.lineTo(C.JSNumber_methods.toInt$0(Math.ceil(t1.getWidth$1(true))) - 1, 0);
          context.moveTo(C.JSNumber_methods.toInt$0(Math.ceil(t1.getWidth$1(true))) - 1, 0);
          context.lineTo(C.JSNumber_methods.toInt$0(Math.ceil(t1.getWidth$1(true))) - 1, C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true))) - 1);
          context.moveTo(0, 0);
          context.lineTo(0, C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true))) - 1);
          context.moveTo(0, C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true))) - 1);
          context.lineTo(C.JSNumber_methods.toInt$0(Math.ceil(t1.getWidth$1(true))) - 1, C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true))) - 1);
          context.stroke();
          context.strokeStyle = "cyan";
          context.moveTo(0, C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true))) / 2);
          context.lineTo(C.JSNumber_methods.toInt$0(Math.ceil(t1.getWidth$1(true))) - 1, C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true))) / 2);
          context.stroke();
          context.strokeStyle = "black";
        }
        if (t1.getMathElement$1(0) != null) {
          t2 = t1.getMathElement$1(0).getAscentHeight$1(true);
          t3 = t1.base.getFontMetrics$1(t1.fontsize).ascent;
          t4 = t1.getMathElement$1(0).getDescentHeight$1(true);
          t5 = t1.base.getFontMetrics$1(t1.fontsize).ascent;
          if (typeof t4 !== "number")
            return t4.$add();
          hb = t4 + t5 * 0.3;
          if (t2 - t3 * 0.3 >= hb) {
            t2 = t1.getAscentHeight$1(true);
            if (t1.getMathElement$1(0) != null)
              t1.getMathElement$1(0).paint$3(context, 0, t2);
          } else {
            t2 = t1.base.getFontMetrics$1(t1.fontsize).ascent;
            if (t1.getMathElement$1(0) != null)
              t1.getMathElement$1(0).paint$3(context, 0, hb + t2 * 0.3);
          }
        }
      }
    },
    getWidth$0: function() {
      var t1 = this._rootElement;
      if (t1 != null && this._fontmetrics != null)
        return C.JSNumber_methods.toInt$0(Math.ceil(t1.getWidth$1(true)));
      return 0;
    },
    getHeight$0: function() {
      var t1 = this._rootElement;
      if (t1 != null && this._fontmetrics != null)
        return C.JSNumber_methods.toInt$0(Math.ceil(t1.getHeight$1(true)));
      return 0;
    },
    MathBase$4$context$displayfontsize$element$inlinefontsize: function(context, displayfontsize, element, inlinefontsize) {
      var t1;
      this._inlinefontsize = inlinefontsize;
      this._displayfontsize = displayfontsize;
      t1 = context != null;
      if (t1)
        this._fontmetrics = H.setRuntimeTypeInfo(Array(this.maxfontsize), [B.TextMetrics]);
      this.setRootElement$1(element);
      if (t1)
        this._context = context;
    },
    static: {"^": "MathBase_STIXFontRegular,MathBase_STIXFontItalic,MathBase_STIXFontBold,MathBase_fontsLoaded,MathBase_STYLE_PLAIN,MathBase_STYLE_BOLD,MathBase_STYLE_ITALIC,MathBase_STYLE_BOLD_ITALIC,MathBase_INLINE,MathBase_DISPLAY", MathBase$: function(context, displayfontsize, element, inlinefontsize) {
        var t1 = new B.MathBase(null, null, 8, 60, null, false, 0, null, null);
        t1.MathBase$4$context$displayfontsize$element$inlinefontsize(context, displayfontsize, element, inlinefontsize);
        return t1;
      }, MathBase_loadFonts: function() {
        if ($.MathBase_fontsLoaded)
          return;
        var context = J.get$context2D$x(W.CanvasElement_CanvasElement(10, 10));
        context.font = "15px " + $.MathBase_STIXFontRegular;
        J.getInterceptor$x(context).fillText$3(context, ".", 0, 0);
        context.font = "15px " + $.MathBase_STIXFontItalic;
        C.CanvasRenderingContext2D_methods.fillText$3(context, ".", 0, 0);
        context.font = "15px " + $.MathBase_STIXFontBold;
        C.CanvasRenderingContext2D_methods.fillText$3(context, ".", 0, 0);
        $.MathBase_fontsLoaded = true;
      }}
  },
  StringMathBuilder: {
    "^": "Object;_rootElement",
    replaceSpecial$1: function(s) {
      var t1, spec, t2, ind, t3, t4;
      for (t1 = new H.ListIterator($.get$StringMathBuilder_special(), 34, 0, null); t1.moveNext$0();) {
        spec = t1._current;
        t2 = J.getInterceptor$asx(spec);
        ind = J.indexOf$1$asx(s, t2.$index(spec, 0));
        for (; ind !== -1;) {
          t3 = C.JSString_methods.$add(J.getInterceptor$s(s).substring$2(s, 0, ind), t2.$index(spec, 1));
          t4 = J.get$length$asx(t2.$index(spec, 0));
          if (typeof t4 !== "number")
            return H.iae(t4);
          s = t3 + C.JSString_methods.substring$1(s, ind + t4);
          ind = C.JSString_methods.indexOf$1(s, t2.$index(spec, 0));
        }
      }
      return s;
    },
    parser$1: function(s) {
      var nb, pp, i, indop, t1, t2, exception, indf, indf2, c, nom, vp, indv, op, s1, p1, s2, p2;
      if (s == null || J.$eq(s, ""))
        return;
      if (J.$eq(J.$index$asx(s, 0), "(") && J.$eq(J.$index$asx(s, J.get$length$asx(s) - 1), ")")) {
        for (pp = 0, i = 1; i < J.get$length$asx(s) - 1; ++i) {
          if (J.$eq(J.$index$asx(s, i), "("))
            ++pp;
          else if (J.$eq(J.$index$asx(s, i), ")"))
            --pp;
          if (pp === -1)
            break;
        }
        if (pp !== -1)
          s = J.substring$2$s(s, 1, J.get$length$asx(s) - 1);
      }
      pp = 0;
      i = 0;
      while (true) {
        t1 = J.get$length$asx(s);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1)) {
          indop = -1;
          break;
        }
        if (pp === 0 && B.StringMathBuilder_operateurEn(s, i)) {
          indop = i;
          break;
        } else if (J.$eq(J.$index$asx(s, i), "("))
          ++pp;
        else if (J.$eq(J.$index$asx(s, i), ")"))
          --pp;
        ++i;
      }
      if (indop === -1) {
        nb = null;
        try {
          t1 = s;
          t2 = $.get$StringMathBuilder__numbersExpr()._nativeRegExp;
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          nb = t2.test(t1);
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
            nb = false;
          else
            throw exception;
        }

        if (nb === true) {
          t1 = new B.JEQNombre(null);
          t1.valeur = s;
          return t1;
        }
        indf = J.indexOf$1$asx(s, "(");
        if (indf !== -1 && J.$eq(J.$index$asx(s, J.get$length$asx(s) - 1), ")")) {
          pp = 0;
          i = 0;
          while (true) {
            t1 = J.get$length$asx(s);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1)) {
              indf2 = -1;
              break;
            }
            c = J.$index$asx(s, i);
            t1 = J.getInterceptor(c);
            if (t1.$eq(c, "(") && pp === 0 && i !== indf) {
              indf2 = i;
              break;
            } else if (t1.$eq(c, "("))
              ++pp;
            else if (t1.$eq(c, ")"))
              --pp;
            ++i;
          }
          if (indf2 === -1) {
            t1 = J.substring$2$s(s, 0, indf);
            nom = new B.JEQVariable(null, null, new H.JSSyntaxRegExp("^[0-9]+[a-zA-Z]+$", H.JSSyntaxRegExp_makeNative("^[0-9]+[a-zA-Z]+$", false, true, false), null, null));
            nom.nom = C.JSString_methods.trim$0(t1);
            nom.unites = false;
            s = J.substring$2$s(s, indf + 1, J.get$length$asx(s) - 1);
          } else {
            nom = this.parser$1(J.substring$2$s(s, 0, indf2));
            s = J.substring$2$s(s, indf2 + 1, J.get$length$asx(s) - 1);
          }
          vp = [];
          vp.$builtinTypeInfo = [B.JEQ];
          pp = 0;
          i = 0;
          while (true) {
            t1 = J.get$length$asx(s);
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(i < t1)) {
              indv = -1;
              break;
            }
            c = J.$index$asx(s, i);
            if (c === ";" && pp === 0) {
              indv = i;
              break;
            } else if (c === "(")
              ++pp;
            else if (c === ")")
              --pp;
            ++i;
          }
          if (indv === -1)
            vp.push(this.parser$1(J.trim$0$s(s)));
          else
            for (; indv !== -1;) {
              vp.push(this.parser$1(C.JSString_methods.trim$0(J.substring$2$s(s, 0, indv))));
              s = J.substring$1$s(s, indv + 1);
              pp = 0;
              i = 0;
              while (true) {
                t1 = J.get$length$asx(s);
                if (typeof t1 !== "number")
                  return H.iae(t1);
                if (!(i < t1)) {
                  indv = -1;
                  break;
                }
                c = J.$index$asx(s, i);
                if (c === ";" && pp === 0) {
                  indv = i;
                  break;
                } else if (c === "(")
                  ++pp;
                else if (c === ")")
                  --pp;
                ++i;
              }
              if (indv === -1)
                vp.push(this.parser$1(J.trim$0$s(s)));
            }
          t1 = new B.JEQFonction(null, null, new H.JSSyntaxRegExp("^[0-9]+.*$", H.JSSyntaxRegExp_makeNative("^[0-9]+.*$", false, true, false), null, null));
          t1.JEQFonction$2(nom, vp);
          return t1;
        } else {
          t1 = new B.JEQVariable(null, null, new H.JSSyntaxRegExp("^[0-9]+[a-zA-Z]+$", H.JSSyntaxRegExp_makeNative("^[0-9]+[a-zA-Z]+$", false, true, false), null, null));
          t1.nom = J.trim$0$s(s);
          t1.unites = false;
          return t1;
        }
      }
      op = J.$index$asx(s, indop);
      s1 = C.JSString_methods.trim$0(J.substring$2$s(s, 0, indop));
      p1 = s1 === "" ? null : this.parser$1(s1);
      s2 = C.JSString_methods.trim$0(J.substring$1$s(s, indop + 1));
      p2 = s2 === "" ? null : this.parser$1(s2);
      t1 = new B.JEQOperation(null, null, null, null);
      t1.op = op;
      t1.p1 = p1;
      t1.p2 = p2;
      t1.unites = false;
      if (J.$eq(op, "#") && p2 != null)
        p2.setUnites$0();
      return t1;
    },
    StringMathBuilder$1: function(s) {
      var t1, s2, jeq, me;
      t1 = new B.MathRootElement(0, false, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
      t1.MathElement$2(null, null);
      this._rootElement = t1;
      s2 = B.StringMathBuilder_ajParentheses(this.replaceSpecial$1(s));
      if (!J.$eq(s, "")) {
        jeq = this.parser$1(s2);
        me = jeq == null ? null : jeq.versMathML$0();
        this._rootElement.addMathElement$1(me);
      }
    },
    static: {"^": "StringMathBuilder_special,StringMathBuilder_sops,StringMathBuilder_symboles_id,StringMathBuilder_symboles_droits,StringMathBuilder_fctnopar,StringMathBuilder__numbersExpr", StringMathBuilder$: function(s) {
        var t1 = new B.StringMathBuilder(null);
        t1.StringMathBuilder$1(s);
        return t1;
      }, StringMathBuilder_operateurEn: function(s, pos) {
        var t1, c, t2;
        t1 = J.getInterceptor$asx(s);
        c = t1.$index(s, pos);
        if (J.indexOf$1$asx($.get$StringMathBuilder_sops(), c) === -1)
          return false;
        t2 = J.getInterceptor(c);
        if (!t2.$eq(c, "+") && !t2.$eq(c, "-"))
          return true;
        if (pos < 2)
          return true;
        c = t1.$index(s, pos - 1);
        t2 = J.getInterceptor(c);
        if (!t2.$eq(c, "E") && !t2.$eq(c, "e"))
          return true;
        if (C.JSString_methods.indexOf$1("0123456789", t1.$index(s, pos - 2)) !== -1)
          return false;
        return true;
      }, StringMathBuilder_ajParentheses: function(s) {
        var indop, i, pp, yaop, t1, c, t2, i0, t3, indop2, iops, cops, nindop, cm, cp, im, ajp, ip, ip0;
        indop = J.indexOf$1$asx(s, ";");
        for (; indop !== -1;) {
          i = indop - 1;
          pp = 0;
          yaop = false;
          while (true) {
            if (!(i >= 0 && pp >= 0))
              break;
            t1 = J.getInterceptor$asx(s);
            c = t1.$index(s, i);
            t2 = J.getInterceptor(c);
            if (t2.$eq(c, ";") && pp === 0)
              break;
            if (t2.$eq(c, "("))
              --pp;
            else if (t2.$eq(c, ")"))
              ++pp;
            else if (B.StringMathBuilder_operateurEn(s, i))
              yaop = true;
            if (pp < 0 && yaop) {
              s = t1.substring$2(s, 0, i) + "(" + C.JSString_methods.substring$2(s, i, indop) + ")" + C.JSString_methods.substring$1(s, indop);
              indop += 2;
            }
            --i;
          }
          i = indop + 1;
          i0 = i;
          pp = 0;
          yaop = false;
          while (true) {
            t1 = J.getInterceptor$asx(s);
            if (!(i0 < t1.get$length(s) && pp >= 0))
              break;
            c = t1.$index(s, i0);
            t2 = J.getInterceptor(c);
            if (t2.$eq(c, "("))
              ++pp;
            else if (t2.$eq(c, ")"))
              --pp;
            else if (B.StringMathBuilder_operateurEn(s, i0))
              yaop = true;
            if (pp >= 0)
              t3 = pp === 0 && t2.$eq(c, ";");
            else
              t3 = true;
            if (t3 && yaop)
              s = t1.substring$2(s, 0, i) + "(" + C.JSString_methods.substring$2(s, i, i0) + ")" + C.JSString_methods.substring$1(s, i0);
            if (t2.$eq(c, ";") && pp === 0)
              break;
            ++i0;
          }
          indop2 = C.JSString_methods.indexOf$1(J.substring$1$s(s, i), ";");
          indop = indop2 === -1 ? indop2 : indop + (indop2 + 1);
        }
        for (iops = 0; t1 = $.get$StringMathBuilder_sops(), iops < t1.length; ++iops) {
          cops = t1[iops];
          t1 = J.getInterceptor$asx(s);
          indop = t1.indexOf$1(s, cops);
          while (true) {
            if (!(indop !== -1 && !B.StringMathBuilder_operateurEn(s, indop)))
              break;
            indop = t1.indexOf$2(s, cops, indop + 1);
          }
          for (nindop = indop, cm = " ", cp = " "; nindop !== -1;) {
            im = indop - 1;
            if (im >= 0)
              cm = J.$index$asx(s, im);
            t1 = J.getInterceptor$asx(s);
            pp = 0;
            while (true) {
              if (im >= 0) {
                t2 = pp === 0;
                if (!t2 || !J.$eq(cm, "("))
                  t2 = !t2 || !B.StringMathBuilder_operateurEn(s, im);
                else
                  t2 = false;
              } else
                t2 = false;
              if (!t2)
                break;
              t2 = J.getInterceptor(cm);
              if (t2.$eq(cm, ")"))
                ++pp;
              else if (t2.$eq(cm, "("))
                --pp;
              --im;
              if (im >= 0)
                cm = t1.$index(s, im);
            }
            ajp = (im < 0 || B.StringMathBuilder_operateurEn(s, im)) && true;
            ip = indop + 1;
            if (ip >= 0 && ip <= t1.get$length(s) - 1)
              cp = t1.$index(s, ip);
            ip0 = ip;
            pp = 0;
            while (true) {
              if (ip0 < t1.get$length(s)) {
                t2 = pp === 0;
                if (!t2 || !J.$eq(cp, ")"))
                  t2 = !t2 || !B.StringMathBuilder_operateurEn(s, ip0);
                else
                  t2 = false;
              } else
                t2 = false;
              if (!t2)
                break;
              t2 = J.getInterceptor(cp);
              if (t2.$eq(cp, "("))
                ++pp;
              else if (t2.$eq(cp, ")"))
                --pp;
              ++ip0;
              if (ip0 < t1.get$length(s))
                cp = t1.$index(s, ip0);
            }
            if (ip0 >= t1.get$length(s) || B.StringMathBuilder_operateurEn(s, ip0) ? true : ajp) {
              t2 = im + 1;
              s = t1.substring$2(s, 0, t2) + "(" + C.JSString_methods.substring$2(s, t2, ip0) + ")" + C.JSString_methods.substring$1(s, ip0);
              indop = ip;
            }
            nindop = C.JSString_methods.indexOf$1(J.substring$1$s(s, indop + 1), cops);
            indop = nindop + indop + 1;
          }
        }
        return s;
      }, StringMathBuilder_elemOrQuestion: function(jeq) {
        var t1, t2, mtext;
        if (jeq != null)
          return jeq.versMathML$0();
        t1 = [];
        t1.$builtinTypeInfo = [B.MathElement];
        t2 = new P.StringBuffer("");
        t2._contents = "";
        mtext = new B.MathText(null, null, 14, t1, t2);
        mtext.addText$1("?");
        return mtext;
      }}
  },
  JEQ: {
    "^": "Object;"
  },
  JEQFonction: {
    "^": "Object;nom,vp,namesExpr",
    setUnites$0: function() {
      var t1, param;
      for (t1 = this.vp, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        param = t1._current;
        if (param != null)
          param.setUnites$0();
      }
    },
    getNomFct$0: function() {
      var t1 = this.nom;
      if (!!J.getInterceptor(t1).$isJEQVariable)
        return H.interceptedTypeCast(t1, "$isJEQVariable").nom;
      else
        return;
    },
    versMathML$0: function() {
      var p2, mop, n, spts, i, t1, t2, p1, p3, p4, nomfct, me, mi, mo, munderover, munder, mover, mrow, msubsup, mtable, t3, mel, t4, t5, mtd, mfrac, mop0, exception, mp1, mt, tsymbole, par, mtext;
      p2 = null;
      t1 = this.vp;
      t2 = t1.length;
      p1 = t2 > 0 ? t1[0] : null;
      if (t2 > 1)
        p2 = t1[1];
      else
        p2 = null;
      p3 = t2 > 2 ? t1[2] : null;
      p4 = t2 > 3 ? t1[3] : null;
      nomfct = this.getNomFct$0();
      if (nomfct !== "sqrt")
        if (nomfct === "racine")
          t1 = p1 == null || p2 == null;
        else
          t1 = false;
      else
        t1 = true;
      if (t1) {
        me = new B.MathSqrt(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
      } else if (nomfct === "racine" || nomfct === "root") {
        me = new B.MathRoot(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
        me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
      } else if (nomfct === "exp") {
        me = new B.MathSup(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        mi = new B.MathIdentifier("italic", null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mi.MathElement$2(null, null);
        mi.addText$1("e");
        me.addMathElement$1(mi);
        me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
      } else if (nomfct === "abs") {
        me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("|");
        me.addMathElement$1(mo);
        me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("|");
        me.addMathElement$1(mo);
      } else if (nomfct === "norm" || nomfct === "norme") {
        me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("\u2016");
        me.addMathElement$1(mo);
        me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("\u2016");
        me.addMathElement$1(mo);
      } else if (nomfct === "fact" || nomfct === "factorielle" || nomfct === "factorial") {
        me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        t1 = J.getInterceptor(p1);
        t2 = !t1.$isJEQVariable;
        if (!(!t2 || !!t1.$isJEQNombre)) {
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("(");
          me.addMathElement$1(mo);
        }
        me.addMathElement$1(p1.versMathML$0());
        if (!(!t2 || !!t1.$isJEQNombre)) {
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1(")");
          me.addMathElement$1(mo);
        }
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("!");
        me.addMathElement$1(mo);
      } else if (nomfct === "int" || nomfct === "int\u00e9grale") {
        me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        me.MathElement$2(null, null);
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("\u222b");
        mo._stretchy = true;
        t1 = p3 != null;
        if (t1 && p4 != null) {
          munderover = new B.MathUnderOver(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          munderover.MathElement$2(null, null);
          munderover.addMathElement$1(mo);
          munderover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p3));
          munderover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p4));
          me.addMathElement$1(munderover);
        } else if (t1) {
          munder = new B.MathUnder(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          munder.MathElement$2(null, null);
          munder.addMathElement$1(mo);
          munder.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p3));
          me.addMathElement$1(munder);
        } else if (p4 != null) {
          mover = new B.MathOver(false, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mover.MathElement$2(null, null);
          mover.addMathElement$1(mo);
          mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p4));
          me.addMathElement$1(mover);
        } else
          me.addMathElement$1(mo);
        mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mrow.MathElement$2(null, null);
        mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
        if (p2 != null) {
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("d");
          mrow.addMathElement$1(mo);
          mrow.addMathElement$1(p2.versMathML$0());
        }
        me.addMathElement$1(mrow);
      } else {
        t1 = nomfct !== "prod";
        if (!t1 || nomfct === "sum" || nomfct === "produit" || nomfct === "somme") {
          me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
          munderover = new B.MathUnderOver(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          munderover.MathElement$2(null, null);
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          if (!t1 || nomfct === "produit")
            mo.addText$1("\u220f");
          else if (nomfct === "sum" || nomfct === "somme")
            mo.addText$1("\u2211");
          mo._stretchy = true;
          munderover.addMathElement$1(mo);
          munderover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          munderover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p3));
          me.addMathElement$1(munderover);
          mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mrow.MathElement$2(null, null);
          mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          me.addMathElement$1(mrow);
        } else if (nomfct === "over" || nomfct === "dessus") {
          mover = new B.MathOver(false, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mover.MathElement$2(null, null);
          mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          me = mover;
        } else if (nomfct === "subsup") {
          msubsup = new B.MathSubSup(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          msubsup.MathElement$2(null, null);
          msubsup.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          msubsup.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          msubsup.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p3));
          me = msubsup;
        } else if (nomfct === "accent") {
          mover = new B.MathOver(false, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mover.MathElement$2(null, null);
          mover._accent = true;
          mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          if (!!J.getInterceptor(p2).$isJEQOperation && J.$eq(H.interceptedTypeCast(p2, "$isJEQOperation").op, "\u223c")) {
            mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mo.MathElement$2(null, null);
            mo._stretchy = true;
            mo.addText$1("\u223c");
            mover.addMathElement$1(mo);
          } else
            mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          me = mover;
        } else if (nomfct === "matrix" || nomfct === "matrice") {
          me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("(");
          me.addMathElement$1(mo);
          t1 = H.setRuntimeTypeInfo([], [B.MathElement]);
          mtable = new B.MathTable(null, null, 14, t1, P.StringBuffer$(""));
          mtable.MathElement$2(null, null);
          for (t2 = this.vp, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
            t3 = B.StringMathBuilder_elemOrQuestion(t2._current);
            t1.push(t3);
            t3.setMathBase$1(mtable.base);
            t3.parent = mtable;
            t3.setFontSize$1(mtable.fontsize);
          }
          me.addMathElement$1(mtable);
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1(")");
          me.addMathElement$1(mo);
        } else if (nomfct === "system" || nomfct === "syst\u00e8me") {
          me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("{");
          me.addMathElement$1(mo);
          t1 = H.setRuntimeTypeInfo([], [B.MathElement]);
          mtable = new B.MathTable(null, null, 14, t1, P.StringBuffer$(""));
          mtable.MathElement$2(null, null);
          for (t2 = this.vp, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
            mel = t2._current;
            t3 = [];
            t3.$builtinTypeInfo = [B.MathElement];
            t4 = new P.StringBuffer("");
            t4._contents = "";
            mrow = new B.MathRow(null, null, 14, t3, t4);
            t4 = [];
            t4.$builtinTypeInfo = [B.MathElement];
            t5 = new P.StringBuffer("");
            t5._contents = "";
            mtd = new B.MathTableData("center", null, null, 14, t4, t5);
            mtd._columnalign = "left";
            t5 = B.StringMathBuilder_elemOrQuestion(mel);
            t4.push(t5);
            t5.setMathBase$1(null);
            t5.parent = mtd;
            t5.setFontSize$1(14);
            t3.push(mtd);
            mtd.setMathBase$1(null);
            mtd.parent = mrow;
            mtd.setFontSize$1(14);
            t1.push(mrow);
            mrow.setMathBase$1(mtable.base);
            mrow.parent = mtable;
            mrow.setFontSize$1(mtable.fontsize);
          }
          me.addMathElement$1(mtable);
        } else if (nomfct === "line" || nomfct === "ligne") {
          t1 = H.setRuntimeTypeInfo([], [B.MathElement]);
          me = new B.MathTableRow(null, null, 14, t1, P.StringBuffer$(""));
          me.MathElement$2(null, null);
          for (t2 = this.vp, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
            mel = t2._current;
            t3 = [];
            t3.$builtinTypeInfo = [B.MathElement];
            t4 = new P.StringBuffer("");
            t4._contents = "";
            mtd = new B.MathTableData("center", null, null, 14, t3, t4);
            t4 = B.StringMathBuilder_elemOrQuestion(mel);
            t3.push(t4);
            t4.setMathBase$1(null);
            t4.parent = mtd;
            t4.setFontSize$1(14);
            t1.push(mtd);
            mtd.setMathBase$1(me.base);
            mtd.parent = me;
            mtd.setFontSize$1(me.fontsize);
          }
        } else if (nomfct === "slash") {
          me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
          me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("/");
          me.addMathElement$1(mo);
          me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
        } else if (nomfct === "frac" || nomfct === "fraction") {
          mfrac = new B.MathFrac(1, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mfrac.MathElement$2(null, null);
          mfrac.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mfrac.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          me = mfrac;
        } else if (nomfct === "pscalaire" || nomfct === "scalarp") {
          mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mrow.MathElement$2(null, null);
          mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1(".");
          mrow.addMathElement$1(mo);
          mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          return mrow;
        } else if (nomfct === "dtemps" || nomfct === "timed") {
          mover = new B.MathOver(false, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mover.MathElement$2(null, null);
          mover._accent = true;
          mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mop0 = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mop0.MathElement$2(null, null);
          mop = mop0;
          if (!!J.getInterceptor(p2).$isJEQNombre)
            try {
              n = H.Primitives_parseInt(H.interceptedTypeCast(p2, "$isJEQNombre").valeur, null, null);
              spts = "";
              for (i = 0; J.$lt$n(i, n); i = J.$add$ns(i, 1))
                spts = J.$add$ns(spts, ".");
              mop.addText$1(spts);
            } catch (exception) {
              if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
                mop.addText$1("?");
              else
                throw exception;
            }

          else
            mop.addText$1("?");
          mover.addMathElement$1(mop);
          me = mover;
        } else if (nomfct === "unit\u00e9" || nomfct === "unit") {
          mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mrow.MathElement$2(null, null);
          mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1(" ");
          mrow.addMathElement$1(mo);
          mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p2));
          return mrow;
        } else if (nomfct === "moyenne" || nomfct === "mean") {
          me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("\u2329");
          me.addMathElement$1(mo);
          me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("\u232a");
          me.addMathElement$1(mo);
        } else if (nomfct === "vecteur" || nomfct === "vector") {
          mp1 = B.StringMathBuilder_elemOrQuestion(p1);
          if (!!mp1.$isMathIdentifier) {
            mp1._mathvariant = "bold";
            me = mp1;
          } else if (!!mp1.$isMathSub && !!J.getInterceptor(mp1.getMathElement$1(0)).$isMathIdentifier) {
            H.interceptedTypeCast(mp1.getMathElement$1(0), "$isMathIdentifier")._mathvariant = "bold";
            me = mp1;
          } else {
            mover = new B.MathOver(false, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mover.MathElement$2(null, null);
            mover._accent = true;
            mover.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
            mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mo.MathElement$2(null, null);
            mo._stretchy = true;
            mo.addText$1("\u2192");
            mover.addMathElement$1(mo);
            me = mover;
          }
        } else {
          me = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
          t1 = this.nom;
          if (!!J.getInterceptor(t1).$isJEQVariable) {
            mt = new B.MathText(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mt.MathElement$2(null, null);
            for (t1 = new H.ListIterator($.get$StringMathBuilder_symboles_id(), 52, 0, null); t1.moveNext$0();) {
              tsymbole = t1._current;
              t2 = J.getInterceptor$asx(tsymbole);
              t3 = t2.$index(tsymbole, 0);
              if (nomfct == null ? t3 == null : nomfct === t3) {
                nomfct = t2.$index(tsymbole, 1);
                break;
              }
            }
            for (t1 = new H.ListIterator($.get$StringMathBuilder_symboles_droits(), 109, 0, null), t2 = J.getInterceptor(nomfct); t1.moveNext$0();) {
              tsymbole = t1._current;
              t3 = J.getInterceptor$asx(tsymbole);
              if (t2.$eq(nomfct, t3.$index(tsymbole, 0))) {
                nomfct = t3.$index(tsymbole, 1);
                break;
              }
            }
            mt.addText$1(nomfct);
            if (p2 == null && !!J.getInterceptor(p1).$isJEQVariable) {
              t1 = new H.ListIterator($.get$StringMathBuilder_fctnopar(), 6, 0, null);
              t2 = J.getInterceptor(nomfct);
              while (true) {
                if (!t1.moveNext$0()) {
                  par = true;
                  break;
                }
                if (t2.$eq(nomfct, t1._current)) {
                  par = false;
                  break;
                }
              }
            } else
              par = true;
            me.addMathElement$1(mt);
          } else {
            me.addMathElement$1(t1.versMathML$0());
            par = true;
          }
          if (par) {
            mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mo.MathElement$2(null, null);
            mo.addText$1("(");
            me.addMathElement$1(mo);
          }
          me.addMathElement$1(B.StringMathBuilder_elemOrQuestion(p1));
          for (t1 = me.children, i = 1; i < this.vp.length; ++i) {
            t2 = [];
            t2.$builtinTypeInfo = [B.MathElement];
            t3 = new P.StringBuffer("");
            t3._contents = "";
            mo = new B.MathOperator(true, 0, 0, null, null, 14, t2, t3);
            mo.addText$1(";");
            t1.push(mo);
            mo.setMathBase$1(me.base);
            mo.parent = me;
            mo.setFontSize$1(me.fontsize);
            t2 = this.vp;
            if (i >= t2.length)
              return H.ioore(t2, i);
            t2 = t2[i].versMathML$0();
            t1.push(t2);
            t2.setMathBase$1(me.base);
            t2.parent = me;
            t2.setFontSize$1(me.fontsize);
          }
          if (par) {
            mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mo.MathElement$2(null, null);
            mo.addText$1(")");
            me.addMathElement$1(mo);
          } else {
            mtext = new B.MathText(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
            mtext.MathElement$2(null, null);
            mtext.addText$1("\u00a0");
            me.addMathElement$1(mtext);
          }
        }
      }
      return me;
    },
    JEQFonction$2: function(nom, $arguments) {
      var t1;
      this.nom = nom;
      if (!!J.getInterceptor(nom).$isJEQVariable && this.namesExpr._nativeRegExp.test(H.checkString(nom.nom)))
        H.interceptedTypeCast(nom, "$isJEQVariable").nom = "?";
      this.vp = $arguments;
      if (this.getNomFct$0() === "unit\u00e9" || this.getNomFct$0() === "unit") {
        t1 = this.vp;
        t1 = t1.length > 1 && t1[1] != null;
      } else
        t1 = false;
      if (t1) {
        t1 = this.vp;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        t1[1].setUnites$0();
      }
    },
    $isJEQFonction: true
  },
  JEQOperation: {
    "^": "Object;op,p1,p2,unites",
    setUnites$0: function() {
      this.unites = true;
      var t1 = this.p1;
      if (t1 != null)
        t1.setUnites$0();
      t1 = this.p2;
      if (t1 != null)
        t1.setUnites$0();
    },
    versMathML$0: function() {
      var mfrac, msup, t1, t2, nomfct, par, msub, mrow, me1, premierDansP2, pscalaire1, pscalaire2, mo, me2, me2b;
      if (J.$eq(this.op, "/")) {
        mfrac = new B.MathFrac(1, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mfrac.MathElement$2(null, null);
        mfrac.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p1));
        mfrac.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p2));
        return mfrac;
      } else if (J.$eq(this.op, "^")) {
        msup = new B.MathSup(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        msup.MathElement$2(null, null);
        t1 = this.p1;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isJEQFonction) {
          nomfct = H.interceptedTypeCast(t1, "$isJEQFonction").getNomFct$0();
          if (nomfct === "sqrt" || nomfct === "racine")
            par = false;
          else if (nomfct === "abs")
            par = false;
          else if (nomfct === "matrice")
            par = false;
          else
            par = !(nomfct === "dtemps" || nomfct === "timed") || false;
        } else if (!!t2.$isJEQOperation)
          par = !J.$eq(H.interceptedTypeCast(t1, "$isJEQOperation").op, "_") || false;
        else
          par = false;
        t1 = this.p1;
        msup.addMathElement$1(par ? this.ajPar$1(t1.versMathML$0()) : B.StringMathBuilder_elemOrQuestion(t1));
        msup.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p2));
        return msup;
      } else if (J.$eq(this.op, "_")) {
        msub = new B.MathSub(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        msub.MathElement$2(null, null);
        msub.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p1));
        msub.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p2));
        return msub;
      } else if (J.$eq(this.op, "#")) {
        mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mrow.MathElement$2(null, null);
        mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p1));
        mrow.addMathElement$1(B.StringMathBuilder_elemOrQuestion(this.p2));
        return mrow;
      } else if (J.$eq(this.op, "*")) {
        mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mrow.MathElement$2(null, null);
        me1 = B.StringMathBuilder_elemOrQuestion(this.p1);
        t1 = this.p1;
        mrow.addMathElement$1(!!J.getInterceptor(t1).$isJEQOperation && C.JSString_methods.indexOf$1("+-", H.interceptedTypeCast(t1, "$isJEQOperation").op) !== -1 ? this.ajPar$1(me1) : me1);
        premierDansP2 = this.p2;
        if (premierDansP2 != null)
          while (true) {
            if (!(!!J.getInterceptor(premierDansP2).$isJEQOperation && premierDansP2.p1 != null))
              break;
            premierDansP2 = H.interceptedTypeCast(premierDansP2, "$isJEQOperation").p1;
          }
        t1 = this.p1;
        if (!!J.getInterceptor(t1).$isJEQFonction) {
          nomfct = H.interceptedTypeCast(t1, "$isJEQFonction").getNomFct$0();
          pscalaire1 = (nomfct === "pscalaire" || nomfct === "scalarp") && true;
        } else
          pscalaire1 = false;
        t1 = this.p2;
        if (!!J.getInterceptor(t1).$isJEQFonction) {
          nomfct = H.interceptedTypeCast(t1, "$isJEQFonction").getNomFct$0();
          pscalaire2 = (nomfct === "pscalaire" || nomfct === "scalarp") && true;
        } else
          pscalaire2 = false;
        if (!J.getInterceptor(premierDansP2).$isJEQNombre)
          t1 = pscalaire1 && pscalaire2;
        else
          t1 = true;
        if (t1) {
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1("\u00d7");
          mrow.addMathElement$1(mo);
        } else if (this.unites) {
          mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          mo.MathElement$2(null, null);
          mo.addText$1(".");
          mrow.addMathElement$1(mo);
        }
        me2 = B.StringMathBuilder_elemOrQuestion(this.p2);
        t1 = this.p2;
        mrow.addMathElement$1(!!J.getInterceptor(t1).$isJEQOperation && C.JSString_methods.indexOf$1("+-", H.interceptedTypeCast(t1, "$isJEQOperation").op) !== -1 ? this.ajPar$1(me2) : me2);
        return mrow;
      } else if (J.$eq(this.op, "-")) {
        mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mrow.MathElement$2(null, null);
        t1 = this.p1;
        if (t1 != null)
          mrow.addMathElement$1(t1.versMathML$0());
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("-");
        mrow.addMathElement$1(mo);
        t1 = this.p2;
        if (t1 != null) {
          me2 = t1.versMathML$0();
          t1 = this.p2;
          mrow.addMathElement$1(!!J.getInterceptor(t1).$isJEQOperation && C.JSString_methods.indexOf$1("+-", H.interceptedTypeCast(t1, "$isJEQOperation").op) !== -1 ? this.ajPar$1(me2) : me2);
        }
        return mrow;
      } else if (J.$eq(this.op, "+")) {
        mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mrow.MathElement$2(null, null);
        t1 = this.p1;
        if (t1 != null)
          mrow.addMathElement$1(t1.versMathML$0());
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1("+");
        mrow.addMathElement$1(mo);
        t1 = this.p2;
        if (t1 != null) {
          me2 = t1.versMathML$0();
          if (!!me2.$isMathRow && me2.children.length > 0) {
            me2b = me2;
            while (true) {
              if (!(!!J.getInterceptor(me2b).$isMathRow && me2b.children.length > 0))
                break;
              me2b = me2b.getMathElement$1(0);
            }
            t1 = me2b.text._contents;
            if (J.trim$0$s(t1.charCodeAt(0) == 0 ? t1 : t1) === "-")
              me2 = this.ajPar$1(me2);
          }
          mrow.addMathElement$1(me2);
        }
        return mrow;
      } else {
        mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mrow.MathElement$2(null, null);
        t1 = this.p1;
        if (t1 != null) {
          me1 = t1.versMathML$0();
          if (J.$eq(this.op, "\u2227")) {
            t1 = this.p1;
            t1 = !!J.getInterceptor(t1).$isJEQOperation && C.JSString_methods.indexOf$1("+-", H.interceptedTypeCast(t1, "$isJEQOperation").op) !== -1;
          } else
            t1 = false;
          mrow.addMathElement$1(t1 ? this.ajPar$1(me1) : me1);
        }
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo.addText$1(this.op);
        if (C.JSString_methods.indexOf$1("=\u2260\u2248\u223c\u2261\u2264\u2265\u226a\u226b\u221d", this.op) !== -1) {
          mo._lspace = 0.5;
          mo._rspace = 0.5;
        }
        mrow.addMathElement$1(mo);
        t1 = this.p2;
        if (t1 != null) {
          me2 = t1.versMathML$0();
          if (J.$eq(this.op, "\u2227")) {
            t1 = this.p2;
            t1 = !!J.getInterceptor(t1).$isJEQOperation && C.JSString_methods.indexOf$1("+-", H.interceptedTypeCast(t1, "$isJEQOperation").op) !== -1;
          } else
            t1 = false;
          mrow.addMathElement$1(t1 ? this.ajPar$1(me2) : me2);
        }
        return mrow;
      }
    },
    ajPar$1: function(me) {
      var mrow, mo;
      mrow = new B.MathRow(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
      mrow.MathElement$2(null, null);
      mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
      mo.MathElement$2(null, null);
      mo.addText$1("(");
      mrow.addMathElement$1(mo);
      mrow.addMathElement$1(me);
      mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
      mo.MathElement$2(null, null);
      mo.addText$1(")");
      mrow.addMathElement$1(mo);
      return mrow;
    },
    $isJEQOperation: true
  },
  JEQNombre: {
    "^": "Object;valeur",
    setUnites$0: function() {
    },
    versMathML$0: function() {
      var mn = new B.MathNumber(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
      mn.MathElement$2(null, null);
      mn.addText$1(this.valeur);
      return mn;
    },
    $isJEQNombre: true
  },
  JEQVariable: {
    "^": "Object;nom,unites,badExpr",
    setUnites$0: function() {
      this.unites = true;
    },
    versMathML$0: function() {
      var s, mo, droit, t1, tsymbole, t2, t3, me;
      s = this.nom;
      if (s === "hat" || s === "chapeau") {
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo._stretchy = true;
        mo.addText$1("^");
        return mo;
      } else if (s === "bar" || s === "barre") {
        mo = new B.MathOperator(true, 0, 0, null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
        mo.MathElement$2(null, null);
        mo._stretchy = true;
        mo.addText$1("\u00af");
        return mo;
      } else {
        droit = this.unites;
        for (t1 = new H.ListIterator($.get$StringMathBuilder_symboles_id(), 52, 0, null); t1.moveNext$0();) {
          tsymbole = t1._current;
          t2 = J.getInterceptor$asx(tsymbole);
          if (s === t2.$index(tsymbole, 0)) {
            s = t2.$index(tsymbole, 1);
            break;
          }
        }
        for (t1 = new H.ListIterator($.get$StringMathBuilder_symboles_droits(), 109, 0, null), t2 = J.getInterceptor(s); t1.moveNext$0();) {
          tsymbole = t1._current;
          t3 = J.getInterceptor$asx(tsymbole);
          if (t2.$eq(s, t3.$index(tsymbole, 0))) {
            s = t3.$index(tsymbole, 1);
            droit = true;
            break;
          }
        }
        t1 = J.getInterceptor$asx(s);
        if (t1.indexOf$1(s, ",") !== -1 || t1.indexOf$1(s, ".") !== -1 || t1.indexOf$1(s, "(") !== -1 || t1.indexOf$1(s, ")") !== -1)
          s = "?";
        t1 = J.getInterceptor$asx(s);
        if (t1.indexOf$1(s, " ") !== -1)
          s = t1.replaceAll$2(s, " ", "?");
        t1 = J.getInterceptor$asx(s);
        if (t1.indexOf$1(s, "\u00a0") !== -1)
          s = t1.replaceAll$2(s, "\u00a0", "?");
        if (this.badExpr._nativeRegExp.test(H.checkString(s)))
          s = "?";
        if (droit) {
          me = new B.MathText(null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
        } else {
          me = new B.MathIdentifier("italic", null, null, 14, H.setRuntimeTypeInfo([], [B.MathElement]), P.StringBuffer$(""));
          me.MathElement$2(null, null);
        }
        me.addText$1(s);
        return me;
      }
    },
    $isJEQVariable: true
  },
  TextMetrics: {
    "^": "Object;width,height,ascent,descent,actualBoundingBoxAscent,actualBoundingBoxDescent",
    TextMetrics$2: function(s, font) {
      var text, block, div, t1, t2, t3, t4, context, cw, ch, data, bottom1, top1, t10, top2, i, bottom2, b1;
      text = W.Element_Element$html("<span style=\"font: " + H.S(font) + "\">" + s + "</span>", null, null);
      block = W.Element_Element$html("<div style=\"display: inline-block; width: 1px; height: 0px;\"></div>", null, null);
      div = W.Element_Element$html("<div></div>", null, null);
      t1 = J.getInterceptor$x(div);
      t1.append$1(div, text);
      div.appendChild(block);
      document.body.appendChild(div);
      t2 = J.getInterceptor$x(text);
      t3 = t2.get$offset(text);
      this.width = t3.get$width(t3);
      t3 = J.getInterceptor$x(block);
      J.set$verticalAlign$x(t3.get$style(block), "bottom");
      t3 = t3.get$offset(block);
      t4 = t2.get$offset(text);
      this.height = t3.top - t4.get$top(t4);
      J.set$verticalAlign$x(block.style, "baseline");
      t4 = P.Rectangle$(C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(block.offsetLeft)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(block.offsetTop)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(block.offsetWidth)), C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(block.offsetHeight)), null);
      t2 = t2.get$offset(text);
      t2 = t4.top - t2.get$top(t2);
      this.ascent = t2;
      this.descent = this.height - t2;
      t1.remove$0(div);
      t1 = $.get$TextMetrics_canvas();
      context = J.get$context2D$x(t1);
      context.font = font;
      context.fillStyle = "white";
      context.fillRect(0, 0, t1.width, t1.height);
      context.fillStyle = "black";
      C.CanvasRenderingContext2D_methods.fillText$3(context, s, 0, this.ascent);
      cw = C.JSNumber_methods.toInt$0(Math.ceil(this.width));
      ch = C.JSNumber_methods.toInt$0(Math.ceil(this.height));
      data = J.get$data$x(P.convertNativeToDart_ImageData(context.getImageData(0, 0, cw, ch)));
      bottom1 = ch - 1;
      for (t1 = cw * ch, t2 = data.length, top1 = 0, t10 = false, top2 = 0, i = 0; i < t1; ++i) {
        if (!t10) {
          t3 = i * 4;
          if (t3 >= t2)
            return H.ioore(data, t3);
          t3 = data[t3] !== 255;
        } else
          t3 = false;
        if (t3) {
          top1 = C.JSInt_methods.$tdiv(i, cw);
          top2 = top1;
          t10 = true;
        }
        t3 = i * 4;
        if (t3 >= t2)
          return H.ioore(data, t3);
        if (data[t3] < 144) {
          top2 = C.JSInt_methods.$tdiv(i, cw);
          break;
        }
      }
      for (i = t1 - 1, bottom2 = bottom1, b1 = false; i >= 0; --i) {
        if (!b1) {
          t1 = i * 4;
          if (t1 < 0 || t1 >= t2)
            return H.ioore(data, t1);
          t1 = data[t1] !== 255;
        } else
          t1 = false;
        if (t1) {
          bottom1 = C.JSInt_methods.$tdiv(i, cw);
          bottom2 = bottom1;
          b1 = true;
        }
        t1 = i * 4;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(data, t1);
        if (data[t1] < 144) {
          bottom2 = C.JSInt_methods.$tdiv(i, cw);
          break;
        }
      }
      t1 = this.ascent;
      this.actualBoundingBoxAscent = t1 - (top1 + top2) / 2;
      this.actualBoundingBoxDescent = (bottom1 + bottom2) / 2 - t1;
    },
    static: {"^": "TextMetrics_canvas", TextMetrics$: function(s, font) {
        var t1 = new B.TextMetrics(null, null, null, null, null, null);
        t1.TextMetrics$2(s, font);
        return t1;
      }}
  }
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  _convertDartToNative_PrepareForStructuredClone: function(value) {
    var copies, copy;
    copies = [];
    copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
    new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
    return copy;
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  convertNativeToDart_ImageData: function(nativeImageData) {
    var t1, data;
    t1 = J.getInterceptor(nativeImageData);
    if (!!t1.$isImageData) {
      data = t1.get$data(nativeImageData);
      if (data.constructor === Array)
        if (typeof CanvasPixelArray !== "undefined") {
          data.constructor = CanvasPixelArray;
          data.BYTES_PER_ELEMENT = 1;
        }
      return nativeImageData;
    }
    return new P._TypedImageData(nativeImageData.data, nativeImageData.height, nativeImageData.width);
  },
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  Device_cssPrefix: function() {
    var t1 = $.Device__cachedCssPrefix;
    if (t1 == null) {
      t1 = $.Device__isFirefox;
      if (t1 == null) {
        t1 = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0);
        $.Device__isFirefox = t1;
      }
      if (t1 === true) {
        $.Device__cachedCssPrefix = "-moz-";
        t1 = "-moz-";
      } else {
        t1 = $.Device__isIE;
        if (t1 == null) {
          t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
          $.Device__isIE = t1;
        }
        if (t1 === true) {
          $.Device__cachedCssPrefix = "-ms-";
          t1 = "-ms-";
        } else if (P.Device_isOpera() === true) {
          $.Device__cachedCssPrefix = "-o-";
          t1 = "-o-";
        } else {
          $.Device__cachedCssPrefix = "-webkit-";
          t1 = "-webkit-";
        }
      }
    }
    return t1;
  },
  _convertDartToNative_PrepareForStructuredClone_findSlot: {
    "^": "Closure:4;values_1,copies_2",
    call$1: function(value) {
      var t1, $length, i;
      t1 = this.values_1;
      $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies_2.push(null);
      return $length;
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_readSlot: {
    "^": "Closure:38;copies_3",
    call$1: function(i) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_writeSlot: {
    "^": "Closure:39;copies_4",
    call$2: function(i, x) {
      var t1 = this.copies_4;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
    "^": "Closure:10;",
    call$0: function() {
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk: {
    "^": "Closure:12;findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var t1, t2, slot, copy, $length, i;
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor(e);
      if (!!t2.$isDateTime)
        return new Date(e.millisecondsSinceEpoch);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer)
        return e;
      if (!!t2.$isNativeTypedData)
        return e;
      if (!!t2.$isMap) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        t1.copy_0 = copy;
        if (copy != null)
          return copy;
        copy = {};
        t1.copy_0 = copy;
        this.writeSlot_7.call$2(slot, copy);
        t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
        return t1.copy_0;
      }
      if (!!t2.$isList) {
        $length = t2.get$length(e);
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null) {
          if (true === copy) {
            copy = new Array($length);
            this.writeSlot_7.call$2(slot, copy);
          }
          return copy;
        }
        copy = new Array($length);
        this.writeSlot_7.call$2(slot, copy);
        for (i = 0; i < $length; ++i) {
          t1 = this.call$1(t2.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t1;
        }
        return copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk_closure: {
    "^": "Closure:11;box_0,walk_8",
    call$2: function(key, value) {
      this.box_0.copy_0[key] = this.walk_8.call$1(value);
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure:4;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure:38;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure:39;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure:12;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          key = t1._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    },
    $isFunction: true
  },
  _TypedImageData: {
    "^": "Object;data>,height,width",
    $isImageData: true
  },
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this.readClasses$0();
      t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null);
      t2._cell = t1._first;
      return t2;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    contains$1: function(_, value) {
      return this.readClasses$0().contains$1(0, value);
    },
    lookup$1: function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(0, new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: function(_, value) {
      var s, result;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    clear$0: function(_) {
      this.modify$1(0, new P.CssClassSetImpl_clear_closure());
    },
    modify$1: function(_, f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isEfficientLength: true
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure:12;value_0",
    call$1: function(s) {
      return s.add$1(0, this.value_0);
    },
    $isFunction: true
  },
  CssClassSetImpl_clear_closure: {
    "^": "Closure:12;",
    call$1: function(s) {
      return s.clear$0(0);
    },
    $isFunction: true
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element0);
    },
    forEach$1: function(_, f) {
      C.JSArray_methods.forEach$1(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    contains$1: function(_, needle) {
      return false;
    },
    removeRange$2: function(_, start, end) {
      C.JSArray_methods.forEach$1(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._childNodes._this);
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return new H.ListIterator(t1, t1.length, 0, null);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure:12;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement0;
    },
    $isFunction: true
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure:12;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $isFunction: true
  }
}],
["intl", "package:intl/intl.dart", , T, {
  "^": "",
  Intl_canonicalizedLocale: function(aLocale) {
    var t1, region;
    if (aLocale === "C")
      return "en_ISO";
    if (aLocale.length < 5)
      return aLocale;
    t1 = aLocale[2];
    if (t1 !== "-" && t1 !== "_")
      return aLocale;
    region = C.JSString_methods.substring$1(aLocale, 3);
    if (region.length <= 3)
      region = region.toUpperCase();
    return aLocale[0] + aLocale[1] + "_" + region;
  }
}],
["nodes", "nodes/nodes.dart", , S, {
  "^": "",
  DNArea: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, t1, contents, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
      div.appendChild(this._b1.html$0(0));
      contents = document.createElement("div", null);
      J.get$classes$x(contents).add$1(0, "indent");
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        contents.appendChild(document.createTextNode("\n"));
      this.setStyle$1(contents);
      div.appendChild(contents);
      div.appendChild(this._b2.html$0(0));
      return div;
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      var t1, contents, hn, next;
      Z.DaxeNode.prototype.updateHTMLAfterChildrenChange$1.call(this, changed);
      t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      contents = t1[1];
      if (contents.childNodes.length > 0) {
        t1 = new W._ChildNodeListLazy(contents);
        hn = t1.get$first(t1);
        for (; hn != null; hn = next) {
          next = hn.nextSibling;
          t1 = J.getInterceptor(hn);
          if (!!t1.$isText || !!t1.$isBRElement) {
            t1 = hn.parentNode;
            if (t1 != null)
              t1.removeChild(hn);
          }
        }
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        J.appendText$1$x(contents, "\n");
    },
    updateAttributes$0: function() {
      var t1, old;
      t1 = document.getElementById(this._id).childNodes;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      old = t1[0];
      t1 = Z.Tag$(this, 0, true, null);
      this._b1 = t1;
      J.replaceWith$1$x(old, t1.html$0(0));
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return false;
    },
    DNArea$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 0, null, null);
      this._b2 = Z.Tag$(this, 1, null, null);
    },
    DNArea$fromNode$2: function(node, $parent) {
      this._b1 = Z.Tag$(this, 0, null, null);
      this._b2 = Z.Tag$(this, 1, null, null);
      this.fixLineBreaks$0();
    }
  },
  DNBlock: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, t1, contents, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      t1.get$classes(div).add$1(0, "dt_block");
      t1.get$classes(div).add$1(0, H.S(this.localName));
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
      div.appendChild(this._b1.html$0(0));
      contents = document.createElement("div", null);
      J.get$classes$x(contents).add$1(0, "indent");
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        contents.appendChild(document.createTextNode("\n"));
      div.appendChild(contents);
      return div;
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      var t1, contents, hn, next;
      Z.DaxeNode.prototype.updateHTMLAfterChildrenChange$1.call(this, changed);
      t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      contents = t1[1];
      if (contents.childNodes.length > 0) {
        t1 = new W._ChildNodeListLazy(contents);
        hn = t1.get$first(t1);
        for (; hn != null; hn = next) {
          next = hn.nextSibling;
          t1 = J.getInterceptor(hn);
          if (!!t1.$isText || !!t1.$isBRElement) {
            t1 = hn.parentNode;
            if (t1 != null)
              t1.removeChild(hn);
          }
        }
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        J.appendText$1$x(contents, "\n");
    },
    updateAttributes$0: function() {
      var t1, old;
      t1 = document.getElementById(this._id).childNodes;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      old = t1[0];
      t1 = Z.Tag$(this, 0, false, null);
      this._b1 = t1;
      J.replaceWith$1$x(old, t1.html$0(0));
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return true;
    },
    DNBlock$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 0, false, null);
      this._b2 = Z.Tag$(this, 1, false, null);
    },
    DNBlock$fromNode$2: function(node, $parent) {
      this._b1 = Z.Tag$(this, 0, false, null);
      this._b2 = Z.Tag$(this, 1, false, null);
      this.fixLineBreaks$0();
    }
  },
  DNCData: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, contents, dn;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      J.get$classes$x(span).add$1(0, "dn");
      span.appendChild(this._b1.html$0(0));
      contents = document.createElement("span", null);
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      span.appendChild(contents);
      span.appendChild(this._b2.html$0(0));
      return span;
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    toDOMNode$1: function(domDocument) {
      var t1 = this.firstChild;
      return Z.CDATASectionImpl$(domDocument, t1 != null ? J.get$nodeValue$x(t1) : null);
    },
    updateValidity$0: function() {
      Z.DaxeNode.prototype.updateValidity$0.call(this);
      this.parent.updateValidity$0();
    },
    $isDNCData: true
  },
  DNComment: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, contents, dn;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      J.get$classes$x(span).add$1(0, "dn");
      span.appendChild(this._b1.html$0(0));
      contents = document.createElement("span", null);
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      span.appendChild(contents);
      span.appendChild(this._b2.html$0(0));
      J.set$color$x(span.style, "#808080");
      return span;
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    toDOMNode$1: function(domDocument) {
      var t1 = this.firstChild;
      return Z.CommentImpl$(domDocument, t1 != null ? J.get$nodeValue$x(t1) : null);
    },
    $isDNComment: true
  },
  DNDivision: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, t1, contents, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
      div.appendChild(this._b1.html$0(0));
      contents = document.createElement("div", null);
      J.get$classes$x(contents).add$1(0, "indent");
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        contents.appendChild(document.createTextNode("\n"));
      div.appendChild(contents);
      div.appendChild(this._b2.html$0(0));
      return div;
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      var t1, contents, hn, next;
      Z.DaxeNode.prototype.updateHTMLAfterChildrenChange$1.call(this, changed);
      t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      contents = t1[1];
      if (contents.childNodes.length > 0) {
        t1 = new W._ChildNodeListLazy(contents);
        hn = t1.get$first(t1);
        for (; hn != null; hn = next) {
          next = hn.nextSibling;
          t1 = J.getInterceptor(hn);
          if (!!t1.$isText || !!t1.$isBRElement) {
            t1 = hn.parentNode;
            if (t1 != null)
              t1.removeChild(hn);
          }
        }
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        J.appendText$1$x(contents, "\n");
    },
    updateAttributes$0: function() {
      var t1, old;
      t1 = document.getElementById(this._id).childNodes;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      old = t1[0];
      t1 = Z.Tag$(this, 0, true, null);
      this._b1 = t1;
      J.replaceWith$1$x(old, t1.html$0(0));
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return true;
    },
    DNDivision$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 0, true, null);
      this._b2 = Z.Tag$(this, 1, true, null);
    },
    DNDivision$fromNode$2: function(node, $parent) {
      this._b1 = Z.Tag$(this, 0, true, null);
      this._b2 = Z.Tag$(this, 1, true, null);
      this.fixLineBreaks$0();
    }
  },
  DNDocument: {
    "^": "DaxeNode;xmlVersion,xmlEncoding?,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, dn, t1;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      J.get$classes$x(div).add$1(0, "dn");
      dn = this.firstChild;
      for (; dn != null;) {
        div.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        div.appendChild(document.createTextNode("\n"));
      return div;
    },
    toDOMNode$1: function(domDocument) {
      var dn;
      domDocument.xmlVersion = this.xmlVersion;
      domDocument.xmlEncoding = this.xmlEncoding;
      for (dn = this.firstChild; dn != null; dn = dn.nextSibling)
        domDocument.appendChild$1(dn.toDOMNode$1(domDocument));
      return domDocument;
    },
    DNDocument$0: function() {
      this.xmlVersion = "1.0";
      this.xmlEncoding = "UTF-8";
    },
    static: {DNDocument$: function() {
        var t1 = new S.DNDocument(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromNodeType$1(9);
        t1.DNDocument$0();
        return t1;
      }}
  },
  DNEmpty: {
    "^": "DaxeNode;_b1,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, t1;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      t1 = J.getInterceptor$x(span);
      t1.get$classes(span).add$1(0, "dn");
      if (this.valid !== true)
        t1.get$classes(span).add$1(0, "invalid");
      span.appendChild(this._b1.html$0(0));
      return span;
    },
    firstCursorPositionInside$0: function() {
      return;
    },
    lastCursorPositionInside$0: function() {
      return;
    },
    DNEmpty$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 2, null, null);
    }
  },
  DNEquaTexMem: {
    "^": "DaxeNode;_img,_textAtt,_labelAtt,_server,_nodes$_data,_dlg,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var t1, src;
      t1 = W.ImageElement_ImageElement(null, null, null);
      this._img = t1;
      t1.toString;
      t1.setAttribute("id", H.S(this._id));
      this._img.setAttribute("class", "dn");
      t1 = this._nodes$_data;
      if (t1 != null) {
        src = "data:image/png;base64," + H.S(t1);
        this._img.setAttribute("src", src);
      }
      t1 = J.get$onLoad$x(this._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNEquaTexMem_html_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNEquaTexMem_html_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$verticalAlign$x(this._img.style, "middle");
      return this._img;
    },
    firstCursorPositionInside$0: function() {
      return;
    },
    lastCursorPositionInside$0: function() {
      return;
    },
    attributeDialog$1: function(okfct) {
      var text, labelValue, t1, t2;
      text = this.getAttribute$1(0, this._textAtt);
      labelValue = this.getAttribute$1(0, this._labelAtt);
      t1 = this._server;
      t2 = this._labelAtt;
      t1 = new S.TeXEquationDialog(null, null, null, null, t1, null);
      t1._equationText = text;
      t1._labelName = t2;
      t1._labelValue = labelValue;
      t1._okfct = new S.DNEquaTexMem_attributeDialog_closure(this, okfct);
      this._dlg = t1;
      t1.show$0(0);
    },
    attributeDialog$0: function() {
      return this.attributeDialog$1(null);
    },
    updateAttributes$0: function() {
      this.updateData$0();
    },
    updateData$0: function() {
      this.getData$1(this.getAttribute$1(0, this._textAtt)).then$2$onError(new S.DNEquaTexMem_updateData_closure(this), new S.DNEquaTexMem_updateData_closure0());
    },
    getData$1: function(text) {
      var t1, completer;
      if (text == null || J.$eq(text, ""))
        text = "?";
      t1 = P.String;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
      W.HttpRequest_request(H.S(this._server) + "?" + H.S(P.Uri__uriEncode(C.List_KIf, text, C.Utf8Codec_false, false)), "GET", null, null, null, "arraybuffer", null, null).then$2$onError(new S.DNEquaTexMem_getData_closure(completer), new S.DNEquaTexMem_getData_closure0(this, completer));
      return completer.future;
    },
    toDOMNode$1: function(domDocument) {
      var el, t1, att;
      el = Z.ElementImpl$NS(domDocument, this._namespaceURI, this.get$nodeName(this));
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        att = t1._current;
        el.setAttributeNS$3(0, att.get$namespaceURI(), att.get$name(att), att.get$value(att));
      }
      t1 = this._nodes$_data;
      if (t1 != null)
        el.appendChild$1(Z.TextImpl$(domDocument, t1));
      return el;
    },
    DNEquaTexMem$fromNode$2: function(node, $parent) {
      var t1;
      this._textAtt = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "texteAtt", "texte");
      this._server = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "serveur", null);
      t1 = J.getInterceptor$x(node);
      if (t1.get$firstChild(node) != null)
        this._nodes$_data = J.get$nodeValue$x(t1.get$firstChild(node));
      else
        this._nodes$_data = null;
    },
    DNEquaTexMem$fromRef$1: function(elementRef) {
      this._textAtt = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "texteAtt", null);
      this._labelAtt = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "labelAtt", null);
      this._server = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "serveur", null);
    }
  },
  DNEquaTexMem_html_closure: {
    "^": "Closure:28;this_0",
    call$1: function($event) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.get$naturalWidth$x(t1._img);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 500)
        J.set$width$x(t1._img, 500);
      return;
    },
    $isFunction: true
  },
  DNEquaTexMem_html_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.attributeDialog$0();
    },
    $isFunction: true
  },
  DNEquaTexMem_attributeDialog_closure: {
    "^": "Closure:10;this_0,okfct_1",
    call$0: function() {
      var t1, t2, text, label, new_attributes, edit;
      t1 = this.this_0;
      t2 = t1._dlg;
      text = t2._equationText;
      label = t2._labelValue;
      new_attributes = H.setRuntimeTypeInfo([], [Z.DaxeAttr]);
      new_attributes.push(Z.DaxeAttr$(t1._textAtt, text));
      if (t1._labelAtt != null && !J.$eq(label, ""))
        new_attributes.push(Z.DaxeAttr$(t1._labelAtt, label));
      edit = Z.UndoableEdit$changeAttributes(t1, new_attributes, false);
      $.doc.doNewEdit$1(edit);
      t1.updateData$0();
      return;
    },
    $isFunction: true
  },
  DNEquaTexMem_updateData_closure: {
    "^": "Closure:0;this_0",
    call$1: function(data) {
      var t1, t2, t3;
      t1 = this.this_0;
      t1._nodes$_data = data;
      t1.updateHTML$0();
      t2 = $.page;
      t3 = t1.parent;
      t1 = t3.offsetOf$1(t1);
      if (typeof t1 !== "number")
        return t1.$add();
      t1 = Z.Position$(t3, t1 + 1);
      t2._cursor.moveTo$1(0, t1);
    },
    $isFunction: true
  },
  DNEquaTexMem_updateData_closure0: {
    "^": "Closure:15;",
    call$1: function(error) {
      window.alert(J.toString$0(error));
    },
    $isFunction: true
  },
  DNEquaTexMem_getData_closure: {
    "^": "Closure:40;completer_0",
    call$1: function(request) {
      var response, t1, t2;
      response = J.get$response$x(request);
      t1 = J.getInterceptor(response);
      t2 = this.completer_0;
      if (!!t1.$isByteBuffer)
        t2.complete$1(0, M._CryptoUtils_bytesToBase64(t1.asUint8List$2(response, 0, null), false, false));
      else
        t2.completeError$1(new Z.DaxeException("request response is not a ByteBuffer", null));
    },
    $isFunction: true
  },
  DNEquaTexMem_getData_closure0: {
    "^": "Closure:15;this_1,completer_2",
    call$1: function(error) {
      this.completer_2.completeError$1(new Z.DaxeException("Error getting the equation image from the server " + H.S(this.this_1._server) + " : " + H.S(error), null));
    },
    $isFunction: true
  },
  TeXEquationDialog: {
    "^": "Object;_equationText,_labelName,_labelValue,_okfct,_server,_nodes$_data",
    _okfct$0: function() {
      return this._okfct.call$0();
    },
    show$0: function(_) {
      var div1, div2, div3, form, img, ta, t1, div_label, label_name, input_label, div_preview, bPreview, div_buttons, bCancel, bOk;
      div1 = document.createElement("div", null);
      div1.id = "dlg1";
      J.get$classes$x(div1).add$1(0, "dlg1");
      div2 = document.createElement("div", null);
      J.get$classes$x(div2).add$1(0, "dlg2");
      div3 = document.createElement("div", null);
      J.get$classes$x(div3).add$1(0, "dlg3");
      form = document.createElement("form", null);
      img = W.ImageElement_ImageElement(null, null, null);
      img.id = "eqimg";
      J.set$src$x(img, this.getImgSrc$0());
      form.appendChild(img);
      ta = document.createElement("textarea", null);
      ta.id = "eqtext";
      t1 = this._equationText;
      if (t1 != null)
        J.set$value$x(ta, t1);
      J.set$width$x(ta.style, "100%");
      J.set$height$x(ta.style, "4em");
      ta.setAttribute("spellcheck", "false");
      t1 = J.get$onInput$x(ta);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TeXEquationDialog_show_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      form.appendChild(ta);
      if (this._labelName != null) {
        div_label = document.createElement("div", null);
        label_name = document.createElement("span", null);
        label_name.textContent = this._labelName;
        div_label.appendChild(label_name);
        div_label.appendChild(document.createTextNode(" "));
        input_label = W.InputElement_InputElement("text");
        input_label.id = "eqlabel";
        t1 = this._labelValue;
        if (t1 != null)
          J.set$value$x(input_label, t1);
        div_label.appendChild(input_label);
        form.appendChild(div_label);
      }
      div_preview = document.createElement("div", null);
      bPreview = document.createElement("button", null);
      t1 = $.Strings_map.$index(0, "equation.preview");
      bPreview.toString;
      bPreview.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bPreview);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TeXEquationDialog_show_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_preview.appendChild(bPreview);
      form.appendChild(div_preview);
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bCancel = document.createElement("button", null);
      bCancel.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "button.Cancel");
      bCancel.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bCancel);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TeXEquationDialog_show_closure1(div1)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bCancel);
      bOk = document.createElement("button", null);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.OK");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.TeXEquationDialog_show_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bOk);
      form.appendChild(div_buttons);
      div3.appendChild(form);
      div2.appendChild(div3);
      div1.appendChild(div2);
      document.body.appendChild(div1);
      ta.focus();
    },
    ok$1: function($event) {
      this._equationText = J.get$value$x(document.querySelector("textarea#eqtext"));
      if (this._labelName != null)
        this._labelValue = J.get$value$x(document.querySelector("input#eqlabel"));
      J.remove$0$ax(document.querySelector("div#dlg1"));
      if ($event != null)
        J.preventDefault$0$x($event);
      this._okfct$0();
    },
    getImgSrc$0: function() {
      var text = this._equationText;
      if (text == null || J.$eq(text, ""))
        text = "?";
      return H.S(this._server) + "?" + H.S(P.Uri__uriEncode(C.List_KIf, text, C.Utf8Codec_false, false));
    }
  },
  TeXEquationDialog_show_closure: {
    "^": "Closure:28;this_0",
    call$1: function($event) {
      var ta, t1, text, t2, t3;
      ta = document.querySelector("textarea#eqtext");
      t1 = J.getInterceptor$x(ta);
      text = t1.get$value(ta);
      t2 = J.getInterceptor$asx(text);
      t3 = t2.get$length(text);
      if (typeof t3 !== "number")
        return t3.$gt();
      if (t3 > 0 && t2.contains$1(text, "\n") === true) {
        t1.set$value(ta, t2.replaceAll$2(text, "\n", ""));
        this.this_0.ok$1(null);
      }
      return;
    },
    $isFunction: true
  },
  TeXEquationDialog_show_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      var t1 = this.this_1;
      J.preventDefault$0$x($event);
      t1._equationText = J.get$value$x(document.querySelector("textarea#eqtext"));
      J.set$src$x(document.querySelector("img#eqimg"), t1.getImgSrc$0());
      return;
    },
    $isFunction: true
  },
  TeXEquationDialog_show_closure1: {
    "^": "Closure:29;div1_2",
    call$1: function($event) {
      return J.remove$0$ax(this.div1_2);
    },
    $isFunction: true
  },
  TeXEquationDialog_show_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.ok$1($event);
    },
    $isFunction: true
  },
  DNEquationMem: {
    "^": "DaxeNode;_img,_textAtt,_nodes$_data,_dlg,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var t1, src;
      t1 = W.ImageElement_ImageElement(null, null, null);
      this._img = t1;
      t1.toString;
      t1.setAttribute("id", H.S(this._id));
      this._img.setAttribute("class", "dn");
      t1 = this._nodes$_data;
      if (t1 != null) {
        src = "data:image/png;base64," + H.S(t1);
        this._img.setAttribute("src", src);
      }
      t1 = J.get$onLoad$x(this._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNEquationMem_html_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNEquationMem_html_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$verticalAlign$x(this._img.style, "middle");
      return this._img;
    },
    firstCursorPositionInside$0: function() {
      return;
    },
    lastCursorPositionInside$0: function() {
      return;
    },
    attributeDialog$1: function(okfct) {
      var text, t1;
      text = this.getAttribute$1(0, this._textAtt);
      if (text == null)
        text = "";
      t1 = new B.EquationDialog(null, null, null, null, null);
      t1._equations$_equationText = text;
      t1._equations$_labelName = null;
      t1._equations$_labelValue = null;
      t1._equations$_okfct = new S.DNEquationMem_attributeDialog_closure(this, okfct);
      this._dlg = t1;
      t1.show$0(0);
    },
    attributeDialog$0: function() {
      return this.attributeDialog$1(null);
    },
    updateAttributes$0: function() {
      var sb, canvas, t1, _base, canvas2;
      sb = B.StringMathBuilder$(this.getAttribute$1(0, this._textAtt));
      canvas = W.CanvasElement_CanvasElement(300, 500);
      t1 = sb._rootElement;
      _base = B.MathBase$(J.get$context2D$x(canvas), 16, t1, 15);
      t1 = _base.getWidth$0();
      canvas2 = W.CanvasElement_CanvasElement(_base.getHeight$0(), t1);
      t1 = sb._rootElement;
      B.MathBase$(J.get$context2D$x(canvas2), 16, t1, 15).paint$1(canvas2.getContext("2d"));
      this._nodes$_data = J.substring$1$s(canvas2.toDataURL("image/png", null), 22);
      this.updateHTML$0();
    },
    toDOMNode$1: function(domDocument) {
      var el, t1, att, sb, towrite, t2;
      el = Z.ElementImpl$NS(domDocument, this._namespaceURI, this.get$nodeName(this));
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        att = t1._current;
        el.setAttributeNS$3(0, att.get$namespaceURI(), att.get$name(att), att.get$value(att));
      }
      if (this._nodes$_data != null) {
        sb = P.StringBuffer$("");
        towrite = this._nodes$_data;
        for (; t1 = J.getInterceptor(towrite), !t1.$eq(towrite, "");) {
          t2 = t1.get$length(towrite);
          if (typeof t2 !== "number")
            return t2.$le();
          if (t2 <= 76) {
            sb._contents += typeof towrite === "string" ? towrite : H.S(towrite);
            towrite = "";
          } else {
            t1 = t1.substring$2(towrite, 0, 76);
            t1 = sb._contents += t1;
            sb._contents = t1 + "\n";
            towrite = C.JSString_methods.substring$1(towrite, 76);
          }
        }
        t1 = sb._contents;
        el.appendChild$1(Z.TextImpl$(domDocument, t1.charCodeAt(0) == 0 ? t1 : t1));
      }
      return el;
    },
    DNEquationMem$fromNode$2: function(node, $parent) {
      var t1;
      this._textAtt = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "texteAtt", "src");
      t1 = J.getInterceptor$x(node);
      if (t1.get$firstChild(node) != null)
        this._nodes$_data = J.replaceAll$2$s(J.get$nodeValue$x(t1.get$firstChild(node)), "\n", "");
      else
        this._nodes$_data = null;
      B.MathBase_loadFonts();
    }
  },
  DNEquationMem_html_closure: {
    "^": "Closure:28;this_0",
    call$1: function($event) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.get$naturalWidth$x(t1._img);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 500)
        J.set$width$x(t1._img, 500);
      return;
    },
    $isFunction: true
  },
  DNEquationMem_html_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.attributeDialog$0();
    },
    $isFunction: true
  },
  DNEquationMem_attributeDialog_closure: {
    "^": "Closure:10;this_0,okfct_1",
    call$0: function() {
      var t1, text, t2, t3, edit, src;
      t1 = this.this_0;
      text = t1._dlg._equations$_equationText;
      t2 = document.getElementById(t1._id);
      t3 = t1._textAtt;
      if (t2 != null) {
        edit = Z.UndoableEdit$changeAttribute(t1, Z.DaxeAttr$(t3, text), false);
        $.doc.doNewEdit$1(edit);
      } else
        t1.setAttribute$2(0, t3, text);
      t2 = t1._dlg.getData$0();
      t1._nodes$_data = t2;
      if (t1._img != null) {
        src = "data:image/png;base64," + H.S(t2);
        t1._img.setAttribute("src", src);
      }
      t2 = J.get$onLoad$x(t1._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.DNEquationMem_attributeDialog__closure(t1)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
    },
    $isFunction: true
  },
  DNEquationMem_attributeDialog__closure: {
    "^": "Closure:28;this_2",
    call$1: function(e) {
      var t1, t2, t3;
      t1 = $.page;
      t2 = this.this_2;
      t3 = t2.parent;
      t2 = t3.offsetOf$1(t2);
      if (typeof t2 !== "number")
        return t2.$add();
      t2 = Z.Position$(t3, t2 + 1);
      t1._cursor.moveTo$1(0, t2);
      return;
    },
    $isFunction: true
  },
  DNFile: {
    "^": "DaxeNode;_b1,_b2,_img,_srcAtt,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, t1, contents, src;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      t1.get$classes(div).add$1(0, "dt_block");
      t1.get$classes(div).add$1(0, H.S(this.localName));
      div.appendChild(this._b1.html$0(0));
      contents = document.createElement("div", null);
      J.get$classes$x(contents).add$1(0, "indent");
      this._img = W.ImageElement_ImageElement(null, null, null);
      src = this.getAttribute$1(0, this._srcAtt);
      this.copyAttrFromXml$1(this._img);
      this.writeSrc$2(this._img, src);
      t1 = J.get$onLoad$x(this._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNFile_html_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = J.get$onClick$x(this._img);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNFile_html_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      contents.appendChild(this._img);
      contents.appendChild(document.createTextNode("\n"));
      div.appendChild(contents);
      return div;
    },
    writeSrc$2: function(img, umbNodeId) {
      W.HttpRequest_getString(C.JSString_methods.$add(C.JSString_methods.$add("/Umbraco/Api/DtAwas/GetImageSrcForDtDaxe?id=", J.$eq(umbNodeId, "") ? "1064" : umbNodeId) + "&crop=", this.getAttribute$1(0, "data-img-crop")), null, null).then$1(new S.DNFile_writeSrc_onDataLoaded(img));
    },
    firstCursorPositionInside$0: function() {
      return;
    },
    lastCursorPositionInside$0: function() {
      return;
    },
    DNFile$fromNode$2: function(node, $parent) {
      this._srcAtt = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "srcAtt", "data-toattr-src");
      this._b1 = Z.Tag$(this, 0, false, null);
      this._b2 = Z.Tag$(this, 1, false, null);
    },
    DNFile$fromRef$1: function(elementRef) {
      this._srcAtt = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "srcAtt", "data-toattr-src");
      this._b1 = Z.Tag$(this, 0, false, null);
      this._b2 = Z.Tag$(this, 1, false, null);
    },
    static: {DNFile$fromRef: function(elementRef) {
        var t1 = new S.DNFile(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromRef$1(elementRef);
        t1.DNFile$fromRef$1(elementRef);
        return t1;
      }, DNFile$fromNode: function(node, $parent) {
        var t1 = new S.DNFile(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
        t1.DNFile$fromNode$2(node, $parent);
        return t1;
      }}
  },
  DNFile_html_closure: {
    "^": "Closure:28;this_0",
    call$1: function($event) {
      var t1, t2;
      t1 = this.this_0;
      t2 = J.get$naturalWidth$x(t1._img);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 500)
        J.set$width$x(t1._img, 500);
      t2 = $.page._cursor.selectionStart;
      if (t2 != null && t2.$gt(0, Z.Position$(t1, 0)))
        $.page._cursor.updateCaretPosition$1(false);
      return;
    },
    $isFunction: true
  },
  DNFile_html_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.attributeDialog$0();
    },
    $isFunction: true
  },
  DNFile_writeSrc_onDataLoaded: {
    "^": "Closure:41;img_0",
    call$1: function(responseText) {
      var data, t1;
      data = C.JsonCodec_null_null.decode$1(responseText);
      t1 = this.img_0;
      t1.toString;
      t1.setAttribute("src", J.toString$0(data));
    },
    $isFunction: true
  },
  DNForm: {
    "^": "DaxeNode;childrenRefs,attRefs,attributeControls,simpleField,control,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    init$0: function() {
      if (this.attRefs.length > 0)
        this.attributeControls = P.HashMap_HashMap(null, null, null, P.String, S.SimpleTypeControl);
      this.addMissingChildren$0();
    },
    addMissingChildren$0: function() {
      var t1, currentChild, childRef, t2, found, dn, last;
      for (t1 = this.childrenRefs, t1 = new H.ListIterator(t1, t1.length, 0, null), currentChild = null; t1.moveNext$0();) {
        childRef = t1._current;
        for (t2 = this.get$childNodes(this), t2 = new H.ListIterator(t2, t2.length, 0, null), found = false; t2.moveNext$0();) {
          dn = t2._current;
          if (J.$eq(dn.get$ref(), childRef)) {
            currentChild = dn;
            found = true;
          }
        }
        if (!found) {
          dn = Z.NodeFactory_create(childRef, "element");
          if (currentChild != null)
            if (currentChild.get$nextSibling() == null) {
              last = this.get$lastChild(this);
              if (last != null)
                last.set$nextSibling(dn);
              else
                this.firstChild = dn;
              J.set$parent$x(dn, this);
            } else
              this.insertBefore$2(0, dn, currentChild.get$nextSibling());
          else {
            t2 = this.firstChild;
            if (t2 != null)
              this.insertBefore$2(0, dn, t2);
            else {
              last = this.get$lastChild(this);
              if (last != null)
                last.set$nextSibling(dn);
              else
                this.firstChild = dn;
              J.set$parent$x(dn, this);
            }
          }
          currentChild = dn;
        }
      }
    },
    html$0: function(_) {
      var bHelp, tr, td, t1, t2, t3, t4, value, div, spanTitle, table, childRef, dn, childHTML, colspan;
      bHelp = this._nodes$_makeHelpButton$2(this.ref, null);
      if (this.simpleField === true) {
        tr = document.createElement("tr", null);
        tr.id = H.S(this._id);
        J.get$classes$x(tr).add$1(0, "dn");
        td = document.createElement("td", null);
        td.appendChild(bHelp);
        tr.appendChild(td);
        td = document.createElement("td", null);
        td.textContent = $.doc.cfg.elementTitle$1(this.ref);
        t1 = $.doc.cfg;
        t2 = this.parent.get$ref();
        t3 = this.ref;
        t4 = J.getInterceptor$x(td);
        if (t1._schema.requiredElement$2(t2, t3))
          t4.get$classes(td).add$1(0, "required");
        else
          t4.get$classes(td).add$1(0, "optional");
        tr.appendChild(td);
        td = document.createElement("td", null);
        t1 = this.firstChild;
        value = t1 != null ? J.get$nodeValue$x(t1) : "";
        t1 = S.SimpleTypeControl$forElement(this.ref, value, new S.DNForm_html_closure(this));
        this.control = t1;
        td.appendChild(t1.html$0(0));
        tr.appendChild(td);
        t1 = this.parent;
        if (!!J.getInterceptor(t1).$isDNForm)
          H.interceptedTypeCast(t1, "$isDNForm").addPlusMinusButtons$2(tr, this);
        return tr;
      } else {
        div = document.createElement("div", null);
        div.id = H.S(this._id);
        t1 = J.getInterceptor$x(div);
        t1.get$classes(div).add$1(0, "dn");
        t1.get$classes(div).add$1(0, "form");
        spanTitle = document.createElement("span", null);
        t1 = J.getInterceptor$x(spanTitle);
        t1.get$classes(spanTitle).add$1(0, "form_title");
        spanTitle.appendChild(bHelp);
        spanTitle.appendChild(document.createTextNode(" "));
        t2 = $.doc.cfg.elementTitle$1(this.ref);
        spanTitle.appendChild(document.createTextNode(t2));
        t2 = $.doc.cfg;
        t3 = this.parent.get$ref();
        t4 = this.ref;
        if (t2._schema.requiredElement$2(t3, t4))
          t1.get$classes(spanTitle).add$1(0, "required");
        else
          t1.get$classes(spanTitle).add$1(0, "optional");
        div.appendChild(spanTitle);
        table = document.createElement("table", null);
        for (t1 = this.attRefs, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          table.appendChild(this.attributeHTML$1(t1._current));
        for (t1 = this.childrenRefs, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          childRef = t1._current;
          for (t2 = this.get$childNodes(this), t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
            dn = t2._current;
            if (J.$eq(dn.get$ref(), childRef)) {
              dn.set$userCannotRemove(true);
              childHTML = dn.html$0(0);
              if (!!J.getInterceptor(childHTML).$isTableRowElement)
                tr = childHTML;
              else {
                tr = document.createElement("tr", null);
                if (!dn.$isDNForm) {
                  td = document.createElement("td", null);
                  td.appendChild(this._nodes$_makeHelpButton$2(dn.ref, null));
                  tr.appendChild(td);
                  colspan = 2;
                } else
                  colspan = 3;
                td = document.createElement("td", null);
                J.set$colSpan$x(td, colspan);
                td.appendChild(childHTML);
                tr.appendChild(td);
                this.addPlusMinusButtons$2(tr, dn);
              }
              table.appendChild(tr);
            }
          }
        }
        div.appendChild(table);
        return div;
      }
    },
    getHTMLContentsNode$0: function() {
      var t1, t2;
      t1 = this.simpleField;
      t2 = this._id;
      if (t1 === true) {
        t1 = document.getElementById(t2).childNodes;
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return t1[2];
      } else {
        t1 = document.getElementById(t2).childNodes;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        return t1[1];
      }
    },
    attributeHTML$1: function(refAttr) {
      var t1, $name, tr, td, t2, value, defaultValue, attributeControl;
      t1 = {};
      $name = $.doc.cfg.attributeQualifiedName$2(this.ref, refAttr);
      tr = document.createElement("tr", null);
      td = document.createElement("td", null);
      td.appendChild(this._nodes$_makeHelpButton$2(this.ref, refAttr));
      tr.appendChild(td);
      td = document.createElement("td", null);
      td.textContent = $.doc.cfg.attributeTitle$2(this.ref, refAttr);
      t2 = J.getInterceptor$x(td);
      if ($.doc.cfg._schema.isRequired$1(refAttr))
        t2.get$classes(td).add$1(0, "required");
      else
        t2.get$classes(td).add$1(0, "optional");
      tr.appendChild(td);
      td = document.createElement("td", null);
      value = this.getAttribute$1(0, $name);
      defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(refAttr);
      if (value == null)
        value = defaultValue != null ? defaultValue : "";
      t1.attributeControl_0 = null;
      attributeControl = S.SimpleTypeControl$forAttribute(this.ref, refAttr, value, true, new S.DNForm_attributeHTML_closure(t1, this, refAttr));
      t1.attributeControl_0 = attributeControl;
      this.attributeControls.$indexSet(0, $name, attributeControl);
      td.appendChild(t1.attributeControl_0.html$0(0));
      tr.appendChild(td);
      tr.appendChild(document.createElement("td", null));
      return tr;
    },
    addPlusMinusButtons$2: function(tr, dn) {
      var td, t1, bPlus, bMinus;
      td = document.createElement("td", null);
      if ($.doc.cfg._schema.multipleChildren$2(this.ref, dn.ref)) {
        t1 = dn.nextSibling;
        if (t1 == null || !J.$eq(t1.get$ref(), dn.ref))
          if (dn.firstChild != null || !dn.$isDNForm) {
            bPlus = document.createElement("button", null);
            bPlus.setAttribute("type", "button");
            t1 = J.getInterceptor$x(bPlus);
            t1.set$value(bPlus, "+");
            bPlus.textContent = "+";
            t1 = t1.get$onClick(bPlus);
            H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNForm_addPlusMinusButtons_closure(this, dn)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
            td.appendChild(bPlus);
          }
        if (!(dn.get$previousSibling() != null && J.$eq(dn.get$previousSibling().get$ref(), dn.ref))) {
          t1 = dn.nextSibling;
          t1 = t1 != null && J.$eq(t1.get$ref(), dn.ref);
        } else
          t1 = true;
        if (t1) {
          bMinus = document.createElement("button", null);
          bMinus.setAttribute("type", "button");
          t1 = J.getInterceptor$x(bMinus);
          t1.set$value(bMinus, "-");
          bMinus.textContent = "-";
          t1 = t1.get$onClick(bMinus);
          H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNForm_addPlusMinusButtons_closure0(dn)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
          td.appendChild(bMinus);
        }
      }
      tr.appendChild(td);
    },
    attributeDialog$1: function(okfct) {
    },
    attributeDialog$0: function() {
      return this.attributeDialog$1(null);
    },
    updateHTML$0: function() {
      var t1, value;
      if (this.simpleField !== true) {
        Z.DaxeNode.prototype.updateHTML$0.call(this);
        return;
      }
      t1 = this.firstChild;
      value = t1 != null ? J.get$nodeValue$x(t1) : "";
      if (!J.$eq(this.control.value, value))
        this.control.setValue$1(value);
      this.updateButtons$0();
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      this.updateHTML$0();
    },
    updateButtons$0: function() {
      var tr, t1;
      if (!!J.getInterceptor(this.parent).$isDNForm) {
        tr = document.getElementById(this._id);
        tr.toString;
        t1 = new W._ChildNodeListLazy(tr);
        J.remove$0$ax(t1.get$last(t1));
        H.interceptedTypeCast(this.parent, "$isDNForm").addPlusMinusButtons$2(tr, this);
      }
    },
    updateAttributes$0: function() {
      var t1, i, refAttr, $name, value, defaultValue;
      document.getElementById(this._id);
      t1 = "#" + H.S(this._id) + ">table";
      document.querySelector(t1);
      for (t1 = this.attRefs, t1 = new H.ListIterator(t1, t1.length, 0, null), i = 0; t1.moveNext$0();) {
        refAttr = t1._current;
        $name = $.doc.cfg.attributeQualifiedName$2(this.ref, refAttr);
        value = this.getAttribute$1(0, $name);
        defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(refAttr);
        if (value == null)
          value = defaultValue != null ? defaultValue : "";
        this.attributeControls.$index(0, $name).setValue$1(value);
        ++i;
      }
    },
    newlineAfter$0: function() {
      return this.childrenRefs.length !== 0;
    },
    toDOMNode$1: function(domDocument) {
      var el, t1, att, dn;
      if (this.childrenRefs.length === 0)
        return Z.DaxeNode.prototype.toDOMNode$1.call(this, domDocument);
      el = Z.ElementImpl$NS(domDocument, this._namespaceURI, this.get$nodeName(this));
      for (t1 = J.get$iterator$ax(this.attributes); t1.moveNext$0();) {
        att = t1._current;
        el.setAttributeNS$3(0, att.get$namespaceURI(), att.get$name(att), att.get$value(att));
      }
      el.appendChild$1(Z.TextImpl$(domDocument, "\n"));
      for (dn = this.firstChild; dn != null; dn = dn.get$nextSibling()) {
        t1 = J.getInterceptor$x(dn);
        if (t1.get$firstChild(dn) == null)
          t1 = t1.get$attributes(dn) != null && J.get$length$asx(t1.get$attributes(dn)) > 0;
        else
          t1 = true;
        if (t1) {
          el.appendChild$1(dn.toDOMNode$1(domDocument));
          el.appendChild$1(Z.TextImpl$(domDocument, "\n"));
        }
      }
      return el;
    },
    _nodes$_makeHelpButton$2: function(elementRef, attributeRef) {
      var bHelp, t1, t2;
      bHelp = document.createElement("button", null);
      bHelp.setAttribute("type", "button");
      t1 = J.getInterceptor$x(bHelp);
      t1.get$classes(bHelp).add$1(0, "help");
      t1.set$value(bHelp, "?");
      bHelp.textContent = "?";
      t2 = $.doc;
      if (attributeRef == null) {
        bHelp.title = t2.cfg.documentation$1(elementRef);
        t1 = t1.get$onClick(bHelp);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNForm__makeHelpButton_closure(elementRef)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      } else {
        bHelp.title = t2.cfg.attributeDocumentation$2(elementRef, attributeRef);
        t1 = t1.get$onClick(bHelp);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNForm__makeHelpButton_closure0(elementRef, attributeRef)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
      return bHelp;
    },
    DNForm$fromRef$1: function(elementRef) {
      var t1, t2;
      t1 = $.doc.cfg;
      t2 = this.ref;
      this.childrenRefs = t1._schema.subElements$1(t2);
      t2 = $.doc.cfg;
      t1 = this.ref;
      t1 = t2._schema.elementAttributes$1(t1);
      this.attRefs = t1;
      this.simpleField = this.childrenRefs.length === 0 && t1.length === 0;
      this.init$0();
    },
    DNForm$fromNode$2: function(node, $parent) {
      var t1, t2, prev, n, dn, children;
      t1 = $.doc.cfg;
      t2 = this.ref;
      this.childrenRefs = t1._schema.subElements$1(t2);
      t2 = $.doc.cfg;
      t1 = this.ref;
      t1 = t2._schema.elementAttributes$1(t1);
      this.attRefs = t1;
      this.simpleField = this.childrenRefs.length === 0 && t1.length === 0;
      t1 = J.getInterceptor$x(node);
      if (t1.get$childNodes(node) != null)
        for (t1 = J.get$iterator$ax(t1.get$childNodes(node)), prev = null; t1.moveNext$0(); prev = dn) {
          n = t1.get$current();
          if (this.simpleField === true && J.get$nodeType$x(n) === 3) {
            dn = new S.ParentUpdatingDNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
            dn.DaxeNode$fromNode$3$createChildren(n, this, true);
          } else
            dn = Z.NodeFactory_createFromNode(n, this);
          if (prev == null)
            this.firstChild = dn;
          else
            prev.set$nextSibling(dn);
        }
      if (this.simpleField !== true) {
        children = this.get$childNodes(this);
        for (t1 = new H.ListIterator(children, children.length, 0, null); t1.moveNext$0();) {
          dn = t1._current;
          if (!!J.getInterceptor(dn).$isDNText)
            this.removeChild$1(dn);
        }
      }
      this.init$0();
    },
    $isDNForm: true,
    static: {DNForm$fromNode: function(node, $parent) {
        var t1 = new S.DNForm(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromNode$3$createChildren(node, $parent, false);
        t1.DNForm$fromNode$2(node, $parent);
        return t1;
      }}
  },
  DNForm_html_closure: {
    "^": "Closure:10;this_0",
    call$0: function() {
      var t1, value, edit, t2, t3;
      t1 = this.this_0;
      value = t1.control.value;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "form.text_edition"));
      t2 = t1.firstChild;
      if (!!J.getInterceptor(t2).$isDNText) {
        t2 = Z.UndoableEdit$removeNode(t2, false);
        edit.subEdits.push(t2);
      }
      if (!J.$eq(value, "")) {
        t2 = Z.Position$(t1, 0);
        t3 = new S.ParentUpdatingDNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
        t3.DaxeNode$text$1(value);
        t3 = Z.UndoableEdit$insertNode(t2, t3, false);
        edit.subEdits.push(t3);
      }
      $.doc.doNewEdit$1(edit);
      t1.updateButtons$0();
      return;
    },
    $isFunction: true
  },
  DNForm_attributeHTML_closure: {
    "^": "Closure:10;box_0,this_1,refAttr_2",
    call$0: function() {
      var t1, t2, value, $name, defaultValue, attr;
      t1 = this.this_1;
      t2 = this.refAttr_2;
      value = this.box_0.attributeControl_0.value;
      $name = $.doc.cfg.attributeQualifiedName$2(t1.ref, t2);
      defaultValue = $.doc.cfg._schema.defaultAttributeValue$1(t2);
      t2 = J.getInterceptor(value);
      if (t2.$eq(value, "") && defaultValue == null || t2.$eq(value, defaultValue))
        attr = Z.DaxeAttr$($name, null);
      else
        attr = !t2.$eq(value, "") || defaultValue != null ? Z.DaxeAttr$($name, value) : null;
      if (attr != null)
        $.doc.doNewEdit$1(Z.UndoableEdit$changeAttribute(t1, attr, false));
      return;
    },
    $isFunction: true
  },
  DNForm_addPlusMinusButtons_closure: {
    "^": "Closure:28;this_0,dn_1",
    call$1: function($event) {
      var t1, t2, dn, t3;
      t1 = this.this_0;
      t2 = this.dn_1;
      dn = Z.NodeFactory_create(t2.ref, "element");
      t3 = $.doc;
      t2 = t1.offsetOf$1(t2);
      if (typeof t2 !== "number")
        return t2.$add();
      t3.insertNode$2(0, dn, Z.Position$(t1, t2 + 1));
      return;
    },
    $isFunction: true
  },
  DNForm_addPlusMinusButtons_closure0: {
    "^": "Closure:28;dn_2",
    call$1: function($event) {
      return $.doc.removeNode$1(this.dn_2);
    },
    $isFunction: true
  },
  DNForm__makeHelpButton_closure: {
    "^": "Closure:28;elementRef_0",
    call$1: function($event) {
      return new Z.HelpDialog(this.elementRef_0, null).show$0(0);
    },
    $isFunction: true
  },
  DNForm__makeHelpButton_closure0: {
    "^": "Closure:28;elementRef_1,attributeRef_2",
    call$1: function($event) {
      return new Z.HelpDialog(this.elementRef_1, this.attributeRef_2).show$0(0);
    },
    $isFunction: true
  },
  DNItem: {
    "^": "DaxeNode;ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var li, bullet1, t1, t2, t3, attRefs, contents, dn, bullet2;
      li = document.createElement("li", null);
      li.id = H.S(this._id);
      J.get$classes$x(li).add$1(0, "dn");
      bullet1 = W.ImageElement_ImageElement(13, "images/bullet1.png", 13);
      t1 = J.getInterceptor$x(bullet1);
      t1.get$classes(bullet1).add$1(0, "bullet");
      t2 = $.doc.cfg;
      t3 = this.ref;
      attRefs = t2._schema.elementAttributes$1(t3);
      t2 = attRefs != null;
      if (t2 && attRefs.length > 0) {
        t1 = t1.get$onClick(bullet1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNItem_html_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      } else {
        t1 = t1.get$onDoubleClick(bullet1);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNItem_html_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
      li.appendChild(bullet1);
      contents = document.createElement("span", null);
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      li.appendChild(contents);
      bullet2 = W.ImageElement_ImageElement(13, "images/bullet2.png", 13);
      t1 = J.getInterceptor$x(bullet2);
      t1.get$classes(bullet2).add$1(0, "bullet");
      if (t2 && attRefs.length > 0) {
        t1 = t1.get$onClick(bullet2);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNItem_html_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      } else {
        t1 = t1.get$onDoubleClick(bullet2);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNItem_html_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
      li.appendChild(bullet2);
      return li;
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    $isDNItem: true
  },
  DNItem_html_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.attributeDialog$0();
    },
    $isFunction: true
  },
  DNItem_html_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      $.page.selectNode$1(0, this.this_1);
      J.preventDefault$0$x($event);
      $event.stopPropagation();
    },
    $isFunction: true
  },
  DNItem_html_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      return this.this_2.attributeDialog$0();
    },
    $isFunction: true
  },
  DNItem_html_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      $.page.selectNode$1(0, this.this_3);
      J.preventDefault$0$x($event);
      $event.stopPropagation();
    },
    $isFunction: true
  },
  DNLayout: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, t1, contents, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      t1.get$classes(div).add$1(0, "dt_layout");
      this.copyAttrFromXml$1(div);
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
      div.appendChild(this._b1.html$0(0));
      contents = document.createElement("div", null);
      J.get$classes$x(contents).add$1(0, "indent");
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        contents.appendChild(document.createTextNode("\n"));
      this.setStyle$1(contents);
      div.appendChild(contents);
      return div;
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      var t1, contents, hn, next;
      Z.DaxeNode.prototype.updateHTMLAfterChildrenChange$1.call(this, changed);
      t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      contents = t1[1];
      if (contents.childNodes.length > 0) {
        t1 = new W._ChildNodeListLazy(contents);
        hn = t1.get$first(t1);
        for (; hn != null; hn = next) {
          next = hn.nextSibling;
          t1 = J.getInterceptor(hn);
          if (!!t1.$isText || !!t1.$isBRElement) {
            t1 = hn.parentNode;
            if (t1 != null)
              t1.removeChild(hn);
          }
        }
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        J.appendText$1$x(contents, "\n");
    },
    updateAttributes$0: function() {
      var t1, old, div;
      t1 = document.getElementById(this._id).childNodes;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      old = t1[0];
      t1 = Z.Tag$(this, 0, false, false);
      this._b1 = t1;
      J.replaceWith$1$x(old, t1.html$0(0));
      div = document.getElementById(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).clear$0(0);
      t1.get$classes(div).add$1(0, "dn");
      t1.get$classes(div).add$1(0, "dt_layout");
      this.copyAttrFromXml$1(div);
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return true;
    },
    DNLayout$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 0, false, false);
      this._b2 = Z.Tag$(this, 1, false, false);
    },
    DNLayout$fromNode$2: function(node, $parent) {
      this._b1 = Z.Tag$(this, 0, false, false);
      this._b2 = Z.Tag$(this, 1, false, false);
      this.fixLineBreaks$0();
    }
  },
  DNList: {
    "^": "DaxeNode;_b1,_b2,_itemref,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    init$0: function() {
      var t1, t2, subElements;
      this._b1 = Z.Tag$(this, 0, null, null);
      this._b2 = Z.Tag$(this, 1, null, null);
      t1 = $.doc.cfg;
      t2 = this.ref;
      subElements = t1._schema.subElements$1(t2);
      if (subElements.length > 0)
        this._itemref = subElements[0];
    },
    html$0: function(_) {
      var div, t1, list, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
      div.appendChild(this._b1.html$0(0));
      list = document.createElement("ul", null);
      J.get$classes$x(list).add$1(0, "list");
      dn = this.firstChild;
      for (; dn != null;) {
        list.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      div.appendChild(list);
      div.appendChild(this._b2.html$0(0));
      return div;
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return true;
    }
  },
  DNProcessingInstruction: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, contents, dn;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      J.get$classes$x(span).add$1(0, "dn");
      span.appendChild(this._b1.html$0(0));
      contents = document.createElement("span", null);
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      span.appendChild(contents);
      span.appendChild(this._b2.html$0(0));
      return span;
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    toDOMNode$1: function(domDocument) {
      var t1, data;
      t1 = this.firstChild;
      data = t1 != null ? J.get$nodeValue$x(t1) : null;
      return Z.ProcessingInstructionImpl$(domDocument, this.get$nodeName(this), data);
    },
    $isDNProcessingInstruction: true
  },
  DNSection: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var div, t1, classAttributes, t2, value, contents, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      t1.get$classes(div).add$1(0, "dt_section");
      t1.get$classes(div).add$1(0, this.localName);
      classAttributes = J.$index$asx($.doc.cfg.getNodeParameters$3(this.ref, "element", null), "dtClass");
      if (classAttributes != null)
        for (t2 = J.get$iterator$ax(classAttributes); t2.moveNext$0();) {
          value = this.getAttribute$1(0, t2.get$current());
          if (value != null && !J.$eq(value, "")) {
            t1.get$classes(div).add$1(0, H.S(value));
            break;
          }
        }
      if (this.valid !== true)
        t1.get$classes(div).add$1(0, "invalid");
      div.appendChild(this._b1.html$0(0));
      contents = document.createElement("div", null);
      J.get$classes$x(contents).add$1(0, "indent");
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        contents.appendChild(document.createTextNode("\n"));
      this.setStyle$1(contents);
      div.appendChild(contents);
      return div;
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      var t1, contents, hn, next;
      Z.DaxeNode.prototype.updateHTMLAfterChildrenChange$1.call(this, changed);
      t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      contents = t1[1];
      if (contents.childNodes.length > 0) {
        t1 = new W._ChildNodeListLazy(contents);
        hn = t1.get$first(t1);
        for (; hn != null; hn = next) {
          next = hn.nextSibling;
          t1 = J.getInterceptor(hn);
          if (!!t1.$isText || !!t1.$isBRElement) {
            t1 = hn.parentNode;
            if (t1 != null)
              t1.removeChild(hn);
          }
        }
      }
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$nodeType(t1) === 3;
      } else
        t1 = true;
      if (t1)
        J.appendText$1$x(contents, "\n");
    },
    updateAttributes$0: function() {
      var t1, old;
      t1 = document.getElementById(this._id).childNodes;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      old = t1[0];
      t1 = Z.Tag$(this, 0, false, null);
      this._b1 = t1;
      J.replaceWith$1$x(old, t1.html$0(0));
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return true;
    },
    DNSection$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 0, false, null);
      this._b2 = Z.Tag$(this, 1, false, null);
    },
    DNSection$fromNode$2: function(node, $parent) {
      this._b1 = Z.Tag$(this, 0, false, null);
      this._b2 = Z.Tag$(this, 1, false, null);
      this.fixLineBreaks$0();
    }
  },
  DNSimpleType: {
    "^": "DaxeNode;control,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, t1, t2, t3, attRefs, img, title, value;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      t1 = J.getInterceptor$x(span);
      t1.get$classes(span).add$1(0, "dn");
      t1.get$classes(span).add$1(0, "simple_type");
      t2 = $.doc.cfg;
      t3 = this.ref;
      attRefs = t2._schema.elementAttributes$1(t3);
      if (attRefs != null && attRefs.length > 0) {
        img = W.ImageElement_ImageElement(15, "images/attributes.png", 16);
        t2 = J.get$onClick$x(img);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.DNSimpleType_html_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        span.appendChild(img);
      }
      title = $.doc.cfg.elementTitle$1(this.ref);
      span.appendChild(document.createTextNode(title));
      t2 = this.firstChild;
      value = t2 != null ? J.get$nodeValue$x(t2) : "";
      t2 = S.SimpleTypeControl$forElement(this.ref, value, new S.DNSimpleType_html_closure0(this));
      this.control = t2;
      span.appendChild(t2.html$0(0));
      t1 = t1.get$onDoubleClick(span);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNSimpleType_html_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      return span;
    },
    updateHTML$0: function() {
      var t1, value;
      t1 = this.firstChild;
      value = t1 != null ? J.get$nodeValue$x(t1) : "";
      if (!J.$eq(this.control.value, value))
        this.control.setValue$1(value);
    },
    firstCursorPositionInside$0: function() {
      return;
    },
    lastCursorPositionInside$0: function() {
      return;
    },
    DNSimpleType$fromNode$2: function(node, $parent) {
      var t1, prev, n, dn;
      t1 = J.getInterceptor$x(node);
      if (t1.get$childNodes(node) != null)
        for (t1 = J.get$iterator$ax(t1.get$childNodes(node)), prev = null; t1.moveNext$0(); prev = dn) {
          n = t1.get$current();
          if (J.get$nodeType$x(n) === 3) {
            dn = new S.ParentUpdatingDNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
            dn.DaxeNode$fromNode$3$createChildren(n, this, true);
          } else
            dn = Z.NodeFactory_createFromNode(n, this);
          if (prev == null)
            this.firstChild = dn;
          else
            prev.set$nextSibling(dn);
        }
    },
    static: {DNSimpleType$fromNode: function(node, $parent) {
        var t1 = new S.DNSimpleType(null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromNode$3$createChildren(node, $parent, false);
        t1.DNSimpleType$fromNode$2(node, $parent);
        return t1;
      }}
  },
  DNSimpleType_html_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.attributeDialog$0();
    },
    $isFunction: true
  },
  DNSimpleType_html_closure0: {
    "^": "Closure:10;this_1",
    call$0: function() {
      var t1, value, edit, t2, t3;
      t1 = this.this_1;
      value = t1.control.value;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "form.text_edition"));
      t2 = t1.firstChild;
      if (!!J.getInterceptor(t2).$isDNText) {
        t2 = Z.UndoableEdit$removeNode(t2, false);
        edit.subEdits.push(t2);
      }
      if (!J.$eq(value, "")) {
        t2 = Z.Position$(t1, 0);
        t3 = new S.ParentUpdatingDNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
        t3.DaxeNode$text$1(value);
        t3 = Z.UndoableEdit$insertNode(t2, t3, false);
        edit.subEdits.push(t3);
      }
      $.doc.doNewEdit$1(edit);
      t1.control.focus$0(0);
      return;
    },
    $isFunction: true
  },
  DNSimpleType_html_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      $.page.selectNode$1(0, this.this_2);
      J.preventDefault$0$x($event);
      $event.stopPropagation();
    },
    $isFunction: true
  },
  DNSpecial: {
    "^": "DaxeNode;_dlg,_character,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, t1;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      t1 = J.getInterceptor$x(span);
      t1.get$classes(span).add$1(0, "dn");
      t1.get$classes(span).add$1(0, "special");
      span.textContent = this._character;
      return span;
    },
    attributeDialog$1: function(okfct) {
      var t1 = new S.SpecialDialog(this._character, new S.DNSpecial_attributeDialog_closure(this, okfct), null);
      this._dlg = t1;
      t1.show$0(0);
    },
    attributeDialog$0: function() {
      return this.attributeDialog$1(null);
    },
    firstCursorPositionInside$0: function() {
      return;
    },
    lastCursorPositionInside$0: function() {
      return;
    },
    toDOMNode$1: function(domDocument) {
      var el = Z.ElementImpl$NS(domDocument, this._namespaceURI, this.get$nodeName(this));
      el.appendChild$1(Z.TextImpl$(domDocument, this._character));
      return el;
    }
  },
  DNSpecial_attributeDialog_closure: {
    "^": "Closure:10;this_0,okfct_1",
    call$0: function() {
      var t1 = this.this_0;
      t1._character = t1._dlg.character;
    },
    $isFunction: true
  },
  SpecialDialog: {
    "^": "Object;character,okfct,selectedTD",
    okfct$0: function() {
      return this.okfct.call$0();
    },
    show$0: function(_) {
      var div1, div2, div3, form, rows, i, t1, table, x, t2, tr, j, td, t3, t4, k, div_buttons, bCancel, bOk;
      div1 = document.createElement("div", null);
      div1.id = "dlg1";
      J.get$classes$x(div1).add$1(0, "dlg1");
      div2 = document.createElement("div", null);
      J.get$classes$x(div2).add$1(0, "dlg2");
      div3 = document.createElement("div", null);
      J.get$classes$x(div3).add$1(0, "dlg3");
      form = document.createElement("form", null);
      for (rows = 0, i = 0; t1 = $.get$SpecialDialog_symbols(), i < 5; ++i)
        rows += C.JSNumber_methods.toInt$0(Math.ceil(t1[i].length / 13));
      table = document.createElement("table", null);
      t1 = J.getInterceptor$x(table);
      t1.get$classes(table).add$1(0, "special_dlg");
      for (x = 0, i = 0; t2 = $.get$SpecialDialog_symbols(), i < 5; ++i) {
        tr = document.createElement("tr", null);
        for (j = 0; j < t2[i].length; ++j) {
          td = document.createElement("td", null);
          t3 = t2[i];
          if (j >= t3.length)
            return H.ioore(t3, j);
          td.textContent = t3[j];
          J.set$textAlign$x(td.style, "center");
          t3 = this.character;
          t4 = t2[i];
          if (j >= t4.length)
            return H.ioore(t4, j);
          if (J.$eq(t3, t4[j])) {
            this.selectedTD = td;
            J.set$border$x(td.style, "1px solid black");
          }
          tr.appendChild(td);
          ++x;
          if (x >= 13) {
            if (j < t2[i].length - 1) {
              table.appendChild(tr);
              tr = document.createElement("tr", null);
            }
            x = 0;
          }
        }
        if (x !== 0) {
          for (k = x; k < 13; ++k)
            tr.appendChild(document.createElement("td", null));
          x = 0;
        }
        table.appendChild(tr);
      }
      t2 = t1.get$onClick(table);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.SpecialDialog_show_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1 = t1.get$onDoubleClick(table);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecialDialog_show_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      form.appendChild(table);
      div_buttons = document.createElement("div", null);
      J.get$classes$x(div_buttons).add$1(0, "buttons");
      bCancel = document.createElement("button", null);
      bCancel.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "button.Cancel");
      bCancel.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bCancel);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecialDialog_show_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bCancel);
      bOk = document.createElement("button", null);
      bOk.id = "special_ok";
      if (this.character == null)
        J.set$disabled$x(bOk, true);
      bOk.setAttribute("type", "submit");
      t1 = $.Strings_map.$index(0, "button.OK");
      bOk.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bOk);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SpecialDialog_show_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      div_buttons.appendChild(bOk);
      form.appendChild(div_buttons);
      div3.appendChild(form);
      div2.appendChild(div3);
      div1.appendChild(div2);
      document.body.appendChild(div1);
    },
    select$1: function(_, target) {
      var t1 = J.getInterceptor(target);
      if (!t1.$isNode0)
        return;
      if (!!t1.$isTableCellElement) {
        t1 = this.selectedTD;
        if (t1 != null)
          J.set$border$x(t1.style, "");
        this.selectedTD = target;
        t1 = target;
      } else if (!!J.getInterceptor(target.parentElement).$isTableCellElement) {
        t1 = this.selectedTD;
        if (t1 != null)
          J.set$border$x(t1.style, null);
        t1 = target.parentElement;
        this.selectedTD = t1;
      } else
        return;
      J.set$border$x(t1.style, "1px solid black");
      this.character = this.selectedTD.textContent;
      J.set$disabled$x(document.querySelector("button#special_ok"), false);
    },
    ok$1: function($event) {
      J.remove$0$ax(document.querySelector("div#dlg1"));
      if ($event != null)
        J.preventDefault$0$x($event);
      this.okfct$0();
    },
    static: {"^": "SpecialDialog_symbols,SpecialDialog_columns"}
  },
  SpecialDialog_show_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.select$1(0, J.get$target$x($event));
    },
    $isFunction: true
  },
  SpecialDialog_show_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      var t1 = this.this_1;
      t1.select$1(0, J.get$target$x($event));
      if (t1.selectedTD != null)
        t1.ok$1(null);
    },
    $isFunction: true
  },
  SpecialDialog_show_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      var t1;
      J.remove$0$ax(document.querySelector("div#dlg1"));
      t1 = $.page._cursor;
      t1.show$0(0);
      t1.ta.focus();
      return;
    },
    $isFunction: true
  },
  SpecialDialog_show_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.ok$1($event);
    },
    $isFunction: true
  },
  DNString: {
    "^": "DaxeNode;_b1,_b2,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, t1, contents, dn;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      t1 = J.getInterceptor$x(span);
      t1.get$classes(span).add$1(0, "dn");
      if (this.valid !== true)
        t1.get$classes(span).add$1(0, "invalid");
      span.appendChild(this._b1.html$0(0));
      contents = document.createElement("span", null);
      dn = this.firstChild;
      for (; dn != null;) {
        contents.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      this.setStyle$1(contents);
      span.appendChild(contents);
      span.appendChild(this._b2.html$0(0));
      return span;
    },
    getHTMLContentsNode$0: function() {
      var t1 = document.getElementById(this._id).childNodes;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      return t1[1];
    },
    DNString$fromNode$2: function(node, $parent) {
      this._b1 = Z.Tag$(this, 0, null, null);
      this._b2 = Z.Tag$(this, 1, null, null);
    },
    DNString$fromRef$1: function(elementRef) {
      this._b1 = Z.Tag$(this, 0, null, null);
      this._b2 = Z.Tag$(this, 1, null, null);
    },
    static: {DNString$fromRef: function(elementRef) {
        var t1 = new S.DNString(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromRef$1(elementRef);
        t1.DNString$fromRef$1(elementRef);
        return t1;
      }, DNString$fromNode: function(node, $parent) {
        var t1 = new S.DNString(null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromNode$3$createChildren(node, $parent, true);
        t1.DNString$fromNode$2(node, $parent);
        return t1;
      }}
  },
  DNStyle: {
    "^": "DaxeNode;_style,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, contents, dn, b1, b2;
      span = document.createElement("span", null);
      span.id = H.S(this._id);
      J.get$classes$x(span).add$1(0, "dn");
      if (this.firstChild != null) {
        contents = document.createElement("span", null);
        dn = this.firstChild;
        for (; dn != null;) {
          contents.appendChild(J.html$0$x(dn));
          dn = dn.get$nextSibling();
        }
        this.setStyle$1(contents);
        span.appendChild(contents);
      } else {
        b1 = Z.Tag$(this, 0, null, null);
        b2 = Z.Tag$(this, 1, null, null);
        span.appendChild(b1.html$0(0));
        span.appendChild(document.createElement("span", null));
        span.appendChild(b2.html$0(0));
      }
      return span;
    },
    updateHTMLAfterChildrenChange$1: function(changed) {
      Z.DaxeNode.prototype.updateHTML$0.call(this);
    },
    getHTMLContentsNode$0: function() {
      var t1, t2;
      t1 = this.firstChild;
      t2 = this._id;
      if (t1 != null) {
        t1 = document.getElementById(t2);
        t1.toString;
        t1 = new W._ChildNodeListLazy(t1);
        return t1.get$first(t1);
      } else {
        t1 = document.getElementById(t2).childNodes;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        return t1[1];
      }
    },
    DNStyle$fromRef$1: function(elementRef) {
      this._style = $.doc.cfg.nodeParameterValue$5(elementRef, "element", null, "style", null);
    },
    DNStyle$fromNode$2: function(node, $parent) {
      this._style = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "style", null);
    },
    $isDNStyle: true,
    static: {DNStyle_selectionToNormal: function() {
        var t1, t2, start, end, compound, ancestor, pp, p1, p2, before, inside, after;
        t1 = $.page._cursor;
        t2 = t1.selectionStart;
        start = new Z.Position(null, null);
        start._dn = t2._dn;
        start._dnOffset = t2._dnOffset;
        t2 = t1.selectionEnd;
        end = new Z.Position(null, null);
        end._dn = t2._dn;
        end._dnOffset = t2._dnOffset;
        t1.deSelect$0();
        start.moveInsideTextNodeIfPossible$0();
        end.moveInsideTextNodeIfPossible$0();
        if (start.$eq(0, end))
          return;
        compound = Z.UndoableEdit$compound($.Strings_map.$index(0, "style.remove_styles"));
        ancestor = S.DNStyle__commonParent(start._dn, end._dn);
        pp = J.get$parent$x(ancestor);
        for (; pp != null;) {
          t1 = J.getInterceptor(pp);
          if (!!t1.$isDNStyle)
            ancestor = pp;
          pp = t1.get$parent(pp);
        }
        if (!!J.getInterceptor(ancestor).$isDNStyle)
          ancestor = ancestor.parent;
        p1 = Z.Position$(ancestor, 0);
        p2 = Z.Position$(ancestor, ancestor.get$offsetLength());
        before = !p1.$eq(0, start) ? S.DNStyle__cloneBetween(ancestor, p1, start) : null;
        inside = S.DNStyle__cloneBetween(ancestor, start, end);
        after = !p2.$eq(0, end) ? S.DNStyle__cloneBetween(ancestor, end, p2) : null;
        S.DNStyle__removeStyles(inside);
        if (J.$eq(p1._dn, p2._dn))
          if (!!J.getInterceptor(p1._dn).$isDNText)
            if (p1._dnOffset === 0) {
              t1 = p2._dnOffset;
              t2 = p2._dn.get$offsetLength();
              t2 = t1 == null ? t2 == null : t1 === t2;
              t1 = t2;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
        if (t1) {
          p1 = Z.Position$(J.get$parent$x(p1._dn), J.get$parent$x(p1._dn).offsetOf$1(p1._dn));
          t1 = J.get$parent$x(p2._dn);
          t2 = J.get$parent$x(p2._dn).offsetOf$1(p2._dn);
          if (typeof t2 !== "number")
            return t2.$add();
          p2 = Z.Position$(t1, t2 + 1);
        }
        t1 = $.doc.removeBetweenEdit$2(p1, p2);
        compound.subEdits.push(t1);
        if (after != null) {
          t1 = $.doc.insertChildrenEdit$3$checkValidity(after, p1, false);
          compound.subEdits.push(t1);
        }
        t1 = $.doc.insertChildrenEdit$3$checkValidity(inside, p1, false);
        compound.subEdits.push(t1);
        if (before != null) {
          t1 = $.doc.insertChildrenEdit$3$checkValidity(before, p1, false);
          compound.subEdits.push(t1);
        }
        $.doc.doNewEdit$1(compound);
      }, DNStyle__commonParent: function(dn1, dn2) {
        var p1, t1, p2, t2;
        for (p1 = dn1; p1 != null;) {
          for (t1 = J.getInterceptor(p1), p2 = dn2; p2 != null;) {
            if (t1.$eq(p1, p2))
              return p1;
            t2 = J.getInterceptor$x(p2);
            if (t2.get$parent(p2) == null)
              break;
            p2 = t2.get$parent(p2);
          }
          if (t1.get$parent(p1) == null)
            break;
          p1 = t1.get$parent(p1);
        }
        return;
      }, DNStyle__cloneBetween: function(root, p1, p2) {
        var root2, dn, offset, dnstart, dnend, t1, dn2, last, t2, offset1, offset2;
        root2 = Z.DaxeNode_DaxeNode$clone(root);
        for (dn = root2.get$firstChild(root2); dn != null; dn = root2.firstChild)
          root2.removeChild$1(dn);
        for (dn = J.get$firstChild$x(root), offset = 0; dn != null; dn = dn.get$nextSibling()) {
          dnstart = new Z.Position(null, null);
          dnstart._dn = root;
          dnstart._dnOffset = offset;
          ++offset;
          dnend = new Z.Position(null, null);
          dnend._dn = root;
          dnend._dnOffset = offset;
          if (!(dnstart.$eq(0, p1) || dnstart.$lt(0, p1) === true) || dnstart.$eq(0, p1))
            t1 = dnend.$lt(0, p2) === true || dnend.$eq(0, p2);
          else
            t1 = false;
          if (t1) {
            dn2 = Z.DaxeNode_DaxeNode$clone(dn);
            last = root2.get$lastChild(root2);
            if (last != null)
              last.set$nextSibling(dn2);
            else
              root2.firstChild = dn2;
            dn2.set$parent(0, root2);
          } else {
            if (!(dnend.$lt(0, p1) === true || dnend.$eq(0, p1)))
              t1 = !(dnstart.$eq(0, p2) || dnstart.$lt(0, p2) === true) || dnstart.$eq(0, p2);
            else
              t1 = true;
            if (t1)
              ;
            else if (!!J.getInterceptor(dn).$isDNText) {
              if (!(dnstart.$eq(0, p1) || dnstart.$lt(0, p1) === true))
                t1 = !(dnend.$eq(0, p2) || dnend.$lt(0, p2) === true);
              else
                t1 = false;
              if (t1) {
                t1 = p2._dnOffset;
                if (typeof t1 !== "number")
                  return H.iae(t1);
                if (0 < t1) {
                  t2 = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
                  t2.DaxeNode$text$1(J.substring$2$s(dn.nodeValue, 0, t1));
                  last = root2.get$lastChild(root2);
                  if (last != null)
                    last.set$nextSibling(t2);
                  else
                    root2.firstChild = t2;
                  t2.parent = root2;
                }
              } else if (dnstart.$lt(0, p1) === true && dnend.$lt(0, p2) === true) {
                t1 = p1._dnOffset;
                t2 = dn.get$offsetLength();
                if (typeof t1 !== "number")
                  return t1.$lt();
                if (typeof t2 !== "number")
                  return H.iae(t2);
                if (t1 < t2) {
                  t1 = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
                  t1.DaxeNode$text$1(J.substring$2$s(dn.nodeValue, p1._dnOffset, dn.get$offsetLength()));
                  last = root2.get$lastChild(root2);
                  if (last != null)
                    last.set$nextSibling(t1);
                  else
                    root2.firstChild = t1;
                  t1.parent = root2;
                }
              } else {
                offset1 = J.$eq(p1._dn, dn) ? p1._dnOffset : 0;
                offset2 = J.$eq(p2._dn, dn) ? p2._dnOffset : dn.get$offsetLength();
                if (typeof offset1 !== "number")
                  return offset1.$lt();
                if (typeof offset2 !== "number")
                  return H.iae(offset2);
                if (offset1 < offset2) {
                  t1 = new S.DNText(null, null, null, null, null, null, null, null, null, null, null, false, null);
                  t1.DaxeNode$text$1(J.substring$2$s(dn.nodeValue, offset1, offset2));
                  last = root2.get$lastChild(root2);
                  if (last != null)
                    last.set$nextSibling(t1);
                  else
                    root2.firstChild = t1;
                  t1.parent = root2;
                }
              }
            } else {
              dn2 = S.DNStyle__cloneBetween(dn, p1, p2);
              if (!dn2.$isDNStyle && !dn2.$isDNText || !J.$eq(S.DNStyle__getText(dn2), "")) {
                last = root2.get$lastChild(root2);
                if (last != null)
                  last.set$nextSibling(dn2);
                else
                  root2.firstChild = dn2;
                dn2.parent = root2;
              }
            }
          }
        }
        return root2;
      }, DNStyle__getText: function(dn) {
        var t1, sb, n, str;
        t1 = J.getInterceptor(dn);
        if (!!t1.$isDNText)
          return dn.nodeValue;
        else if (t1.get$firstChild(dn) != null) {
          sb = new P.StringBuffer("");
          sb._contents = "";
          for (n = t1.get$firstChild(dn); n != null; n = n.get$nextSibling()) {
            str = S.DNStyle__getText(n);
            sb._contents += typeof str === "string" ? str : H.S(str);
          }
          t1 = sb._contents;
          return t1.charCodeAt(0) == 0 ? t1 : t1;
        } else
          return "";
      }, DNStyle__removeStyles: function($parent) {
        var t1, dn, first, dn2, next;
        for (t1 = J.getInterceptor$x($parent), dn = t1.get$firstChild($parent); dn != null;)
          if (!!J.getInterceptor(dn).$isDNStyle) {
            first = dn.firstChild;
            for (dn2 = first; dn2 != null; dn2 = next) {
              next = dn2.get$nextSibling();
              t1.insertBefore$2($parent, dn2, dn);
            }
            $parent.removeChild$1(dn);
            dn = first;
          } else {
            S.DNStyle__removeStyles(dn);
            dn = dn.get$nextSibling();
          }
        $parent.normalize$0();
      }}
  },
  DNTable: {
    "^": "DaxeNode;_trtag,_tdtag,_thtag,_trref,_tdref,_thref,_colspanAttr<,_rowspanAttr<,_alignAttr<,header,ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    init$0: function() {
      var t1 = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "trTag", "tr");
      this._trtag = t1;
      this._trref = $.doc.cfg.elementReference$1(t1);
      t1 = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "tdTag", "td");
      this._tdtag = t1;
      this._tdref = $.doc.cfg.elementReference$1(t1);
      t1 = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "thTag", "th");
      this._thtag = t1;
      this._thref = $.doc.cfg.elementReference$1(t1);
      this._colspanAttr = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "colspanAttr", "colspan");
      this._rowspanAttr = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "rowspanAttr", "rowspan");
      this._alignAttr = $.doc.cfg.nodeParameterValue$5(this.ref, "element", null, "alignAttr", null);
      this.header = false;
    },
    html$0: function(_) {
      var div, t1, form, bTable, bRow, bInsertRow, bRemoveRow, bInsertColumn, bRemoveColumn, bCell, bheader, headerLabel, bMergeRight, img, t2, bSplitX, bMergeBottom, bSplitY, table, dn;
      div = document.createElement("div", null);
      div.id = H.S(this._id);
      t1 = J.getInterceptor$x(div);
      t1.get$classes(div).add$1(0, "dn");
      t1.get$classes(div).add$1(0, "table");
      form = document.createElement("form", null);
      J.get$classes$x(form).add$1(0, "table_buttons");
      bTable = document.createElement("button", null);
      bTable.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "table.Table");
      bTable.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bTable);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bTable.style, "1em");
      form.appendChild(bTable);
      bRow = document.createElement("button", null);
      bRow.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "table.Row");
      bRow.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bRow);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure0(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bRow.style, "0.2em");
      form.appendChild(bRow);
      bInsertRow = document.createElement("button", null);
      bInsertRow.setAttribute("type", "button");
      bInsertRow.appendChild(document.createTextNode("+"));
      t1 = J.get$onClick$x(bInsertRow);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure1(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bInsertRow.style, "0.2em");
      form.appendChild(bInsertRow);
      bRemoveRow = document.createElement("button", null);
      bRemoveRow.setAttribute("type", "button");
      bRemoveRow.appendChild(document.createTextNode("-"));
      t1 = J.get$onClick$x(bRemoveRow);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bRemoveRow.style, "1em");
      form.appendChild(bRemoveRow);
      t1 = $.Strings_map.$index(0, "table.Column");
      form.appendChild(document.createTextNode(t1));
      bInsertColumn = document.createElement("button", null);
      bInsertColumn.setAttribute("type", "button");
      bInsertColumn.appendChild(document.createTextNode("+"));
      t1 = J.get$onClick$x(bInsertColumn);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure3(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bInsertColumn.style, "0.2em");
      form.appendChild(bInsertColumn);
      bRemoveColumn = document.createElement("button", null);
      bRemoveColumn.setAttribute("type", "button");
      bRemoveColumn.appendChild(document.createTextNode("-"));
      t1 = J.get$onClick$x(bRemoveColumn);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure4(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bRemoveColumn.style, "1em");
      form.appendChild(bRemoveColumn);
      bCell = document.createElement("button", null);
      bCell.setAttribute("type", "button");
      t1 = $.Strings_map.$index(0, "table.Cell");
      bCell.appendChild(document.createTextNode(t1));
      t1 = J.get$onClick$x(bCell);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure5(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      J.set$marginRight$x(bCell.style, "1em");
      form.appendChild(bCell);
      bheader = W.InputElement_InputElement("checkbox");
      bheader.id = "header" + H.S(this._id);
      t1 = J.getInterceptor$x(bheader);
      t1.set$checked(bheader, this.header);
      t1 = t1.get$onClick(bheader);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.DNTable_html_closure6(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      form.appendChild(bheader);
      headerLabel = document.createElement("label", null);
      J.set$htmlFor$x(headerLabel, "header" + H.S(this._id));
      t1 = $.Strings_map.$index(0, "table.header");
      headerLabel.appendChild(document.createTextNode(t1));
      J.set$marginRight$x(headerLabel.style, "1em");
      form.appendChild(headerLabel);
      bMergeRight = document.createElement("button", null);
      bMergeRight.setAttribute("type", "button");
      img = W.ImageElement_ImageElement(null, null, null);
      J.set$src$x(img, "images/mergeright.png");
      bMergeRight.appendChild(img);
      t1 = J.getInterceptor$x(bMergeRight);
      t2 = t1.get$onClick(bMergeRight);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.DNTable_html_closure7(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      J.set$marginRight$x(bMergeRight.style, "0.2em");
      t1.set$title(bMergeRight, $.Strings_map.$index(0, "table.merge_right"));
      form.appendChild(bMergeRight);
      bSplitX = document.createElement("button", null);
      bSplitX.setAttribute("type", "button");
      img = W.ImageElement_ImageElement(null, null, null);
      J.set$src$x(img, "images/splitx.png");
      bSplitX.appendChild(img);
      t1 = J.getInterceptor$x(bSplitX);
      t2 = t1.get$onClick(bSplitX);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.DNTable_html_closure8(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      J.set$marginRight$x(bSplitX.style, "0.2em");
      t1.set$title(bSplitX, $.Strings_map.$index(0, "table.split_x"));
      form.appendChild(bSplitX);
      bMergeBottom = document.createElement("button", null);
      bMergeBottom.setAttribute("type", "button");
      img = W.ImageElement_ImageElement(null, null, null);
      J.set$src$x(img, "images/mergebottom.png");
      bMergeBottom.appendChild(img);
      t1 = J.getInterceptor$x(bMergeBottom);
      t2 = t1.get$onClick(bMergeBottom);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.DNTable_html_closure9(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      J.set$marginRight$x(bMergeBottom.style, "0.2em");
      t1.set$title(bMergeBottom, $.Strings_map.$index(0, "table.merge_bottom"));
      form.appendChild(bMergeBottom);
      bSplitY = document.createElement("button", null);
      bSplitY.setAttribute("type", "button");
      img = W.ImageElement_ImageElement(null, null, null);
      J.set$src$x(img, "images/splity.png");
      bSplitY.appendChild(img);
      t1 = J.getInterceptor$x(bSplitY);
      t2 = t1.get$onClick(bSplitY);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.DNTable_html_closure10(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      J.set$marginRight$x(bSplitY.style, "0.2em");
      t1.set$title(bSplitY, $.Strings_map.$index(0, "table.split_y"));
      form.appendChild(bSplitY);
      div.appendChild(form);
      table = document.createElement("table", null);
      J.get$classes$x(table).add$1(0, "indent");
      dn = this.firstChild;
      for (; dn != null;) {
        table.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      div.appendChild(table);
      return div;
    },
    firstCursorPositionInside$0: function() {
      var t1 = this.firstChild;
      if (t1 == null || J.get$firstChild$x(t1) == null)
        return;
      return Z.Position$(J.get$firstChild$x(this.firstChild), 0);
    },
    lastCursorPositionInside$0: function() {
      var t1, t2;
      if (this.get$lastChild(this) != null) {
        t1 = this.get$lastChild(this);
        t1 = t1.get$lastChild(t1) == null;
      } else
        t1 = true;
      if (t1)
        return;
      t1 = this.get$lastChild(this);
      t1 = t1.get$lastChild(t1);
      t2 = this.get$lastChild(this);
      return Z.Position$(t1, t2.get$lastChild(t2).get$offsetLength());
    },
    newElementDialog$0: function() {
      var i, tr, j, td, last;
      for (i = 0; i < 2; ++i) {
        tr = new S.DNTR(null, null, null, null, null, null, null, null, null, null, null, false, null);
        tr.DaxeNode$fromRef$1(this._trref);
        tr.userCannotRemove = true;
        for (j = 0; j < 2; ++j) {
          td = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
          td.DaxeNode$fromRef$1(this._tdref);
          td.userCannotRemove = true;
          last = tr.get$lastChild(tr);
          if (last != null)
            last.set$nextSibling(td);
          else
            tr.firstChild = td;
          td.parent = tr;
        }
        last = this.get$lastChild(this);
        if (last != null)
          last.set$nextSibling(tr);
        else
          this.firstChild = tr;
        tr.parent = this;
      }
    },
    rowAttributes$0: function() {
      var tr = this.getSelectedRow$0();
      if (tr == null)
        return;
      tr.attributeDialog$0();
    },
    insertRow$0: function(_) {
      var selectedRow, newRow, i, td, last, t1, t2;
      selectedRow = this.getSelectedRow$0();
      if (selectedRow == null)
        return;
      newRow = new S.DNTR(null, null, null, null, null, null, null, null, null, null, null, false, null);
      newRow.DaxeNode$fromRef$1(this._trref);
      newRow.userCannotRemove = true;
      for (i = 0; i < this.xLength$0(); ++i) {
        td = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
        td.DaxeNode$fromRef$1(this._tdref);
        td.userCannotRemove = true;
        last = newRow.get$lastChild(newRow);
        if (last != null)
          last.set$nextSibling(td);
        else
          newRow.firstChild = td;
        td.parent = newRow;
      }
      t1 = $.doc;
      t2 = this.offsetOf$1(selectedRow);
      if (typeof t2 !== "number")
        return t2.$add();
      t1.insertNode$2(0, newRow, Z.Position$(this, t2 + 1));
      t2 = $.page;
      t1 = newRow.firstCursorPositionInside$0();
      t2._cursor.moveTo$1(0, t1);
    },
    removeRow$0: function() {
      var tr, edit, t1, td;
      tr = this.getSelectedRow$0();
      if (tr == null)
        return;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.remove"));
      for (t1 = J.get$iterator$ax(J.get$childNodes$x(tr)); t1.moveNext$0();) {
        td = t1.get$current();
        if (J.$gt$n(td.get$rowspan(), 1))
          this.splitY$2(td, edit);
      }
      t1 = Z.UndoableEdit$removeNode(tr, true);
      edit.subEdits.push(t1);
      $.doc.doNewEdit$1(edit);
    },
    insertColumn$0: function() {
      var td, edit, x, t1, tr, newtd, td0, offset, t2;
      td = this.getSelectedCell$0();
      if (td == null)
        return;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.insert"));
      x = this.getCellX$1(td);
      for (t1 = this.get$childNodes(this), t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        tr = t1._current;
        if (J.$eq(this.firstChild, tr) && this.header === true) {
          newtd = new S.DNTH(null, null, null, null, null, null, null, null, null, null, null, false, null);
          newtd.DaxeNode$fromRef$1(this._thref);
          newtd.userCannotRemove = true;
        } else {
          newtd = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
          newtd.DaxeNode$fromRef$1(this._tdref);
          newtd.userCannotRemove = true;
        }
        td0 = J.get$firstChild$x(tr);
        offset = 0;
        while (true) {
          if (td0 != null) {
            t2 = this.getCellX$1(td0);
            if (typeof x !== "number")
              return x.$ge();
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = x >= t2;
          } else
            t2 = false;
          if (!t2)
            break;
          ++offset;
          td0 = td0.get$nextSibling();
        }
        t2 = new Z.Position(null, null);
        t2._dn = tr;
        t2._dnOffset = offset;
        t2 = Z.UndoableEdit$insertNode(t2, newtd, true);
        edit.subEdits.push(t2);
      }
      $.doc.doNewEdit$1(edit);
      t1 = $.page;
      t2 = Z.Position$(td.get$nextSibling(), 0);
      t1._cursor.moveTo$1(0, t2);
    },
    removeColumn$0: function() {
      var td, futurePos, edit, x, t1, y, t2;
      td = this.getSelectedCell$0();
      if (td == null)
        return;
      if (td.get$nextSibling() != null)
        futurePos = Z.Position$(td.get$nextSibling(), 0);
      else
        futurePos = td.get$previousSibling() != null ? Z.Position$(td.get$previousSibling(), 0) : null;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "undo.remove"));
      x = this.getCellX$1(td);
      for (t1 = this.get$childNodes(this), t1 = new H.ListIterator(t1, t1.length, 0, null), y = 0; t1.moveNext$0();) {
        t2 = this.grid$0(0);
        if (x >>> 0 !== x || x >= t2.length)
          return H.ioore(t2, x);
        t2 = t2[x];
        if (y >= t2.length)
          return H.ioore(t2, y);
        td = t2[y];
        for (; J.$gt$n(td.get$colspan(), 1);) {
          this.splitX$1(td);
          t2 = this.grid$0(0);
          if (x >= t2.length)
            return H.ioore(t2, x);
          t2 = t2[x];
          if (y >= t2.length)
            return H.ioore(t2, y);
          td = t2[y];
        }
        t2 = Z.UndoableEdit$removeNode(td, true);
        edit.subEdits.push(t2);
        ++y;
      }
      $.doc.doNewEdit$1(edit);
      if (futurePos != null)
        $.page._cursor.moveTo$1(0, futurePos);
    },
    cellAttributes$0: function() {
      var td = this.getSelectedCell$0();
      if (td == null)
        return;
      td.attributeDialog$0();
    },
    getSelectedCell$0: function() {
      var $parent = $.page._cursor.selectionStart._dn;
      while (true) {
        if (!($parent != null && !J.getInterceptor($parent).$isDNTD))
          break;
        $parent = J.get$parent$x($parent);
      }
      return $parent;
    },
    getSelectedRow$0: function() {
      var $parent = $.page._cursor.selectionStart._dn;
      while (true) {
        if (!($parent != null && !J.getInterceptor($parent).$isDNTR))
          break;
        $parent = J.get$parent$x($parent);
      }
      return $parent;
    },
    getCellX$1: function(td) {
      var g, t1, t2, x, t3, t4, y, t5;
      g = this.grid$0(0);
      for (t1 = g.length, t2 = g[0], x = 0; x < t1; ++x)
        for (t3 = t2.length, t4 = g[x], y = 0; y < t3; ++y) {
          if (y >= t4.length)
            return H.ioore(t4, y);
          t5 = t4[y];
          if (t5 == null ? td == null : t5 === td)
            return x;
        }
    },
    getCellY$1: function(td) {
      var g, t1, t2, x, t3, t4, y, t5;
      g = this.grid$0(0);
      for (t1 = g.length, t2 = g[0], x = 0; x < t1; ++x)
        for (t3 = t2.length, t4 = g[x], y = 0; y < t3; ++y) {
          if (y >= t4.length)
            return H.ioore(t4, y);
          t5 = t4[y];
          if (t5 == null ? td == null : t5 === td)
            return y;
        }
    },
    grid$0: function(_) {
      var dx, dy, g, t1, x, t2, y, t3, td, t4, ix, iy, t5, t6;
      dx = this.xLength$0();
      dy = this.yLength$0();
      g = H.setRuntimeTypeInfo(Array(dx), [[P.List, S.DNTD]]);
      for (t1 = g.length, x = 0; x < dx; ++x) {
        t2 = Array(dy);
        t2.$builtinTypeInfo = [S.DNTD];
        if (x >= t1)
          return H.ioore(g, x);
        g[x] = t2;
      }
      for (t2 = this.get$childNodes(this), t2 = new H.ListIterator(t2, t2.length, 0, null), y = 0; t2.moveNext$0();) {
        for (t3 = J.get$iterator$ax(J.get$childNodes$x(t2._current)), x = 0; t3.moveNext$0();) {
          td = t3.get$current();
          while (true) {
            if (x < dx) {
              if (x >>> 0 !== x || x >= t1)
                return H.ioore(g, x);
              t4 = g[x];
              if (y >= t4.length)
                return H.ioore(t4, y);
              t4 = t4[y] != null;
            } else
              t4 = false;
            if (!t4)
              break;
            ++x;
          }
          ix = 0;
          while (true) {
            t4 = td.get$colspan();
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (!(ix < t4))
              break;
            t4 = x + ix;
            iy = 0;
            while (true) {
              t5 = td.get$rowspan();
              if (typeof t5 !== "number")
                return H.iae(t5);
              if (!(iy < t5))
                break;
              if (t4 >>> 0 !== t4 || t4 >= t1)
                return H.ioore(g, t4);
              t5 = g[t4];
              t6 = y + iy;
              if (t6 >= t5.length)
                return H.ioore(t5, t6);
              t5[t6] = td;
              ++iy;
            }
            ++ix;
          }
          t4 = td.get$colspan();
          if (typeof t4 !== "number")
            return H.iae(t4);
          x += t4;
        }
        ++y;
      }
      return g;
    },
    xLength$0: function() {
      var t1, dx, t2, n, t3;
      for (t1 = this.get$childNodes(this), t1 = new H.ListIterator(t1, t1.length, 0, null), dx = 0; t1.moveNext$0();) {
        for (t2 = J.get$iterator$ax(J.get$childNodes$x(t1._current)), n = 0; t2.moveNext$0();) {
          t3 = t2.get$current().get$colspan();
          if (typeof t3 !== "number")
            return H.iae(t3);
          n += t3;
        }
        dx = P.max(dx, n);
      }
      return dx;
    },
    yLength$0: function() {
      var t1, dy, t2;
      for (t1 = this.get$childNodes(this), t1 = new H.ListIterator(t1, t1.length, 0, null), dy = 0; t1.moveNext$0();) {
        t2 = J.get$firstChild$x(t1._current).get$rowspan();
        if (typeof t2 !== "number")
          return H.iae(t2);
        dy += t2;
      }
      return dy;
    },
    toggleHeader$0: function() {
      var firstTR, cell, nextCell, t1, td, child, nextChild, last, attr, t2, th;
      firstTR = this.firstChild;
      if (firstTR == null)
        return;
      cell = J.get$firstChild$x(firstTR);
      for (; cell != null; cell = nextCell) {
        nextCell = cell.get$nextSibling();
        t1 = this.header === true;
        if (t1 && !!cell.$isDNTH) {
          td = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
          td.DaxeNode$fromRef$1(this._tdref);
          td.userCannotRemove = true;
          child = cell.get$firstChild(cell);
          for (; child != null; child = nextChild) {
            nextChild = child.get$nextSibling();
            cell.removeChild$1(child);
            last = td.get$lastChild(td);
            if (last != null)
              last.set$nextSibling(child);
            else
              td.firstChild = child;
            child.set$parent(0, td);
          }
          for (t1 = J.get$iterator$ax(cell.get$attributes(cell)); t1.moveNext$0();) {
            attr = t1._current;
            t2 = J.getInterceptor$x(attr);
            td.setAttribute$2(0, t2.get$name(attr), t2.get$value(attr));
          }
          cell.replaceWith$1(0, td);
        } else if (!t1 && !!cell.$isDNTD && !cell.$isDNTH) {
          th = new S.DNTH(null, null, null, null, null, null, null, null, null, null, null, false, null);
          th.DaxeNode$fromRef$1(this._thref);
          th.userCannotRemove = true;
          child = cell.get$firstChild(cell);
          for (; child != null; child = nextChild) {
            nextChild = child.get$nextSibling();
            cell.removeChild$1(child);
            last = th.get$lastChild(th);
            if (last != null)
              last.set$nextSibling(child);
            else
              th.firstChild = child;
            child.set$parent(0, th);
          }
          for (t1 = J.get$iterator$ax(cell.get$attributes(cell)); t1.moveNext$0();) {
            attr = t1._current;
            t2 = J.getInterceptor$x(attr);
            th.setAttribute$2(0, t2.get$name(attr), t2.get$value(attr));
          }
          cell.replaceWith$1(0, th);
        }
      }
      this.header = this.header !== true;
      firstTR.updateHTML$0();
    },
    mergeRight$1: function(td) {
      var x, y, t1, x2, td2, next, edit, t2;
      td = this.getSelectedCell$0();
      if (td == null)
        return;
      x = this.getCellX$1(td);
      y = this.getCellY$1(td);
      t1 = td.get$colspan();
      if (typeof x !== "number")
        return x.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      x2 = x + t1;
      if (x2 >= this.xLength$0())
        return;
      t1 = this.grid$0(0);
      if (x2 >>> 0 !== x2 || x2 >= t1.length)
        return H.ioore(t1, x2);
      t1 = t1[x2];
      if (y >>> 0 !== y || y >= t1.length)
        return H.ioore(t1, y);
      td2 = t1[y];
      if (!J.$eq(td2.parent, td.parent))
        this.splitY$1(td2);
      next = td.nextSibling;
      if (next == null)
        return;
      if (!J.$eq(next.get$rowspan(), td.get$rowspan()))
        return;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "table.merge"));
      t1 = Z.UndoableEdit$changeAttribute(td, Z.DaxeAttr$(this._colspanAttr, J.toString$0(J.$add$ns(td.get$colspan(), next.get$colspan()))), true);
      edit.subEdits.push(t1);
      t1 = Z.UndoableEdit$removeNode(next, true);
      edit.subEdits.push(t1);
      $.doc.doNewEdit$1(edit);
      t1 = $.page;
      t2 = Z.Position$(td, 0);
      t1._cursor.moveTo$1(0, t2);
      t2 = $.page;
      t2._insertP.update$1(t2._cursor.selectionStart);
      t2.updateMenus$0();
      t2.updatePath$0();
    },
    mergeRight$0: function() {
      return this.mergeRight$1(null);
    },
    mergeBottom$1: function(td) {
      var x, y, t1, y2, td2, edit, t2;
      td = this.getSelectedCell$0();
      if (td == null)
        return;
      x = this.getCellX$1(td);
      y = this.getCellY$1(td);
      t1 = td.get$rowspan();
      if (typeof y !== "number")
        return y.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      y2 = y + t1;
      if (y2 >= this.yLength$0())
        return;
      t1 = this.grid$0(0);
      if (x >>> 0 !== x || x >= t1.length)
        return H.ioore(t1, x);
      t1 = t1[x];
      if (y2 >>> 0 !== y2 || y2 >= t1.length)
        return H.ioore(t1, y2);
      td2 = t1[y2];
      if (!J.$eq(td2.get$colspan(), td.get$colspan()))
        return;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "table.merge"));
      t1 = Z.UndoableEdit$changeAttribute(td, Z.DaxeAttr$(this._rowspanAttr, J.toString$0(J.$add$ns(td.get$rowspan(), td2.get$rowspan()))), true);
      edit.subEdits.push(t1);
      t1 = Z.UndoableEdit$removeNode(td2, true);
      edit.subEdits.push(t1);
      $.doc.doNewEdit$1(edit);
      t1 = $.page;
      t2 = Z.Position$(td, 0);
      t1._cursor.moveTo$1(0, t2);
      t2 = $.page;
      t2._insertP.update$1(t2._cursor.selectionStart);
      t2.updateMenus$0();
      t2.updatePath$0();
    },
    mergeBottom$0: function() {
      return this.mergeBottom$1(null);
    },
    splitX$2: function(td, parentEdit) {
      var newtd, tr, edit, t1, t2, t3;
      if (td == null)
        td = this.getSelectedCell$0();
      if (td == null)
        return;
      if (J.$lt$n(td.get$colspan(), 2) === true)
        return;
      if (!!td.$isDNTH) {
        newtd = new S.DNTH(null, null, null, null, null, null, null, null, null, null, null, false, null);
        newtd.DaxeNode$fromRef$1(this._thref);
        newtd.userCannotRemove = true;
      } else {
        newtd = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
        newtd.DaxeNode$fromRef$1(this._tdref);
        newtd.userCannotRemove = true;
      }
      tr = td.parent;
      edit = Z.UndoableEdit$compound($.Strings_map.$index(0, "table.split"));
      t1 = tr.offsetOf$1(td);
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = new Z.Position(null, null);
      t2._dn = tr;
      t2._dnOffset = t1 + 1;
      t2 = Z.UndoableEdit$insertNode(t2, newtd, true);
      edit.subEdits.push(t2);
      t2 = this._colspanAttr;
      t1 = J.toString$0(J.$sub$n(td.get$colspan(), 1));
      t3 = new Z.DaxeAttr(null, null, null, null);
      t3.namespaceURI = null;
      t3.prefix = null;
      t3.localName = t2;
      t3.value = t1;
      t3 = Z.UndoableEdit$changeAttribute(td, t3, true);
      edit.subEdits.push(t3);
      $.doc.doNewEdit$1(edit);
    },
    splitX$0: function() {
      return this.splitX$2(null, null);
    },
    splitX$1: function(td) {
      return this.splitX$2(td, null);
    },
    splitY$2: function(td, parentEdit) {
      var x, y, t1, tr, td0, offset, newtd, edit, t2, t3, t4;
      if (td == null)
        td = this.getSelectedCell$0();
      if (td == null)
        return;
      if (J.$lt$n(td.get$rowspan(), 2) === true)
        return;
      x = this.getCellX$1(td);
      y = this.getCellY$1(td);
      t1 = td.get$rowspan();
      if (typeof y !== "number")
        return y.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      tr = this.childAtOffset$1(y + t1 - 1);
      if (tr == null)
        return;
      td0 = J.get$firstChild$x(tr);
      offset = 0;
      while (true) {
        if (td0 != null) {
          t1 = this.getCellX$1(td0);
          if (typeof x !== "number")
            return x.$gt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = x > t1;
        } else
          t1 = false;
        if (!t1)
          break;
        ++offset;
        td0 = td0.get$nextSibling();
      }
      newtd = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
      newtd.DaxeNode$fromRef$1(this._tdref);
      newtd.userCannotRemove = true;
      t1 = parentEdit == null;
      edit = !t1 ? parentEdit : Z.UndoableEdit$compound($.Strings_map.$index(0, "table.split"));
      t2 = new Z.Position(null, null);
      t2._dn = tr;
      t2._dnOffset = offset;
      t2 = Z.UndoableEdit$insertNode(t2, newtd, true);
      edit.subEdits.push(t2);
      t2 = this._rowspanAttr;
      t3 = J.toString$0(J.$sub$n(td.get$rowspan(), 1));
      t4 = new Z.DaxeAttr(null, null, null, null);
      t4.namespaceURI = null;
      t4.prefix = null;
      t4.localName = t2;
      t4.value = t3;
      t4 = Z.UndoableEdit$changeAttribute(td, t4, true);
      edit.subEdits.push(t4);
      if (t1)
        $.doc.doNewEdit$1(edit);
    },
    splitY$0: function() {
      return this.splitY$2(null, null);
    },
    splitY$1: function(td) {
      return this.splitY$2(td, null);
    },
    newlineAfter$0: function() {
      return true;
    },
    newlineInside$0: function() {
      return true;
    },
    DNTable$fromNode$2: function(node, $parent) {
      var xtr, t1, tr, xtd, td, last, th;
      this.init$0();
      for (xtr = J.get$firstChild$x(node); xtr != null; xtr = xtr.get$nextSibling()) {
        t1 = J.getInterceptor$x(xtr);
        if (t1.get$nodeType(xtr) === 1) {
          tr = new S.DNTR(null, null, null, null, null, null, null, null, null, null, null, false, null);
          tr.DaxeNode$fromNode$3$createChildren(xtr, this, false);
          tr.userCannotRemove = true;
          tr.fixLineBreaks$0();
          for (xtd = t1.get$firstChild(xtr); xtd != null; xtd = xtd.get$nextSibling()) {
            t1 = J.getInterceptor$x(xtd);
            if (t1.get$nodeType(xtd) === 1)
              if (J.$eq(t1.get$nodeName(xtd), this._tdtag)) {
                td = new S.DNTD(null, null, null, null, null, null, null, null, null, null, null, false, null);
                td.DaxeNode$fromNode$3$createChildren(xtd, tr, true);
                td.userCannotRemove = true;
                td.fixLineBreaks$0();
                last = tr.get$lastChild(tr);
                if (last != null)
                  last.set$nextSibling(td);
                else
                  tr.firstChild = td;
                td.parent = tr;
              } else if (J.$eq(t1.get$nodeName(xtd), this._thtag)) {
                th = new S.DNTH(null, null, null, null, null, null, null, null, null, null, null, false, null);
                th.DaxeNode$fromNode$3$createChildren(xtd, tr, true);
                th.userCannotRemove = true;
                th.fixLineBreaks$0();
                th.fixLineBreaks$0();
                last = tr.get$lastChild(tr);
                if (last != null)
                  last.set$nextSibling(th);
                else
                  tr.firstChild = th;
                th.parent = tr;
              }
          }
          last = this.get$lastChild(this);
          if (last != null)
            last.set$nextSibling(tr);
          else
            this.firstChild = tr;
          tr.parent = this;
        }
      }
      t1 = this.firstChild;
      if (t1 != null && !!J.getInterceptor(J.get$firstChild$x(t1)).$isDNTH)
        this.header = true;
    },
    static: {DNTable$fromNode: function(node, $parent) {
        var t1 = new S.DNTable(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, false, null);
        t1.DaxeNode$fromNode$3$createChildren(node, $parent, false);
        t1.DNTable$fromNode$2(node, $parent);
        return t1;
      }}
  },
  DNTable_html_closure: {
    "^": "Closure:29;this_0",
    call$1: function($event) {
      return this.this_0.attributeDialog$0();
    },
    $isFunction: true
  },
  DNTable_html_closure0: {
    "^": "Closure:29;this_1",
    call$1: function($event) {
      return this.this_1.rowAttributes$0();
    },
    $isFunction: true
  },
  DNTable_html_closure1: {
    "^": "Closure:29;this_2",
    call$1: function($event) {
      return this.this_2.insertRow$0(0);
    },
    $isFunction: true
  },
  DNTable_html_closure2: {
    "^": "Closure:29;this_3",
    call$1: function($event) {
      return this.this_3.removeRow$0();
    },
    $isFunction: true
  },
  DNTable_html_closure3: {
    "^": "Closure:29;this_4",
    call$1: function($event) {
      return this.this_4.insertColumn$0();
    },
    $isFunction: true
  },
  DNTable_html_closure4: {
    "^": "Closure:29;this_5",
    call$1: function($event) {
      return this.this_5.removeColumn$0();
    },
    $isFunction: true
  },
  DNTable_html_closure5: {
    "^": "Closure:29;this_6",
    call$1: function($event) {
      return this.this_6.cellAttributes$0();
    },
    $isFunction: true
  },
  DNTable_html_closure6: {
    "^": "Closure:29;this_7",
    call$1: function($event) {
      return this.this_7.toggleHeader$0();
    },
    $isFunction: true
  },
  DNTable_html_closure7: {
    "^": "Closure:29;this_8",
    call$1: function($event) {
      return this.this_8.mergeRight$0();
    },
    $isFunction: true
  },
  DNTable_html_closure8: {
    "^": "Closure:29;this_9",
    call$1: function($event) {
      return this.this_9.splitX$0();
    },
    $isFunction: true
  },
  DNTable_html_closure9: {
    "^": "Closure:29;this_10",
    call$1: function($event) {
      return this.this_10.mergeBottom$0();
    },
    $isFunction: true
  },
  DNTable_html_closure10: {
    "^": "Closure:29;this_11",
    call$1: function($event) {
      return this.this_11.splitY$0();
    },
    $isFunction: true
  },
  DNTR: {
    "^": "DaxeNode;ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var tr, dn;
      tr = document.createElement("tr", null);
      tr.toString;
      tr.setAttribute("id", H.S(this._id));
      tr.setAttribute("class", "dn");
      dn = this.firstChild;
      for (; dn != null;) {
        tr.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      return tr;
    },
    firstCursorPositionInside$0: function() {
      var t1 = this.firstChild;
      if (t1 == null)
        return;
      return Z.Position$(t1, 0);
    },
    lastCursorPositionInside$0: function() {
      if (this.get$lastChild(this) == null)
        return;
      return Z.Position$(this.get$lastChild(this), this.get$lastChild(this).get$offsetLength());
    },
    newlineAfter$0: function() {
      return true;
    },
    $isDNTR: true
  },
  DNTD: {
    "^": "DaxeNode;ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var td, t1, dn;
      td = document.createElement("td", null);
      td.id = H.S(this._id);
      t1 = J.getInterceptor$x(td);
      t1.get$classes(td).add$1(0, "dn");
      if (!!this.$isDNTH)
        t1.get$classes(td).add$1(0, "header");
      td.setAttribute("rowspan", J.toString$0(this.get$rowspan()));
      td.setAttribute("colspan", J.toString$0(this.get$colspan()));
      td.setAttribute("align", this.get$align());
      dn = this.firstChild;
      for (; dn != null;) {
        td.appendChild(J.html$0$x(dn));
        dn = dn.get$nextSibling();
      }
      td.appendChild(document.createTextNode(" "));
      return td;
    },
    get$rowspan: function() {
      var v = this.getAttribute$1(0, J.get$parent$x(this.parent).get$_rowspanAttr());
      if (v == null || J.$eq(v, ""))
        return 1;
      else
        return H.Primitives_parseInt(v, null, new S.DNTD_rowspan_closure());
    },
    get$colspan: function() {
      var v = this.getAttribute$1(0, J.get$parent$x(this.parent).get$_colspanAttr());
      if (v == null || J.$eq(v, ""))
        return 1;
      else
        return H.Primitives_parseInt(v, null, new S.DNTD_colspan_closure());
    },
    get$align: function() {
      var v = this.getAttribute$1(0, J.get$parent$x(this.parent).get$_alignAttr());
      if (v == null || J.$eq(v, ""))
        return "";
      else
        return v;
    },
    $isDNTD: true
  },
  DNTD_rowspan_closure: {
    "^": "Closure:0;",
    call$1: function(s) {
      return 1;
    },
    $isFunction: true
  },
  DNTD_colspan_closure: {
    "^": "Closure:0;",
    call$1: function(s) {
      return 1;
    },
    $isFunction: true
  },
  DNTH: {
    "^": "DNTD;ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    $isDNTH: true
  },
  DNText: {
    "^": "DaxeNode;ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    html$0: function(_) {
      var span, t1;
      span = document.createElement("span", null);
      span.toString;
      span.setAttribute("id", H.S(this._id));
      span.setAttribute("class", "dn");
      t1 = this.nodeValue;
      if (t1 != null)
        span.appendChild(document.createTextNode(t1));
      return span;
    },
    toDOMNode$1: function(domDocument) {
      return Z.TextImpl$(domDocument, this.nodeValue);
    },
    $isDNText: true
  },
  ParentUpdatingDNText: {
    "^": "DNText;ref,_id,parent,nodeType,_namespaceURI,prefix,localName,nodeValue,firstChild,nextSibling,attributes,userCannotRemove,valid",
    updateHTML$0: function() {
      this.parent.updateHTML$0();
    }
  },
  SimpleTypeControl: {
    "^": "Object;refElement,refAttribute,value>,_uniqueName,values,suggestedValues,hcontrol,valueChanged,catchUndo",
    valueChanged$0: function() {
      return this.valueChanged.call$0();
    },
    html$0: function(_) {
      var span, lvalbool, t1, booleanValues, i, cb, t2, input, datalist, v, option, select;
      span = document.createElement("span", null);
      lvalbool = ["true", "false", "1", "0"];
      t1 = this.values;
      if (t1 != null)
        if (t1.length === 4) {
          t1 = this.value;
          t1 = t1 != null && !C.JSArray_methods.contains$1(lvalbool, t1);
        } else
          t1 = true;
      else
        t1 = true;
      if (t1)
        booleanValues = false;
      else {
        i = 0;
        while (true) {
          t1 = this.values;
          if (!(i < t1.length)) {
            booleanValues = true;
            break;
          }
          t1 = t1[i];
          if (i >= 4)
            return H.ioore(lvalbool, i);
          if (!J.$eq(t1, lvalbool[i])) {
            booleanValues = false;
            break;
          }
          ++i;
        }
      }
      if (booleanValues) {
        cb = W.InputElement_InputElement("checkbox");
        this.hcontrol = cb;
        t1 = this.value;
        if (t1 == null) {
          this.value = "false";
          t1 = "false";
        }
        t1 = J.$eq(t1, "true") || J.$eq(this.value, "1");
        t2 = J.getInterceptor$x(cb);
        t2.set$checked(cb, t1);
        t2 = t2.get$onChange(cb);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.SimpleTypeControl_html_closure(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
        span.appendChild(cb);
      } else {
        t1 = this.values;
        if (t1 == null || t1.length === 0) {
          input = W.InputElement_InputElement("text");
          this.hcontrol = input;
          t1 = J.getInterceptor$x(input);
          t1.set$size(input, 40);
          t2 = this.value;
          if (t2 == null) {
            this.value = "";
            t2 = "";
          }
          t1.set$value(input, t2);
          this.checkValue$1(false);
          t2 = t1.get$onInput(input);
          H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.SimpleTypeControl_html_closure0(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
          t2 = t1.get$onKeyUp(input);
          H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new S.SimpleTypeControl_html_closure1(this)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
          t2 = this.suggestedValues;
          if (t2 != null && t2.length > 0) {
            datalist = document.createElement("datalist", null);
            datalist.id = "datalist_" + this._uniqueName;
            for (t2 = this.suggestedValues, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
              v = t2._current;
              option = W.OptionElement_OptionElement$_("", "", null, false);
              option.value = v;
              datalist.appendChild(option);
            }
            t1.get$attributes(input)._element.setAttribute("list", "datalist_" + this._uniqueName);
            span.appendChild(datalist);
          }
          span.appendChild(input);
        } else {
          select = document.createElement("select", null);
          this.hcontrol = select;
          if (this.value == null)
            this.value = "";
          for (t1 = this.values, t1 = new H.ListIterator(t1, t1.length, 0, null), t2 = this.refElement; t1.moveNext$0();) {
            v = t1._current;
            option = W.OptionElement_OptionElement$_("", "", null, false);
            option.textContent = $.doc.cfg.attributeValueTitle$3(t2, this.refAttribute, v);
            option.value = v;
            if (J.$eq(v, this.value)) {
              option.defaultSelected = true;
              option.selected = true;
            }
            select.appendChild(option);
          }
          if (!J.contains$1$asx(this.values, this.value)) {
            option = W.OptionElement_OptionElement$_("", "", null, false);
            option.textContent = this.value;
            option.selected = true;
            select.appendChild(option);
            J.get$classes$x(this.hcontrol).add$1(0, "invalid");
          }
          t1 = J.get$onChange$x(select);
          H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SimpleTypeControl_html_closure2(this)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
          span.appendChild(select);
        }
      }
      if (this.catchUndo) {
        t1 = J.get$onKeyDown$x(this.hcontrol);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SimpleTypeControl_html_closure3()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
        t1 = J.get$onKeyUp$x(this.hcontrol);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._target, t1._eventType, W._wrapZone(new S.SimpleTypeControl_html_closure4()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      }
      return span;
    },
    checkValue$1: function(callAction) {
      var oldValue, t1, t2, t3, valid;
      oldValue = this.value;
      t1 = this.hcontrol;
      t2 = J.getInterceptor(t1);
      t3 = !!t2.$isInputElement;
      if (t3 && H.interceptedTypeCast(t1, "$isInputElement").type === "text") {
        t1 = t2.get$value(H.interceptedTypeCast(t1, "$isTextInputElement"));
        this.value = t1;
      } else if (!!t2.$isSelectElement) {
        t1 = J.get$value$x(J.get$first$ax(t2.get$selectedOptions(H.interceptedTypeCast(t1, "$isSelectElement"))));
        this.value = t1;
      } else if (t3 && H.interceptedTypeCast(t1, "$isInputElement").type === "checkbox")
        if (t2.get$checked(H.interceptedTypeCast(t1, "$isCheckboxInputElement")) === true) {
          this.value = "true";
          t1 = "true";
        } else {
          this.value = "false";
          t1 = "false";
        }
      else
        t1 = oldValue;
      t2 = this.refAttribute;
      if (t2 != null)
        valid = $.doc.cfg._schema.attributeIsValid$2(t2, t1);
      else if (!J.$eq(t1, "")) {
        t1 = $.doc.cfg;
        t2 = this.value;
        valid = t1._schema.elementValueIsValid$2(this.refElement, t2) === true;
      } else
        valid = true;
      t1 = this.hcontrol;
      if (valid === true) {
        J.get$classes$x(t1).add$1(0, "valid");
        J.get$classes$x(this.hcontrol).remove$1(0, "invalid");
      } else {
        J.get$classes$x(t1).add$1(0, "invalid");
        J.get$classes$x(this.hcontrol).remove$1(0, "valid");
      }
      if (callAction && !J.$eq(this.value, oldValue) && this.valueChanged != null)
        this.valueChanged$0();
    },
    getValue$0: function() {
      return this.value;
    },
    setValue$1: function(value) {
      var t1, t2, t3, v, option;
      this.value = value;
      t1 = this.hcontrol;
      t2 = J.getInterceptor(t1);
      t3 = !!t2.$isInputElement;
      if (t3 && H.interceptedTypeCast(t1, "$isInputElement").type === "text")
        t2.set$value(H.interceptedTypeCast(t1, "$isTextInputElement"), value);
      else if (!!t2.$isSelectElement) {
        H.interceptedTypeCast(t1, "$isSelectElement");
        for (; t2.get$options(t1)._collection$_source.length > 0;) {
          t3 = C.SelectElement_methods.get$options(t1)._collection$_source;
          if (0 >= t3.length)
            return H.ioore(t3, 0);
          J.remove$0$ax(t3[0]);
        }
        for (t2 = this.values, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
          v = t2._current;
          option = W.OptionElement_OptionElement$_("", "", null, false);
          option.textContent = v;
          if (J.$eq(v, value))
            option.selected = true;
          t1.appendChild(option);
        }
        if (!J.contains$1$asx(this.values, value)) {
          option = W.OptionElement_OptionElement$_("", "", null, false);
          option.textContent = value;
          option.selected = true;
          t1.appendChild(option);
          J.get$classes$x(this.hcontrol).add$1(0, "invalid");
        }
        t1.value = value;
      } else if (t3 && H.interceptedTypeCast(t1, "$isInputElement").type === "checkbox") {
        H.interceptedTypeCast(t1, "$isCheckboxInputElement");
        t3 = J.getInterceptor(value);
        t2.set$checked(t1, t3.$eq(value, "true") || t3.$eq(value, "1"));
      }
    },
    focus$0: function(_) {
      var t1, t2;
      t1 = this.hcontrol;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isTextInputElement) {
        H.interceptedTypeCast(t1, "$isTextInputElement");
        t2.select$0(t1);
        t2 = t1.value.length;
        t1.selectionEnd = t2;
        t1.selectionStart = t2;
      }
    },
    SimpleTypeControl$forElement$3$valueChanged: function(refElement, value, valueChanged) {
      var t1, liste;
      this.refAttribute = null;
      this._uniqueName = "control" + $.SimpleTypeControl__n;
      $.SimpleTypeControl__n = $.SimpleTypeControl__n + 1;
      t1 = this.refElement;
      liste = $.doc.cfg._schema.elementValues$1(t1);
      this.values = liste;
      if (liste == null || liste.length === 0)
        this.suggestedValues = $.doc.cfg.elementSuggestedValues$1(t1);
      else if (!J.contains$1$asx(liste, ""))
        this.values.push("");
      this.catchUndo = true;
    },
    SimpleTypeControl$forAttribute$5$catchUndo$valueChanged: function(refElement, refAttribute, value, catchUndo, valueChanged) {
      var t1, t2, t3, defaultValue;
      this._uniqueName = "control" + $.SimpleTypeControl__n;
      $.SimpleTypeControl__n = $.SimpleTypeControl__n + 1;
      t1 = $.doc.cfg.attributeValues$1(this.refAttribute);
      this.values = t1;
      t1 = t1 == null || t1.length === 0;
      t2 = $.doc;
      t3 = this.refAttribute;
      if (t1)
        this.suggestedValues = t2.cfg.attributeSuggestedValues$2(this.refElement, t3);
      else {
        defaultValue = t2.cfg._schema.defaultAttributeValue$1(t3);
        if (!J.contains$1$asx(this.values, "") && defaultValue == null)
          this.values.push("");
      }
    },
    static: {"^": "SimpleTypeControl__n", SimpleTypeControl$forElement: function(refElement, value, valueChanged) {
        var t1 = new S.SimpleTypeControl(refElement, null, value, null, null, null, null, valueChanged, null);
        t1.SimpleTypeControl$forElement$3$valueChanged(refElement, value, valueChanged);
        return t1;
      }, SimpleTypeControl$forAttribute: function(refElement, refAttribute, value, catchUndo, valueChanged) {
        var t1 = new S.SimpleTypeControl(refElement, refAttribute, value, null, null, null, null, valueChanged, catchUndo);
        t1.SimpleTypeControl$forAttribute$5$catchUndo$valueChanged(refElement, refAttribute, value, catchUndo, valueChanged);
        return t1;
      }}
  },
  SimpleTypeControl_html_closure: {
    "^": "Closure:28;this_0",
    call$1: function($event) {
      return this.this_0.checkValue$1(true);
    },
    $isFunction: true
  },
  SimpleTypeControl_html_closure0: {
    "^": "Closure:28;this_1",
    call$1: function($event) {
      return this.this_1.checkValue$1(true);
    },
    $isFunction: true
  },
  SimpleTypeControl_html_closure1: {
    "^": "Closure:33;this_2",
    call$1: function($event) {
      var t1, ctrl, shift, keyCode, t2, t3;
      t1 = J.getInterceptor$x($event);
      ctrl = t1.get$ctrlKey($event) === true || t1.get$metaKey($event) === true;
      shift = t1.get$shiftKey($event);
      keyCode = t1.get$keyCode($event);
      t1 = this.this_2;
      if (t1.catchUndo)
        if (ctrl) {
          t2 = shift === true;
          t3 = !t2;
          if (!(t3 && keyCode === 90))
            if (!(t3 && keyCode === 89))
              t2 = t2 && keyCode === 90;
            else
              t2 = true;
          else
            t2 = true;
        } else
          t2 = false;
      else
        t2 = false;
      if (t2)
        ;
      else
        t1.checkValue$1(true);
    },
    $isFunction: true
  },
  SimpleTypeControl_html_closure2: {
    "^": "Closure:28;this_3",
    call$1: function($event) {
      return this.this_3.checkValue$1(true);
    },
    $isFunction: true
  },
  SimpleTypeControl_html_closure3: {
    "^": "Closure:33;",
    call$1: function($event) {
      var t1, ctrl, shift, keyCode;
      t1 = J.getInterceptor$x($event);
      ctrl = t1.get$ctrlKey($event) === true || t1.get$metaKey($event) === true;
      shift = t1.get$shiftKey($event);
      keyCode = t1.get$keyCode($event);
      if (ctrl && shift !== true && keyCode === 90)
        $event.preventDefault();
      else {
        if (ctrl) {
          t1 = shift === true;
          if (!(!t1 && keyCode === 89))
            t1 = t1 && keyCode === 90;
          else
            t1 = true;
        } else
          t1 = false;
        if (t1)
          $event.preventDefault();
      }
    },
    $isFunction: true
  },
  SimpleTypeControl_html_closure4: {
    "^": "Closure:33;",
    call$1: function($event) {
      var t1, ctrl, shift, keyCode;
      t1 = J.getInterceptor$x($event);
      ctrl = t1.get$ctrlKey($event) === true || t1.get$metaKey($event) === true;
      shift = t1.get$shiftKey($event);
      keyCode = t1.get$keyCode($event);
      if (ctrl && shift !== true && keyCode === 90) {
        $event.preventDefault();
        $.doc.undo$0();
      } else {
        if (ctrl) {
          t1 = shift === true;
          if (!(!t1 && keyCode === 89))
            t1 = t1 && keyCode === 90;
          else
            t1 = true;
        } else
          t1 = false;
        if (t1) {
          $event.preventDefault();
          $.doc.redo$0();
        }
      }
    },
    $isFunction: true
  }
}],
["wxs", "wxs/wxs.dart", , O, {
  "^": "",
  DaxeWXS: {
    "^": "Object;_wxs$_schema,_hRefElementVersWXS,_hRefAttributVersWXS,_hNomVersWXS,_espaceVersPrefixe,_lTousElements,_schemasInclu,_hashTitres",
    load$1: function(_, schemaURL) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      O.DaxeWXS__readDocument(schemaURL).then$2$onError(new O.DaxeWXS_load_closure(this, schemaURL, completer), new O.DaxeWXS_load_closure0(completer));
      return completer.future;
    },
    elementReferenceByName$1: function($name) {
      var listeWXS = this._hNomVersWXS.$index(0, $name);
      if (listeWXS == null)
        return;
      return J.$index$asx(listeWXS, 0).getDOMElement$0();
    },
    elementReference$2: function(el, parentRef) {
      var nom, espace, t1, t2, t3, t4, t5, topel, wxsParent, liste, element;
      if (parentRef == null) {
        nom = el.get$prefix() == null ? el.get$nodeName(el) : el.get$localName(el);
        espace = el.get$namespaceURI();
        for (t1 = this._schemasInclu, t1 = new P.HashSetIterator(t1, t1._computeElements$0(), 0, null), t2 = J.getInterceptor(nom), t3 = J.getInterceptor(espace); t1.moveNext$0();) {
          t4 = t1._collection$_current.getTopElements$0();
          t5 = new H.MappedIterator(null, J.get$iterator$ax(t4._iterable), t4._f);
          t5.$builtinTypeInfo = [H.getTypeArgumentByIndex(t4, 0), H.getTypeArgumentByIndex(t4, 1)];
          for (; t5.moveNext$0();) {
            topel = t5._current;
            if (topel.getRef$0() == null && !topel._abstractAtt && t2.$eq(nom, topel.getName$0()) && t3.$eq(espace, topel.getNamespace$0()))
              return topel._domElement;
          }
        }
        P.print("JaxeWXS: referenceElement: pas d'\u00e9l\u00e9ment racine correspondant dans le sch\u00e9ma pour " + H.S(nom));
        return;
      }
      wxsParent = this._hRefElementVersWXS.$index(0, parentRef);
      if (wxsParent == null) {
        P.print("DaxeWXS: referenceElement: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(parentRef));
        return;
      }
      liste = wxsParent.subElements$0();
      nom = el.get$localName(el);
      espace = el.get$namespaceURI();
      for (t1 = new H.ListIterator(liste, liste.length, 0, null); t1.moveNext$0();) {
        element = t1._current;
        if (J.$eq(element.getName$0(), nom) && J.$eq(element.getNamespace$0(), espace))
          return element.getDOMElement$0();
      }
      return;
    },
    elementName$1: function(elementRef) {
      var element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null) {
        P.print("DaxeWXS: nomElement: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(elementRef));
        return;
      }
      return element.getName$0();
    },
    elementNamespace$1: function(elementRef) {
      var element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null)
        return;
      return element.getNamespace$0();
    },
    elementDocumentation$1: function(elementRef) {
      var element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null)
        return;
      return element.getDocumentation$0();
    },
    elementValues$1: function(elementRef) {
      var element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null)
        return;
      return element.possibleValues$0();
    },
    elementValueIsValid$2: function(elementRef, value) {
      var element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null)
        return false;
      return element.validValue$1(value);
    },
    namespaceList$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [P.String]);
      t1 = this._wxs$_schema._targetNamespace;
      if (t1 != null)
        liste.push(t1);
      for (t1 = this._espaceVersPrefixe, t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)])._map, t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null); t1.moveNext$0();)
        liste.push(t1._collection$_current);
      return P.List_List$from(liste, true, null);
    },
    allElements$0: function() {
      var liste, t1, t2, el;
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      for (t1 = this._lTousElements, t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
        el = t2._collection$_current;
        if (el.getName$0() != null && el.getRef$0() == null && !el.getAbstract$0())
          liste.push(el.getDOMElement$0());
      }
      return liste;
    },
    rootElements$0: function() {
      var liste, t1, t2, t3, el;
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      for (t1 = this._schemasInclu, t1 = new P.HashSetIterator(t1, t1._computeElements$0(), 0, null); t1.moveNext$0();) {
        t2 = t1._collection$_current.getTopElements$0();
        t3 = new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f);
        t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)];
        for (; t3.moveNext$0();) {
          el = t3._current;
          if (el.getName$0() != null && el.getRef$0() == null && !el.getAbstract$0())
            liste.push(el.getDOMElement$0());
        }
      }
      return liste;
    },
    requiredElement$2: function(parentRef, childRef) {
      var t1, $parent, enfant, bb;
      t1 = this._hRefElementVersWXS;
      $parent = t1.$index(0, parentRef);
      if ($parent == null) {
        P.print("DaxeWXS: requiredElement: unknown element reference: " + H.S(parentRef));
        return false;
      }
      enfant = t1.$index(0, childRef);
      if (enfant == null) {
        P.print("DaxeWXS: requiredElement: unknown element reference: " + H.S(childRef));
        return false;
      }
      bb = $parent.requiredChild$1(enfant);
      return bb != null && bb;
    },
    multipleChildren$2: function(parentRef, childRef) {
      var t1, $parent, enfant, bb;
      t1 = this._hRefElementVersWXS;
      $parent = t1.$index(0, parentRef);
      if ($parent == null) {
        P.print("DaxeWXS: enfantsMultiples: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(parentRef));
        return false;
      }
      enfant = t1.$index(0, childRef);
      if (enfant == null) {
        P.print("DaxeWXS: enfantsMultiples: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(childRef));
        return false;
      }
      bb = $parent.multipleChildren$1(enfant);
      return bb != null && bb;
    },
    subElements$1: function(parentRef) {
      var $parent, sousElements, liste, t1;
      $parent = this._hRefElementVersWXS.$index(0, parentRef);
      if ($parent == null) {
        P.print("DaxeWXS: listeSousElements: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(parentRef));
        return;
      }
      sousElements = $parent.subElements$0();
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      for (t1 = new H.ListIterator(sousElements, sousElements.length, 0, null); t1.moveNext$0();)
        liste.push(t1._current.getDOMElement$0());
      return liste;
    },
    regularExpression$3: function(parentRef, modevisu, modevalid) {
      var $parent = this._hRefElementVersWXS.$index(0, parentRef);
      if ($parent == null) {
        P.print("DaxeWXS: expressionReguliere: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(parentRef));
        return;
      }
      return $parent.elementRegularExpression$0();
    },
    parentElements$1: function(elementRef) {
      var element, parents, liste, t1;
      element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null) {
        P.print("DaxeWXS: listeElementsParents: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(elementRef));
        return;
      }
      parents = element.parentElements$0();
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      for (t1 = new H.ListIterator(parents, parents.length, 0, null); t1.moveNext$0();)
        liste.push(t1._current.getDOMElement$0());
      return liste;
    },
    elementAttributes$1: function(elementRef) {
      var element, attributs, liste, t1;
      element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null) {
        P.print("DaxeWXS: listeAttributs: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(elementRef));
        return;
      }
      attributs = J.attributes$0$x(element);
      liste = H.setRuntimeTypeInfo([], [Z.Element]);
      for (t1 = J.get$iterator$ax(attributs); t1.moveNext$0();)
        liste.push(t1.get$current().getDOMElement$0());
      return liste;
    },
    attributeName$1: function(attributeRef) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: nomAttribut: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return;
      }
      return attribut.getName$0();
    },
    attributeNamespace$1: function(attributeRef) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: espaceAttribut: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return;
      }
      return attribut.getNamespace$0();
    },
    attributeDocumentation$1: function(attributeRef) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: documentationAttribut: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return;
      }
      return attribut.getDocumentation$0();
    },
    isRequired$1: function(attributeRef) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: estObligatoire: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return false;
      }
      return J.$eq(attribut.getUse$0(), "required");
    },
    attributeValues$1: function(attributeRef) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: listeValeursAttribut: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return;
      }
      return attribut.possibleValues$0();
    },
    defaultAttributeValue$1: function(attributeRef) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: valeurParDefaut: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return;
      }
      return J.defaultValue$0$x(attribut);
    },
    attributeIsValid$2: function(attributeRef, value) {
      var attribut = this._hRefAttributVersWXS.$index(0, attributeRef);
      if (attribut == null) {
        P.print("DaxeWXS: attributValide: r\u00e9f\u00e9rence attribut inconnue: " + H.S(attributeRef));
        return false;
      }
      return attribut.validValue$1(value);
    },
    canContainText$1: function(elementRef) {
      var element = this._hRefElementVersWXS.$index(0, elementRef);
      if (element == null) {
        P.print("DaxeWXS: contientDuTexte: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(elementRef));
        return false;
      }
      return element.containsText$0();
    },
    validElement$3: function(elementRef, subElementRefs, insert) {
      var t1, element, sousElements, t2, sousElement;
      t1 = this._hRefElementVersWXS;
      element = t1.$index(0, elementRef);
      if (element == null) {
        P.print("DaxeWXS: elementValide: r\u00e9f\u00e9rence \u00e9l\u00e9ment inconnue: " + H.S(elementRef));
        return false;
      }
      sousElements = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (t2 = new H.ListIterator(subElementRefs, subElementRefs.length, 0, null); t2.moveNext$0();) {
        sousElement = t1.$index(0, t2._current);
        if (sousElement != null)
          sousElements.push(sousElement);
      }
      return element.validateSubElements$2(sousElements, insert);
    },
    _newIncludedSchema$4: function(parentSchemaURL, schemaLocation, importNamespace, parentSchema) {
      var t1, urls, t2, schemaInclu, completer;
      t1 = {};
      t1.urls_0 = null;
      if (J.startsWith$1$s(schemaLocation, "http"))
        t1.urls_0 = schemaLocation;
      else {
        urls = H.S(O.DaxeWXS__getParentURL(parentSchemaURL)) + "/" + schemaLocation;
        t1.urls_0 = urls;
      }
      for (t2 = this._schemasInclu, t2 = new P.HashSetIterator(t2, t2._computeElements$0(), 0, null); t2.moveNext$0();) {
        schemaInclu = t2._collection$_current;
        if (this._normalizePath$1(schemaInclu.getURL$0()) === this._normalizePath$1(t1.urls_0)) {
          this._addNamespaces$3(schemaInclu, parentSchema, importNamespace);
          t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
          t1.$builtinTypeInfo = [null];
          t1._asyncComplete$1(schemaInclu);
          return t1;
        }
      }
      t2 = O.WXSSchema;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      O.DaxeWXS__readDocument(t1.urls_0).then$2$onError(new O.DaxeWXS__newIncludedSchema_closure(t1, this, importNamespace, parentSchema, completer), new O.DaxeWXS__newIncludedSchema_closure0(completer));
      return completer.future;
    },
    _normalizePath$1: function(path) {
      var t1, ind1, p1, ind2, p2;
      t1 = J.getInterceptor$asx(path);
      ind1 = t1.indexOf$1(path, "/");
      if (ind1 === -1)
        return path;
      p1 = t1.substring$2(path, 0, ind1);
      t1 = ind1 + 1;
      ind2 = C.JSString_methods.indexOf$1(C.JSString_methods.substring$1(path, t1), "/");
      if (ind2 === -1)
        return path;
      ind2 += t1;
      p2 = C.JSString_methods.substring$2(path, t1, ind2);
      if (p1 !== ".." && p2 === "..")
        return this._normalizePath$1(C.JSString_methods.substring$1(path, ind2 + 1));
      else
        return C.JSString_methods.substring$2(path, 0, t1) + H.S(this._normalizePath$1(C.JSString_methods.substring$1(path, t1)));
    },
    _addNamespaces$3: function(sch, parentSchema, importNamespace) {
      var prefixe, targetNamespace;
      if (importNamespace != null && this._espaceVersPrefixe.$index(0, importNamespace) == null) {
        prefixe = sch._namespaceToPrefix.$index(0, importNamespace);
        if (prefixe != null)
          this._espaceVersPrefixe.$indexSet(0, importNamespace, prefixe);
        else if (parentSchema != null) {
          prefixe = parentSchema._namespaceToPrefix.$index(0, importNamespace);
          if (prefixe != null)
            this._espaceVersPrefixe.$indexSet(0, importNamespace, prefixe);
        }
      }
      targetNamespace = sch._targetNamespace;
      if (targetNamespace != null && !J.$eq(targetNamespace, "")) {
        prefixe = sch._namespaceToPrefix.$index(0, targetNamespace);
        if (prefixe != null)
          this._espaceVersPrefixe.$indexSet(0, targetNamespace, prefixe);
      }
    },
    _anies$2: function(namespace, targetNamespace) {
      var liste, t1, t2, el, tns, espaces;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      if (namespace != null) {
        t1 = J.getInterceptor(namespace);
        t1 = t1.$eq(namespace, "") || t1.$eq(namespace, "##any");
      } else
        t1 = true;
      if (t1)
        for (t1 = this._lTousElements, t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
          el = t2._collection$_current;
          if (el.getName$0() != null && el.getRef$0() == null && !el.getAbstract$0())
            liste.push(el);
        }
      else {
        t1 = J.getInterceptor(namespace);
        if (t1.$eq(namespace, "##local"))
          for (t1 = this._lTousElements, t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
            el = t2._collection$_current;
            if (el.getName$0() != null && el.getRef$0() == null && !el.getAbstract$0()) {
              tns = el.getNamespace$0();
              if (tns == null || J.$eq(tns, targetNamespace))
                liste.push(el);
            }
          }
        else if (t1.$eq(namespace, "##other"))
          for (t1 = this._lTousElements, t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
            el = t2._collection$_current;
            if (el.getName$0() != null && el.getRef$0() == null && !el.getAbstract$0()) {
              tns = el.getNamespace$0();
              if (tns != null && !J.$eq(tns, targetNamespace))
                liste.push(el);
            }
          }
        else {
          t1 = t1.split$1(namespace, "\\s");
          espaces = P.HashSet_HashSet(null, null, null, null);
          espaces.addAll$1(0, t1);
          if (espaces.contains$1(0, "##targetNamespace")) {
            espaces.remove$1(0, "##targetNamespace");
            espaces.add$1(0, targetNamespace);
          }
          if (espaces.contains$1(0, "##local")) {
            espaces.remove$1(0, "##local");
            espaces.add$1(0, "");
          }
          for (t1 = this._lTousElements, t2 = new P.LinkedHashSetIterator(t1, t1._modifications, null, null), t2._cell = t1._first; t2.moveNext$0();) {
            el = t2._collection$_current;
            if (el.getName$0() != null && el.getRef$0() == null && !el.getAbstract$0()) {
              tns = el.getNamespace$0();
              if (tns != null && espaces.contains$1(0, tns))
                liste.push(el);
            }
          }
        }
      }
      return liste;
    },
    _elementTitle$1: function(el) {
      if (this._hashTitres.$index(0, el.getName$0()) != null)
        return this._hashTitres.$index(0, el.getName$0());
      else
        return el.getName$0();
    },
    DaxeWXS$1: function(hashTitresElements) {
      this._hashTitres = hashTitresElements;
      this._schemasInclu = P.HashSet_HashSet(null, null, null, O.WXSSchema);
      this._espaceVersPrefixe = P.HashMap_HashMap(null, null, null, P.String, P.String);
    },
    $isDaxeWXS: true,
    static: {DaxeWXS__readDocument: function(schemaURL) {
        var t1, completer;
        t1 = Z.Element;
        completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
        new Z.DOMParser().parseFromURL$1(schemaURL).then$2$onError(new O.DaxeWXS__readDocument_closure(completer), new O.DaxeWXS__readDocument_closure0(schemaURL, completer));
        return completer.future;
      }, DaxeWXS__getParentURL: function(u) {
        var t1, ind;
        t1 = J.getInterceptor$asx(u);
        ind = t1.lastIndexOf$1(u, "/");
        if (ind === -1)
          return;
        else
          return t1.substring$2(u, 0, ind);
      }, DaxeWXS__localValue: function($name) {
        var t1, ind;
        if ($name == null)
          return;
        t1 = J.getInterceptor$asx($name);
        ind = t1.indexOf$1($name, ":");
        if (ind === -1)
          return $name;
        return t1.substring$1($name, ind + 1);
      }, DaxeWXS__namePrefix: function($name) {
        var t1, indp;
        if ($name == null)
          return;
        t1 = J.getInterceptor$asx($name);
        indp = t1.indexOf$1($name, ":");
        if (indp === -1)
          return;
        else
          return t1.substring$2($name, 0, indp);
      }, DaxeWXS__booleanValues: function(type, domElement) {
        var tns, espaceSchema;
        tns = domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(type));
        espaceSchema = domElement.namespaceURI;
        if (O.DaxeWXS__localValue(type) === "boolean" && J.$eq(espaceSchema, tns))
          return ["true", "false", "1", "0"];
        return;
      }}
  },
  DaxeWXS_load_closure: {
    "^": "Closure:36;this_0,schemaURL_1,completer_2",
    call$1: function(documentElement) {
      var t1, t2;
      t1 = this.this_0;
      t2 = O.WXSSchema$(documentElement, this.schemaURL_1, t1, null);
      t1._wxs$_schema = t2;
      t1._addNamespaces$3(t2, null, null);
      t1._schemasInclu.add$1(0, t1._wxs$_schema);
      t1._wxs$_schema._inclusions$0().then$1(new O.DaxeWXS_load__closure(t1, this.completer_2));
    },
    $isFunction: true
  },
  DaxeWXS_load__closure: {
    "^": "Closure:12;this_3,completer_4",
    call$1: function(_) {
      var t1, t2, t3, t4, t5, element, listeWXS, attributs, attribut;
      for (t1 = this.this_3, t2 = t1._schemasInclu, t2 = new P.HashSetIterator(t2, t2._computeElements$0(), 0, null), t3 = t1._lTousElements; t2.moveNext$0();)
        t3.addAll$1(0, t2._collection$_current.allElements$0());
      for (t2 = t1._schemasInclu, t2 = new P.HashSetIterator(t2, t2._computeElements$0(), 0, null); t2.moveNext$0();)
        t2._collection$_current._resolveReferences$0();
      for (t2 = new P.LinkedHashSetIterator(t3, t3._modifications, null, null), t2._cell = t3._first, t4 = t1._hRefElementVersWXS, t5 = t1._hNomVersWXS; t2.moveNext$0();) {
        element = t2._collection$_current;
        t4.$indexSet(0, element.getDOMElement$0(), element);
        if (element.getName$0() != null && element.getRef$0() == null) {
          listeWXS = t5.$index(0, element.getName$0());
          if (listeWXS == null) {
            listeWXS = [];
            listeWXS.$builtinTypeInfo = [O.WXSElement];
            t5.$indexSet(0, element.getName$0(), listeWXS);
          }
          J.add$1$ax(listeWXS, element);
        }
      }
      for (t2 = new P.LinkedHashSetIterator(t3, t3._modifications, null, null), t2._cell = t3._first, t1 = t1._hRefAttributVersWXS; t2.moveNext$0();) {
        attributs = J.attributes$0$x(t2._collection$_current);
        if (attributs != null)
          for (t3 = J.get$iterator$ax(attributs); t3.moveNext$0();) {
            attribut = t3.get$current();
            t1.$indexSet(0, attribut.getDOMElement$0(), attribut);
          }
      }
      this.completer_4.complete$0(0);
    },
    $isFunction: true
  },
  DaxeWXS_load_closure0: {
    "^": "Closure:31;completer_5",
    call$1: function(ex) {
      this.completer_5.completeError$1(ex);
    },
    $isFunction: true
  },
  DaxeWXS__newIncludedSchema_closure: {
    "^": "Closure:36;box_0,this_1,importNamespace_2,parentSchema_3,completer_4",
    call$1: function(documentElement) {
      var t1, t2, schemaInclu;
      t1 = this.this_1;
      t2 = this.parentSchema_3;
      schemaInclu = O.WXSSchema$(documentElement, this.box_0.urls_0, t1, t2);
      t1._addNamespaces$3(schemaInclu, t2, this.importNamespace_2);
      t1._schemasInclu.add$1(0, schemaInclu);
      t1 = this.completer_4;
      schemaInclu._inclusions$0().then$2$onError(new O.DaxeWXS__newIncludedSchema__closure(t1, schemaInclu), new O.DaxeWXS__newIncludedSchema__closure0(t1));
    },
    $isFunction: true
  },
  DaxeWXS__newIncludedSchema__closure: {
    "^": "Closure:12;completer_5,schemaInclu_6",
    call$1: function(_) {
      this.completer_5.complete$1(0, this.schemaInclu_6);
    },
    $isFunction: true
  },
  DaxeWXS__newIncludedSchema__closure0: {
    "^": "Closure:31;completer_7",
    call$1: function(ex) {
      this.completer_7.completeError$1(new O.WXSException("include/import: " + H.S(ex), null));
    },
    $isFunction: true
  },
  DaxeWXS__newIncludedSchema_closure0: {
    "^": "Closure:31;completer_8",
    call$1: function(ex) {
      this.completer_8.completeError$1(new O.WXSException("include/import: " + H.S(ex), null));
    },
    $isFunction: true
  },
  DaxeWXS__readDocument_closure: {
    "^": "Closure:30;completer_0",
    call$1: function(schemadoc) {
      this.completer_0.complete$1(0, J.get$documentElement$x(schemadoc));
    },
    $isFunction: true
  },
  DaxeWXS__readDocument_closure0: {
    "^": "Closure:32;schemaURL_1,completer_2",
    call$1: function(ex) {
      var t1 = this.schemaURL_1;
      P.print("DaxeWXS: Error reading " + H.S(t1) + ": " + H.S(ex));
      this.completer_2.completeError$1(new O.WXSException("DaxeWXS: reading " + H.S(t1) + ": " + H.S(ex), null));
    },
    $isFunction: true
  },
  WithSubElements: {
    "^": "Object;"
  },
  WXSAll: {
    "^": "WXSAnnotated;_elements,_minOccurs,_maxOccurs,_parent,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1;
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1._current.resolveReferences$2(schema, redefine);
    },
    allElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        C.JSArray_methods.addAll$1(liste, t1._current.allElements$0());
      return liste;
    },
    subElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        C.JSArray_methods.addAll$1(liste, t1._current.matchingElements$0());
      return liste;
    },
    parentElements$0: function() {
      var t1 = this._parent;
      if (t1 != null)
        return t1.parentElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    regularExpression$0: function() {
      var sb, t1, premier, er;
      sb = P.StringBuffer$("");
      sb.write$1("(");
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null), premier = true; t1.moveNext$0();) {
        er = t1._current.regularExpression$0();
        if (er != null) {
          if (!premier)
            sb._contents += " & ";
          sb._contents += typeof er === "string" ? er : H.S(er);
          premier = false;
        }
      }
      sb.write$1(")");
      if (J.$eq(this._minOccurs, 0))
        sb.write$1("?");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    requiredChild$1: function(child) {
      var t1, element, t2;
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        element = t1._current;
        for (t2 = element.matchingElements$0(), t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();)
          if (J.$eq(t2._current, child))
            return J.$gt$n(this._minOccurs, 0) && J.$gt$n(element._minOccurs, 0);
      }
      return;
    },
    multipleChildren$1: function(child) {
      var t1, t2;
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        for (t2 = t1._current.matchingElements$0(), t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();)
          if (J.$eq(t2._current, child))
            return false;
      return;
    },
    validate$3: function(subElements, start, insertion) {
      var t1, occurences, t2, i, nb, sousElement, trouve, j, t3;
      t1 = this._elements.length;
      if (t1 === 0)
        return start;
      occurences = H.setRuntimeTypeInfo(Array(t1), [P.$int]);
      for (t1 = this._elements.length, t2 = occurences.length, i = 0; i < t1; ++i) {
        if (i >= t2)
          return H.ioore(occurences, i);
        occurences[i] = 0;
      }
      for (i = start, nb = 0; i < subElements.length; ++i) {
        sousElement = subElements[i];
        t1 = J.getInterceptor(sousElement);
        j = 0;
        while (true) {
          t3 = this._elements;
          if (!(j < t3.length)) {
            trouve = false;
            break;
          }
          if (t1.$eq(sousElement, t3[j])) {
            if (j >= t2)
              return H.ioore(occurences, j);
            t1 = occurences[j];
            if (typeof t1 !== "number")
              return t1.$add();
            occurences[j] = t1 + 1;
            trouve = true;
            break;
          }
          ++j;
        }
        if (!trouve)
          break;
        ++nb;
      }
      for (t1 = this._elements.length, i = 0; i < t1; ++i) {
        if (i >= t2)
          return H.ioore(occurences, i);
        t3 = occurences[i];
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 1)
          return start;
      }
      if (!insertion)
        for (i = 0; t1 = this._elements, i < t1.length; ++i) {
          if (i >= t2)
            return H.ioore(occurences, i);
          if (occurences[i] === 0 && !t1[i].isOptionnal$0())
            return start;
        }
      return start + nb;
    },
    isOptionnal$0: function() {
      if (this._elements.length === 0)
        return true;
      if (J.$eq(this._minOccurs, 0))
        return true;
      for (var t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        if (!t1._current.isOptionnal$0())
          return false;
      return true;
    },
    WXSAll$3: function(el, $parent, schema) {
      var n, t1, exception;
      this._parseAnnotation$1(el);
      this._elements = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (n = J.get$firstChild$x(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement && J.$eq(t1.get$localName(n), "element"))
          this._elements.push(O.WXSElement$(H.interceptedTypeCast(n, "$isElement"), this, schema));
      }
      try {
        if (el.hasAttribute$1("minOccurs"))
          this._minOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "minOccurs"), null, null);
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
          ;
        else
          throw exception;
      }

      this._parent = $parent;
    },
    static: {WXSAll$: function(el, $parent, schema) {
        var t1 = new O.WXSAll(null, 1, 1, null, null);
        t1.WXSAll$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSAnnotated: {
    "^": "Object;",
    _parseAnnotation$1: function(el) {
      var n, t1;
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement && J.$eq(t1.get$localName(n), "annotation")) {
          this._annotation = O.WXSAnnotation$(H.interceptedTypeCast(n, "$isElement"));
          break;
        }
      }
    },
    getDocumentation$0: function() {
      var t1 = this._annotation;
      if (t1 == null)
        return;
      return t1.getDocumentation$0();
    }
  },
  WXSAnnotation: {
    "^": "Object;_documentations",
    getDocumentation$0: function() {
      var sb, t1, doc, str;
      if (this._documentations == null)
        return;
      sb = P.StringBuffer$("");
      for (t1 = this._documentations, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        doc = t1._current;
        if (doc.getValue$0() != null) {
          str = doc.getValue$0();
          sb._contents += typeof str === "string" ? str : H.S(str);
        }
      }
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    WXSAnnotation$1: function(el) {
      var n, t1, t2;
      this._documentations = H.setRuntimeTypeInfo([], [O.WXSDocumentation]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement && J.$eq(t1.get$localName(n), "documentation")) {
          t1 = this._documentations;
          t2 = new O.WXSDocumentation(null, null, null);
          t2.WXSDocumentation$1(H.interceptedTypeCast(n, "$isElement"));
          t1.push(t2);
          break;
        }
      }
    },
    static: {WXSAnnotation$: function(el) {
        var t1 = new O.WXSAnnotation(null);
        t1.WXSAnnotation$1(el);
        return t1;
      }}
  },
  WXSAny: {
    "^": "WXSAnnotated;_namespace,_processContents,_minOccurs,_maxOccurs,_parent,_wxs$_schema,_elements,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1, t2, element;
      t1 = H.setRuntimeTypeInfo([], [O.WXSElement]);
      this._elements = t1;
      t2 = this._namespace;
      C.JSArray_methods.addAll$1(t1, schema._jwxs._anies$2(t2, schema._targetNamespace));
      for (t1 = this._elements, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        element = t1._current;
        if (!!J.getInterceptor(element).$isWXSElement) {
          t2 = element._references;
          if (t2 == null) {
            t2 = [];
            t2.$builtinTypeInfo = [O.WXSThing];
            element._references = t2;
          }
          t2.push(this);
        }
      }
    },
    allElements$0: function() {
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    subElements$0: function() {
      if (this._elements == null)
        this.resolveReferences$2(this._wxs$_schema, null);
      return this._elements;
    },
    parentElements$0: function() {
      return this._parent.parentElements$0();
    },
    regularExpression$0: function() {
      var sb, i, t1, t2, str;
      if (this._elements == null)
        this.resolveReferences$2(this._wxs$_schema, null);
      sb = P.StringBuffer$("");
      sb.write$1("(");
      for (i = 0; t1 = this._elements, i < t1.length; ++i) {
        t2 = this._wxs$_schema;
        t1 = t1[i];
        str = t2._jwxs._elementTitle$1(t1);
        t1 = sb._contents += typeof str === "string" ? str : H.S(str);
        if (i !== this._elements.length - 1)
          sb._contents = t1 + "|";
      }
      sb.write$1(")");
      if (J.$eq(this._minOccurs, 0) && J.$eq(this._maxOccurs, 1))
        sb.write$1("?");
      else if (J.$eq(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        sb.write$1("*");
      else if (J.$gt$n(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        sb.write$1("+");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    requiredChild$1: function(child) {
      if (this._elements == null)
        this.resolveReferences$2(this._wxs$_schema, null);
      if (J.contains$1$asx(this._elements, child))
        return J.$gt$n(this._minOccurs, 0) && this._elements.length === 1;
      else
        return;
    },
    multipleChildren$1: function(child) {
      if (this._elements == null)
        this.resolveReferences$2(this._wxs$_schema, null);
      if (J.contains$1$asx(this._elements, child))
        return J.$gt$n(this._maxOccurs, 1);
      else
        return;
    },
    validate$3: function(subElements, start, insertion) {
      var t1, t2, t3, i;
      if (this._elements == null)
        this.resolveReferences$2(this._wxs$_schema, null);
      t1 = !insertion;
      if (t1) {
        t2 = subElements.length;
        t3 = this._minOccurs;
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 < t3;
        t2 = t3;
      } else
        t2 = false;
      if (t2)
        return start;
      for (i = start; t2 = subElements.length, i < t2; ++i) {
        t2 = i - start;
        t3 = this._maxOccurs;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 >= t3)
          return i;
        if (!J.contains$1$asx(this._elements, subElements[i])) {
          if (t1) {
            t1 = this._minOccurs;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = t2 < t1;
          } else
            t1 = false;
          if (t1)
            return start;
          return i;
        }
      }
      return t2;
    },
    isOptionnal$0: function() {
      return J.$eq(this._minOccurs, 0);
    },
    WXSAny$3: function(el, $parent, schema) {
      var exception;
      if (el.hasAttribute$1("namespace"))
        this._namespace = J.getAttribute$1$x(el, "namespace");
      if (el.hasAttribute$1("processContents"))
        this._processContents = J.getAttribute$1$x(el, "processContents");
      try {
        if (el.hasAttribute$1("minOccurs"))
          this._minOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "minOccurs"), null, null);
        if (el.hasAttribute$1("maxOccurs"))
          if (J.$eq(J.getAttribute$1$x(el, "maxOccurs"), "unbounded"))
            this._maxOccurs = 9007199254740992;
          else
            this._maxOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "maxOccurs"), null, null);
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
          ;
        else
          throw exception;
      }

      this._parent = $parent;
      this._wxs$_schema = schema;
      this._elements = null;
    },
    $isWXSAny: true,
    static: {WXSAny$: function(el, $parent, schema) {
        var t1 = new O.WXSAny("##any", "strict", 1, 1, null, null, null, null);
        t1.WXSAny$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSAttribute: {
    "^": "WXSAnnotated;_simpleType,_wxs$_name,_ref,_type,_use,_defaultAtt,_fixed,_form,_wxsRef,_domElement,_parent,_wxs$_schema,_annotation",
    resolveReferences$1: function(schema) {
      var t1, prefixe, tns, wxsType;
      t1 = this._simpleType;
      if (t1 != null)
        t1.resolveReferences$2(schema, null);
      t1 = this._ref;
      if (t1 != null) {
        prefixe = O.DaxeWXS__namePrefix(t1);
        tns = prefixe === "xml" ? "http://www.w3.org/XML/1998/namespace" : this._domElement.lookupNamespaceURI$1(prefixe);
        t1 = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._ref), tns, null, null, "WXSAttribute"), "$isWXSAttribute");
        this._wxsRef = t1;
        if (t1 == null)
          P.print("WXSAttribute: R\u00e9f\u00e9rence d'attribut introuvable : " + H.S(this._ref));
      }
      if (this._simpleType == null && this._type != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(this._type));
        if (tns != null)
          if (J.$eq(tns, this._domElement.namespaceURI)) {
            t1 = schema._targetNamespace;
            t1 = t1 == null || J.$eq(t1, this._domElement.namespaceURI);
          } else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          wxsType = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._type), tns, null, null, "WXSType"), "$isWXSType");
          if (!!J.getInterceptor(wxsType).$isWXSSimpleType)
            this._simpleType = wxsType;
        }
      }
      if (this._simpleType == null && this._wxsRef != null)
        this._simpleType = this._wxsRef._simpleType;
    },
    getName$0: function() {
      var t1 = this._wxs$_name;
      if (t1 == null && this._wxsRef != null)
        return this._wxsRef.getName$0();
      return t1;
    },
    getUse$0: function() {
      return this._use;
    },
    getDOMElement$0: function() {
      return this._domElement;
    },
    getNamespace$0: function() {
      var t1, prefixe, ns, qualified, tn;
      t1 = this._ref;
      if (t1 != null) {
        prefixe = O.DaxeWXS__namePrefix(t1);
        if (prefixe != null) {
          ns = this._domElement.lookupNamespaceURI$1(prefixe);
          if (ns != null)
            return ns;
          if (prefixe === "xml")
            return "http://www.w3.org/XML/1998/namespace";
          return;
        }
      }
      t1 = this._wxs$_schema._attributes;
      if (t1.get$values(t1).contains$1(0, this))
        qualified = true;
      else {
        t1 = this._form;
        qualified = t1 != null ? J.$eq(t1, "qualified") : J.$eq(this._wxs$_schema._attributeFormDefault, "qualified");
      }
      if (qualified) {
        tn = this._wxs$_schema._targetNamespace;
        if (J.$eq(tn, ""))
          return;
        else
          return tn;
      } else
        return;
    },
    parentElements$0: function() {
      var t1 = this._parent;
      if (t1 != null)
        return t1.parentElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    possibleValues$0: function() {
      var fixedval, t1;
      if (this._fixed != null) {
        fixedval = H.setRuntimeTypeInfo([], [P.String]);
        fixedval.push(this._fixed);
        return fixedval;
      }
      t1 = this._wxs$_schema._targetNamespace;
      if (t1 != null && J.$eq(t1, this._domElement.namespaceURI) && O.DaxeWXS__localValue(this._type) === "bool")
        return O.DaxeWXS__booleanValues(this._type, this._domElement);
      t1 = this._simpleType;
      if (t1 != null)
        return t1.possibleValues$0();
      else {
        t1 = this._type;
        if (t1 != null)
          return O.DaxeWXS__booleanValues(t1, this._domElement);
      }
      return;
    },
    defaultValue$0: function(_) {
      var t1 = this._defaultAtt;
      if (t1 != null)
        return t1;
      else {
        t1 = this._fixed;
        if (t1 != null)
          return t1;
        else {
          t1 = this._wxsRef;
          if (t1 != null)
            return t1.defaultValue$0(0);
        }
      }
      return;
    },
    validValue$1: function(value) {
      var t1, tns;
      t1 = this._fixed;
      if (t1 != null)
        return J.$eq(t1, value);
      if ((value == null || J.$eq(value, "")) && J.$eq(this._use, "required"))
        return false;
      t1 = this._simpleType;
      if (t1 != null)
        return t1.validValue$1(value);
      t1 = this._type;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        if (tns != null && J.$eq(tns, this._domElement.namespaceURI))
          return O.WXSSimpleType_validateTypeValue(O.DaxeWXS__localValue(this._type), value);
      }
      t1 = this._wxsRef;
      if (t1 != null)
        return t1.validValue$1(value);
      if (this._type == null)
        return true;
      return false;
    },
    WXSAttribute$3: function(el, $parent, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement && J.$eq(t1.get$localName(n), "simpleType")) {
          this._simpleType = O.WXSSimpleType$(H.interceptedTypeCast(n, "$isElement"), null, schema);
          break;
        }
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = el.getAttribute$1(0, "name");
      if (el.hasAttribute$1("ref"))
        this._ref = el.getAttribute$1(0, "ref");
      if (el.hasAttribute$1("type"))
        this._type = el.getAttribute$1(0, "type");
      if (el.hasAttribute$1("use"))
        this._use = el.getAttribute$1(0, "use");
      if (el.hasAttribute$1("default"))
        this._defaultAtt = el.getAttribute$1(0, "default");
      if (el.hasAttribute$1("fixed"))
        this._fixed = el.getAttribute$1(0, "fixed");
      if (el.hasAttribute$1("form"))
        this._form = el.getAttribute$1(0, "form");
      this._domElement = el;
      this._parent = $parent;
      this._wxs$_schema = schema;
    },
    $isWXSAttribute: true,
    static: {WXSAttribute$: function(el, $parent, schema) {
        var t1 = new O.WXSAttribute(null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.WXSAttribute$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSAttributeGroup: {
    "^": "WXSAnnotated;_attrDecls,_wxs$_name,_ref,_wxsRef,_domElement,_parent,_wxs$_schema,_annotation",
    getNamespace$0: function() {
      return this._wxs$_schema._targetNamespace;
    },
    getParent$0: function() {
      return this._parent;
    },
    resolveReferences$2: function(schema, redefine) {
      var t1, attrDecl, t2, prefixe, tns;
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          attrDecl.resolveReferences$1(schema);
        else if (!!t2.$isWXSAttributeGroup)
          attrDecl.resolveReferences$2(schema, redefine);
      }
      t1 = this._ref;
      if (t1 != null) {
        prefixe = O.DaxeWXS__namePrefix(t1);
        tns = prefixe === "xml" ? "http://www.w3.org/XML/1998/namespace" : this._domElement.lookupNamespaceURI$1(prefixe);
        this._wxsRef = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._ref), tns, null, redefine, "WXSAttributeGroup"), "$isWXSAttributeGroup");
      }
    },
    getName$0: function() {
      var t1 = this._wxs$_name;
      if (t1 == null && this._wxsRef != null)
        return this._wxsRef.getName$0();
      return t1;
    },
    parentElements$0: function() {
      var t1 = this._parent;
      if (t1 != null)
        return t1.parentElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    attributes$0: [function(_) {
      var t1, liste, attrDecl, t2;
      t1 = this._wxsRef;
      if (t1 != null)
        return t1.attributes$0(0);
      liste = H.setRuntimeTypeInfo([], [O.WXSAttribute]);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          liste.push(attrDecl);
        else if (!!t2.$isWXSAttributeGroup)
          C.JSArray_methods.addAll$1(liste, t2.attributes$0(attrDecl));
      }
      return liste;
    }, "call$0", "get$attributes", 0, 0, 42],
    WXSAttributeGroup$3: function(el, $parent, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      this._attrDecls = H.setRuntimeTypeInfo([], [O.WXSThing]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "attribute"))
            this._attrDecls.push(O.WXSAttribute$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "attributeGroup"))
            this._attrDecls.push(O.WXSAttributeGroup$(n, this, schema));
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = el.getAttribute$1(0, "name");
      if (el.hasAttribute$1("ref"))
        this._ref = el.getAttribute$1(0, "ref");
      this._domElement = el;
      this._parent = $parent;
      this._wxs$_schema = schema;
    },
    $isWXSAttributeGroup: true,
    static: {WXSAttributeGroup$: function(el, $parent, schema) {
        var t1 = new O.WXSAttributeGroup(null, null, null, null, null, null, null, null);
        t1.WXSAttributeGroup$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSChoice: {
    "^": "WXSExplicitGroup;_nestedParticles,_minOccurs,_maxOccurs,_parent,_annotation",
    validate$3: function(subElements, start, insertion) {
      var i, nb, t1, pos, t2;
      for (i = start, nb = 0; t1 = subElements.length, i < t1; i = pos) {
        t1 = this._maxOccurs;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (nb >= t1)
          return i;
        for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null), pos = i; t1.moveNext$0();) {
          pos = t1._current.validate$3(subElements, i, insertion);
          if (pos > i)
            break;
        }
        if (pos === i) {
          if (!insertion) {
            t1 = this._minOccurs;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = nb < t1;
          } else
            t1 = false;
          if (t1)
            return start;
          return i;
        }
        ++nb;
      }
      if (!insertion) {
        t2 = this._minOccurs;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = nb < t2;
      } else
        t2 = false;
      if (t2)
        return start;
      return t1;
    },
    isOptionnal$0: function() {
      if (this._nestedParticles.length === 0)
        return true;
      if (J.$eq(this._minOccurs, 0))
        return true;
      for (var t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        if (t1._current.isOptionnal$0())
          return true;
      return false;
    },
    $isWXSChoice: true
  },
  WXSComplexContent: {
    "^": "WXSAnnotated;_modele,_mixed,_parent,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1 = this._modele;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
    },
    allElements$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.allElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    subElements$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.subElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    regularExpression$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.regularExpression$0();
      return;
    },
    requiredChild$1: function(child) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.requiredChild$1(child);
      return;
    },
    multipleChildren$1: function(child) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.multipleChildren$1(child);
      return;
    },
    attributes$0: [function(_) {
      var t1, t2;
      t1 = this._modele;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isWXSRestriction)
        return t2.attributes$0(H.interceptedTypeCast(t1, "$isWXSRestriction"));
      else if (!!t2.$isWXSExtension)
        return t2.attributes$0(H.interceptedTypeCast(t1, "$isWXSExtension"));
      return H.setRuntimeTypeInfo([], [O.WXSAttribute]);
    }, "call$0", "get$attributes", 0, 0, 42],
    parentElements$0: function() {
      return this._parent.parentElements$0();
    },
    validate$3: function(subElements, start, insertion) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.validate$3(subElements, start, insertion);
      return start;
    },
    isOptionnal$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.isOptionnal$0();
      return true;
    },
    WXSComplexContent$3: function(el, $parent, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "restriction"))
            this._modele = O.WXSRestriction$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "extension"))
            this._modele = O.WXSExtension$(n, this, schema);
      }
      if (el.hasAttribute$1("mixed"))
        this._mixed = J.$eq(el.getAttribute$1(0, "mixed"), "true") || J.$eq(el.getAttribute$1(0, "mixed"), "1");
      this._parent = $parent;
    },
    $isWXSComplexContent: true,
    static: {WXSComplexContent$: function(el, $parent, schema) {
        var t1 = new O.WXSComplexContent(null, null, null, null);
        t1.WXSComplexContent$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSComplexType: {
    "^": "WXSAnnotated;_simpleContent,_modele,_attrDecls,_wxs$_name,_mixed,_abstractAtt,_parent,_wxs$_schema,_references,_extensions,_annotation",
    getName$0: function() {
      return this._wxs$_name;
    },
    getNamespace$0: function() {
      return this._wxs$_schema._targetNamespace;
    },
    getParent$0: function() {
      return this._parent;
    },
    resolveReferences$2: function(schema, redefine) {
      var t1, attrDecl, t2;
      t1 = this._simpleContent;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._modele;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          attrDecl.resolveReferences$1(schema);
        else if (!!t2.$isWXSAttributeGroup)
          attrDecl.resolveReferences$2(schema, redefine);
      }
    },
    allElements$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.allElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    subElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._modele;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.subElements$0());
      return liste;
    },
    parentElements$0: function() {
      var liste, t1, substitutions, el;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._parent;
      if (!!J.getInterceptor(t1).$isWXSElement) {
        H.interceptedTypeCast(t1, "$isWXSElement");
        if (!t1._abstractAtt)
          liste.push(t1);
        substitutions = H.interceptedTypeCast(this._parent, "$isWXSElement")._substitutions;
        if (substitutions != null)
          C.JSArray_methods.addAll$1(liste, substitutions);
      }
      t1 = this._references;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          el = t1._current;
          if (!el.getAbstract$0())
            liste.push(el);
          substitutions = el._substitutions;
          if (substitutions != null)
            C.JSArray_methods.addAll$1(liste, substitutions);
        }
      t1 = this._extensions;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          C.JSArray_methods.addAll$1(liste, t1._current.parentElements$0());
      return liste;
    },
    regularExpression$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.regularExpression$0();
      return;
    },
    requiredChild$1: function(child) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.requiredChild$1(child);
      return;
    },
    multipleChildren$1: function(child) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.multipleChildren$1(child);
      return;
    },
    possibleValues$0: function() {
      var t1 = this._simpleContent;
      if (t1 != null)
        return t1.possibleValues$0();
      return;
    },
    attributes$0: [function(_) {
      var t1, t2, liste, attrDecl;
      t1 = this._simpleContent;
      if (t1 != null)
        return t1.attributes$0(0);
      else {
        t1 = this._modele;
        t2 = J.getInterceptor(t1);
        if (!!t2.$isWXSComplexContent)
          return t2.attributes$0(H.interceptedTypeCast(t1, "$isWXSComplexContent"));
      }
      liste = H.setRuntimeTypeInfo([], [O.WXSAttribute]);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          liste.push(attrDecl);
        else if (!!t2.$isWXSAttributeGroup)
          C.JSArray_methods.addAll$1(liste, t2.attributes$0(attrDecl));
      }
      return liste;
    }, "call$0", "get$attributes", 0, 0, 42],
    validate$3: function(subElements, start, insertion) {
      var t1;
      if (this._simpleContent != null)
        return start;
      else {
        t1 = this._modele;
        if (t1 != null)
          return t1.validate$3(subElements, start, insertion);
      }
      return start;
    },
    isOptionnal$0: function() {
      if (this._simpleContent != null)
        return true;
      else {
        var t1 = this._modele;
        if (t1 != null)
          return t1.isOptionnal$0();
      }
      return true;
    },
    validValue$1: function(value) {
      var t1 = this._simpleContent;
      if (t1 != null)
        return t1.validValue$1(value);
      return J.trim$0$s(value) === "" || this.containsText$0();
    },
    containsText$0: function() {
      var t1, wxsBase;
      t1 = this._modele;
      if (!!J.getInterceptor(t1).$isWXSComplexContent) {
        t1 = H.interceptedTypeCast(t1, "$isWXSComplexContent")._modele;
        if (!!J.getInterceptor(t1).$isWXSExtension) {
          H.interceptedTypeCast(t1, "$isWXSExtension");
          wxsBase = t1._modele == null ? t1._wxsBase : null;
        } else {
          H.interceptedTypeCast(t1, "$isWXSRestriction");
          wxsBase = t1._modele == null ? t1._wxsBase : null;
        }
        if (!!J.getInterceptor(wxsBase).$isWXSComplexType)
          return wxsBase.containsText$0();
      }
      if (this._mixed)
        return true;
      if (this._simpleContent != null)
        return true;
      return false;
    },
    WXSComplexType$3: function(el, $parent, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      this._attrDecls = H.setRuntimeTypeInfo([], [O.WXSThing]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "simpleContent"))
            this._simpleContent = O.WXSSimpleContent$(n, schema);
          else if (J.$eq(t1.get$localName(n), "complexContent"))
            this._modele = O.WXSComplexContent$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "group"))
            this._modele = O.WXSGroup$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "all"))
            this._modele = O.WXSAll$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "choice")) {
            t1 = new O.WXSChoice(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (J.$eq(t1.get$localName(n), "sequence")) {
            t1 = new O.WXSSequence(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (J.$eq(t1.get$localName(n), "attribute"))
            this._attrDecls.push(O.WXSAttribute$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "attributeGroup"))
            this._attrDecls.push(O.WXSAttributeGroup$(n, this, schema));
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = el.getAttribute$1(0, "name");
      if (el.hasAttribute$1("mixed"))
        this._mixed = J.$eq(el.getAttribute$1(0, "mixed"), "true") || J.$eq(el.getAttribute$1(0, "mixed"), "1");
      if (el.hasAttribute$1("abstract"))
        this._abstractAtt = J.$eq(el.getAttribute$1(0, "abstract"), "true") || J.$eq(el.getAttribute$1(0, "abstract"), "1");
      this._parent = $parent;
      this._wxs$_schema = schema;
      this._references = null;
      this._extensions = null;
    },
    $isWXSComplexType: true,
    $isWXSType: true,
    static: {WXSComplexType$: function(el, $parent, schema) {
        var t1 = new O.WXSComplexType(null, null, null, null, false, false, null, null, null, null, null);
        t1.WXSComplexType$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSDocumentation: {
    "^": "Object;_source,_lang,_wxs$_value",
    getValue$0: function() {
      return this._wxs$_value;
    },
    WXSDocumentation$1: function(el) {
      var t1;
      if (el.hasAttribute$1("source"))
        this._source = el.getAttribute$1(0, "source");
      if (el.hasAttribute$1("xml:lang"))
        this._lang = el.getAttribute$1(0, "xml:lang");
      t1 = el.firstChild;
      if (t1 != null)
        this._wxs$_value = J.get$nodeValue$x(t1);
    }
  },
  WXSElement: {
    "^": "WXSAnnotated;_simpleType,_complexType,_identityConstraints,_wxs$_name,_ref,_type,_substitutionGroup,_minOccurs,_maxOccurs,_defaultAtt,_fixed,_abstractAtt,_form,_wxsRef,_wxsSubstitutionGroup,_domElement,_parent,_wxs$_schema,_references,_substitutions,_correspondant,_sousElements,_annotation",
    getName$0: function() {
      var t1 = this._wxs$_name;
      if (t1 == null && this._wxsRef != null)
        return this._wxsRef.getName$0();
      return t1;
    },
    getRef$0: function() {
      return this._ref;
    },
    getAbstract$0: function() {
      return this._abstractAtt;
    },
    getDOMElement$0: function() {
      return this._domElement;
    },
    getNamespace$0: function() {
      var t1, qualified;
      t1 = this._wxs$_schema._elements;
      if (t1.get$values(t1).contains$1(0, this))
        qualified = true;
      else {
        t1 = this._form;
        qualified = t1 != null ? J.$eq(t1, "qualified") : J.$eq(this._wxs$_schema._elementFormDefault, "qualified");
      }
      if (qualified)
        return this._wxs$_schema._targetNamespace;
      else
        return;
    },
    getParent$0: function() {
      return this._parent;
    },
    resolveReferences$2: function(schema, redefine) {
      var t1, tns, wxsType, t2;
      t1 = this._simpleType;
      if (t1 != null)
        t1.resolveReferences$2(schema, null);
      t1 = this._complexType;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._ref;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        t1 = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._ref), tns, null, null, "WXSElement"), "$isWXSElement");
        this._wxsRef = t1;
        if (t1 != null)
          t1.addReference$1(this);
        else
          P.print("Element reference not found : " + H.S(this._ref) + " (namespace: " + H.S(tns) + ")");
      }
      if (this._complexType == null && this._simpleType == null && this._type != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(this._type));
        wxsType = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._type), tns, null, redefine, "WXSType"), "$isWXSType");
        t1 = J.getInterceptor(wxsType);
        if (!!t1.$isWXSComplexType) {
          this._complexType = wxsType;
          t1 = wxsType._references;
          if (t1 == null) {
            t1 = H.setRuntimeTypeInfo([], [O.WXSElement]);
            wxsType._references = t1;
          }
          t1.push(this);
        } else if (!!t1.$isWXSSimpleType)
          this._simpleType = wxsType;
      }
      t1 = this._substitutionGroup;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        t1 = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._substitutionGroup), tns, null, null, "WXSElement"), "$isWXSElement");
        this._wxsSubstitutionGroup = t1;
        t2 = t1._substitutions;
        if (t2 == null) {
          t2 = H.setRuntimeTypeInfo([], [O.WXSElement]);
          t1._substitutions = t2;
          t1 = t2;
        } else
          t1 = t2;
        t1.push(this);
      }
    },
    addReference$1: function(thing) {
      var t1 = this._references;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo([], [O.WXSThing]);
        this._references = t1;
      }
      t1.push(thing);
    },
    allElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      liste.push(this);
      t1 = this._complexType;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.allElements$0());
      return liste;
    },
    matchingElements$0: function() {
      var t1, substitution;
      t1 = this._correspondant;
      if (t1 != null)
        return t1;
      t1 = H.setRuntimeTypeInfo([], [O.WXSElement]);
      this._correspondant = t1;
      if (!this._abstractAtt && this._wxs$_name != null)
        t1.push(this);
      t1 = this._wxsRef;
      if (t1 != null)
        J.addAll$1$ax(this._correspondant, t1.matchingElements$0());
      t1 = this._substitutions;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          substitution = t1._current;
          J.addAll$1$ax(this._correspondant, substitution.matchingElements$0());
        }
      return this._correspondant;
    },
    subElements$0: function() {
      var t1, liste;
      t1 = this._sousElements;
      if (t1 != null)
        return t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._wxsRef;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.subElements$0());
      else {
        t1 = this._complexType;
        if (t1 != null)
          C.JSArray_methods.addAll$1(liste, t1.subElements$0());
        else if (this._simpleType == null && this._type == null && this._wxsSubstitutionGroup != null)
          C.JSArray_methods.addAll$1(liste, this._wxsSubstitutionGroup.subElements$0());
      }
      t1 = P.List_List$from(liste, true, null);
      this._sousElements = t1;
      return t1;
    },
    parentElements$0: function() {
      var liste, t1, reference, t2;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._parent;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.parentElements$0());
      t1 = this._references;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          reference = t1._current;
          t2 = J.getInterceptor(reference);
          if (!!t2.$isWXSElement)
            C.JSArray_methods.addAll$1(liste, reference.parentElements$0());
          else if (!!t2.$isWXSAny)
            C.JSArray_methods.addAll$1(liste, reference._parent.parentElements$0());
        }
      t1 = this._wxsSubstitutionGroup;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.parentElements$0());
      return P.List_List$from(liste, true, null);
    },
    elementRegularExpression$0: function() {
      var t1, t2;
      t1 = this._complexType;
      t2 = t1 == null;
      if (t2 && this._simpleType == null && this._type == null && this._wxsSubstitutionGroup != null)
        return this._wxsSubstitutionGroup.elementRegularExpression$0();
      if (t2)
        return;
      return t1.regularExpression$0();
    },
    regularExpression$0: function() {
      var liste, sb, i, t1, el, str;
      liste = this.matchingElements$0();
      if (liste.length === 0)
        return;
      sb = P.StringBuffer$("");
      if (liste.length > 1)
        sb.write$1("(");
      for (i = 0; t1 = liste.length, i < t1; ++i) {
        el = liste[i];
        str = this._wxs$_schema._jwxs._elementTitle$1(el);
        t1 = sb._contents += typeof str === "string" ? str : H.S(str);
        if (i !== liste.length - 1)
          sb._contents = t1 + "|";
      }
      if (t1 > 1)
        sb.write$1(")");
      if (J.$eq(this._minOccurs, 0) && J.$eq(this._maxOccurs, 1))
        sb.write$1("?");
      else if (J.$eq(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        sb.write$1("*");
      else if (J.$gt$n(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        sb.write$1("+");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    requiredChild$1: function(child) {
      var t1, t2;
      t1 = this._complexType;
      t2 = t1 == null;
      if (t2 && this._simpleType == null && this._type == null && this._wxsSubstitutionGroup != null)
        return this._wxsSubstitutionGroup.requiredChild$1(child);
      if (t2)
        return;
      return t1.requiredChild$1(child);
    },
    multipleChildren$1: function(child) {
      var t1, t2;
      t1 = this._complexType;
      t2 = t1 == null;
      if (t2 && this._simpleType == null && this._type == null && this._wxsSubstitutionGroup != null)
        return this._wxsSubstitutionGroup.multipleChildren$1(child);
      if (t2)
        return;
      return t1.multipleChildren$1(child);
    },
    possibleValues$0: function() {
      var fixedval, t1;
      if (this._fixed != null) {
        fixedval = H.setRuntimeTypeInfo([], [P.String]);
        fixedval.push(this._fixed);
        return fixedval;
      }
      t1 = this._simpleType;
      if (t1 != null)
        return t1.possibleValues$0();
      else {
        t1 = this._complexType;
        if (t1 != null)
          return t1.possibleValues$0();
        else {
          t1 = this._type;
          if (t1 != null)
            return O.DaxeWXS__booleanValues(t1, this._domElement);
          else if (this._wxsSubstitutionGroup != null)
            return this._wxsSubstitutionGroup.possibleValues$0();
        }
      }
      return;
    },
    attributes$0: [function(_) {
      var t1 = this._wxsRef;
      if (t1 != null)
        return t1.attributes$0(0);
      t1 = this._complexType;
      if (t1 != null)
        return t1.attributes$0(0);
      else if (this._simpleType == null && this._type == null && this._wxsSubstitutionGroup != null)
        return this._wxsSubstitutionGroup.attributes$0(0);
      return H.setRuntimeTypeInfo([], [O.WXSAttribute]);
    }, "call$0", "get$attributes", 0, 0, 42],
    containsText$0: function() {
      var t1, tns, schemaNamespace;
      t1 = this._type;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        schemaNamespace = this._domElement.namespaceURI;
        t1 = J.getInterceptor(schemaNamespace);
        if (!t1.$eq(schemaNamespace, this._wxs$_schema._targetNamespace) && t1.$eq(schemaNamespace, tns))
          return true;
      }
      t1 = this._complexType;
      if (t1 != null)
        return t1.containsText$0();
      if (this._simpleType != null)
        return true;
      t1 = this._type == null && this._wxsSubstitutionGroup != null;
      if (t1)
        return this._wxsSubstitutionGroup.containsText$0();
      return false;
    },
    validateSubElements$2: function(subElements, insert) {
      var t1, pos;
      t1 = this._complexType;
      if (t1 == null) {
        if (this._simpleType == null && this._type == null && this._wxsSubstitutionGroup != null)
          return this._wxsSubstitutionGroup.validateSubElements$2(subElements, insert);
        return subElements.length === 0;
      }
      if (subElements.length === 0) {
        if (insert)
          return true;
        if (t1.isOptionnal$0())
          return true;
      }
      pos = this._complexType.validate$3(subElements, 0, insert);
      return pos > 0 && pos === subElements.length;
    },
    validate$3: function(subElements, start, insertion) {
      var correspondant, i, nb, t1, trouve, el;
      correspondant = this.matchingElements$0();
      for (i = start, nb = 0; i < subElements.length; ++i) {
        t1 = this._maxOccurs;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (nb >= t1)
          return i;
        for (t1 = new H.ListIterator(correspondant, correspondant.length, 0, null), trouve = false; t1.moveNext$0();) {
          el = t1._current;
          if (i >= subElements.length)
            return H.ioore(subElements, i);
          if (J.$eq(el, subElements[i]))
            trouve = true;
        }
        if (!trouve) {
          if (!insertion) {
            t1 = this._minOccurs;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = nb < t1;
          } else
            t1 = false;
          if (t1)
            return start;
          return i;
        }
        ++nb;
      }
      if (!insertion) {
        t1 = this._minOccurs;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = nb < t1;
      } else
        t1 = false;
      if (t1)
        return start;
      return start + nb;
    },
    isOptionnal$0: function() {
      return J.$eq(this._minOccurs, 0);
    },
    validValue$1: function(value) {
      var t1, tns;
      t1 = this._fixed;
      if (t1 != null)
        return J.$eq(t1, value);
      t1 = this._simpleType;
      if (t1 != null)
        return t1.validValue$1(value);
      t1 = this._complexType;
      if (t1 != null)
        return t1.validValue$1(value);
      t1 = this._type;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        if (tns != null && J.$eq(tns, this._domElement.namespaceURI))
          return O.WXSSimpleType_validateTypeValue(O.DaxeWXS__localValue(this._type), value);
        return false;
      } else
        return true;
    },
    WXSElement$3: function(el, $parent, schema) {
      var n, t1, t2, exception;
      this._parseAnnotation$1(el);
      this._identityConstraints = H.setRuntimeTypeInfo([], [O.WXSThing]);
      for (n = J.get$firstChild$x(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "simpleType"))
            this._simpleType = O.WXSSimpleType$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "complexType"))
            this._complexType = O.WXSComplexType$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "unique")) {
            t1 = this._identityConstraints;
            t2 = new O.WXSUnique(null, null, null, null);
            t2._parse$1(n);
            t1.push(t2);
          } else if (J.$eq(t1.get$localName(n), "key")) {
            t1 = this._identityConstraints;
            t2 = new O.WXSKey(null, null, null, null);
            t2._parse$1(n);
            t1.push(t2);
          } else if (J.$eq(t1.get$localName(n), "keyref")) {
            t1 = this._identityConstraints;
            t2 = new O.WXSKeyref(null, null, null, null, null);
            t2._parse$1(n);
            t1.push(t2);
          }
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = J.getAttribute$1$x(el, "name");
      if (el.hasAttribute$1("ref"))
        this._ref = J.getAttribute$1$x(el, "ref");
      if (el.hasAttribute$1("type"))
        this._type = J.getAttribute$1$x(el, "type");
      if (el.hasAttribute$1("substitutionGroup"))
        this._substitutionGroup = J.getAttribute$1$x(el, "substitutionGroup");
      try {
        if (el.hasAttribute$1("minOccurs"))
          this._minOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "minOccurs"), null, null);
        if (el.hasAttribute$1("maxOccurs"))
          if (J.$eq(J.getAttribute$1$x(el, "maxOccurs"), "unbounded"))
            this._maxOccurs = 9007199254740992;
          else
            this._maxOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "maxOccurs"), null, null);
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
          ;
        else
          throw exception;
      }

      if (el.hasAttribute$1("default"))
        this._defaultAtt = J.getAttribute$1$x(el, "default");
      if (el.hasAttribute$1("fixed"))
        this._fixed = J.getAttribute$1$x(el, "fixed");
      if (el.hasAttribute$1("abstract"))
        this._abstractAtt = J.$eq(J.getAttribute$1$x(el, "abstract"), "true") || J.$eq(J.getAttribute$1$x(el, "abstract"), "1");
      if (el.hasAttribute$1("form"))
        this._form = J.getAttribute$1$x(el, "form");
      this._domElement = el;
      this._parent = $parent;
      this._wxs$_schema = schema;
      this._references = null;
      this._substitutions = null;
      this._sousElements = null;
      this._correspondant = null;
    },
    $isWXSElement: true,
    static: {WXSElement$: function(el, $parent, schema) {
        var t1 = new O.WXSElement(null, null, null, null, null, null, null, 1, 1, null, null, false, null, null, null, null, null, null, null, null, null, null, null);
        t1.WXSElement$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSException: {
    "^": "Object;message>,parentException",
    toString$0: function(_) {
      var s = this.message;
      return s;
    },
    $isException: true
  },
  WXSExplicitGroup: {
    "^": "WXSAnnotated;",
    _parse$3: function(el, $parent, schema) {
      var n, t1, t2, exception;
      this._parseAnnotation$1(el);
      this._nestedParticles = H.setRuntimeTypeInfo([], [O.WithSubElements]);
      for (n = J.get$firstChild$x(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "element"))
            this._nestedParticles.push(O.WXSElement$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "group"))
            this._nestedParticles.push(O.WXSGroup$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "choice")) {
            t1 = this._nestedParticles;
            t2 = new O.WXSChoice(null, 1, 1, null, null);
            t2._parse$3(n, this, schema);
            t1.push(t2);
          } else if (J.$eq(t1.get$localName(n), "sequence")) {
            t1 = this._nestedParticles;
            t2 = new O.WXSSequence(null, 1, 1, null, null);
            t2._parse$3(n, this, schema);
            t1.push(t2);
          } else if (J.$eq(t1.get$localName(n), "any"))
            this._nestedParticles.push(O.WXSAny$(n, this, schema));
      }
      try {
        if (el.hasAttribute$1("minOccurs"))
          this._minOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "minOccurs"), null, null);
        if (el.hasAttribute$1("maxOccurs"))
          if (J.$eq(J.getAttribute$1$x(el, "maxOccurs"), "unbounded"))
            this._maxOccurs = 9007199254740992;
          else
            this._maxOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "maxOccurs"), null, null);
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
          ;
        else
          throw exception;
      }

      this._parent = $parent;
    },
    resolveReferences$2: function(schema, redefine) {
      var t1, nestedParticle;
      for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        nestedParticle = t1._current;
        if (!J.getInterceptor(nestedParticle).$isWXSAny)
          nestedParticle.resolveReferences$2(schema, redefine);
      }
    },
    allElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        C.JSArray_methods.addAll$1(liste, t1._current.allElements$0());
      return liste;
    },
    subElements$0: function() {
      var liste, t1, nestedParticle;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        nestedParticle = t1._current;
        if (!!J.getInterceptor(nestedParticle).$isWXSElement)
          C.JSArray_methods.addAll$1(liste, nestedParticle.matchingElements$0());
        else
          C.JSArray_methods.addAll$1(liste, nestedParticle.subElements$0());
      }
      return liste;
    },
    parentElements$0: function() {
      var t1 = this._parent;
      if (t1 != null)
        return t1.parentElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    regularExpression$0: function() {
      var separateur, sb, t1, premier, er, ssb;
      if (this._nestedParticles.length === 0)
        return;
      separateur = !!this.$isWXSChoice ? "|" : ", ";
      sb = P.StringBuffer$("");
      if (this._nestedParticles.length > 1 || !J.$eq(this._minOccurs, 1) || !J.$eq(this._maxOccurs, 1))
        sb.write$1("(");
      for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null), premier = true; t1.moveNext$0();) {
        er = t1._current.regularExpression$0();
        if (er != null) {
          if (!premier)
            sb._contents += separateur;
          sb._contents += typeof er === "string" ? er : H.S(er);
          premier = false;
        }
      }
      if (this._nestedParticles.length > 1 || !J.$eq(this._minOccurs, 1) || !J.$eq(this._maxOccurs, 1))
        sb.write$1(")");
      if (this._nestedParticles.length === 1 && sb._contents.length > 2) {
        t1 = sb._contents;
        ssb = t1.charCodeAt(0) == 0 ? t1 : t1;
        if (J.getInterceptor$s(ssb).substring$2(ssb, 0, 2) === "((") {
          t1 = sb._contents.length;
          t1 = C.JSString_methods.substring$2(ssb, t1 - 2, t1) === "))";
        } else
          t1 = false;
        if (t1)
          sb = P.StringBuffer$(C.JSString_methods.substring$2(ssb, 1, ssb.length - 1));
      }
      if (J.$eq(this._minOccurs, 0) && J.$eq(this._maxOccurs, 1))
        sb.write$1("?");
      else if (J.$eq(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        sb.write$1("*");
      else if (J.$gt$n(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        sb.write$1("+");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    requiredChild$1: function(child) {
      var t1, nestedParticle, t2, bb;
      for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        nestedParticle = t1._current;
        if (!!J.getInterceptor(nestedParticle).$isWXSElement) {
          for (t2 = nestedParticle.matchingElements$0(), t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();)
            if (J.$eq(t2._current, child))
              return (!!this.$isWXSSequence || this._nestedParticles.length === 1) && !J.$eq(this._minOccurs, 0) && !J.$eq(nestedParticle._minOccurs, 0);
        } else {
          bb = nestedParticle.requiredChild$1(child);
          if (bb != null)
            return bb;
        }
      }
      return;
    },
    multipleChildren$1: function(child) {
      var t1, nestedParticle, t2, bb;
      for (t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        nestedParticle = t1._current;
        if (!!J.getInterceptor(nestedParticle).$isWXSElement) {
          for (t2 = nestedParticle.matchingElements$0(), t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();)
            if (J.$eq(t2._current, child))
              return J.$gt$n(nestedParticle._maxOccurs, 1) || J.$gt$n(this._maxOccurs, 1);
        } else {
          bb = nestedParticle.multipleChildren$1(child);
          if (bb != null && !bb && J.$gt$n(this._maxOccurs, 1))
            bb = true;
          if (bb != null)
            return bb;
        }
      }
      return;
    }
  },
  WXSExtension: {
    "^": "WXSAnnotated;_modele,_attrDecls,_base,_wxsBase,_domElement,_parent,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1, attrDecl, t2, tns;
      t1 = this._modele;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          attrDecl.resolveReferences$1(schema);
        else if (!!t2.$isWXSAttributeGroup)
          attrDecl.resolveReferences$2(schema, redefine);
      }
      t1 = this._base;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        t1 = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._base), tns, null, redefine, "WXSType"), "$isWXSType");
        this._wxsBase = t1;
        if (!!J.getInterceptor(t1).$isWXSComplexType) {
          H.interceptedTypeCast(t1, "$isWXSComplexType");
          t2 = t1._extensions;
          if (t2 == null) {
            t2 = H.setRuntimeTypeInfo([], [O.WXSExtension]);
            t1._extensions = t2;
            t1 = t2;
          } else
            t1 = t2;
          t1.push(this);
        }
      }
    },
    allElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._modele;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.allElements$0());
      return liste;
    },
    subElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._wxsBase;
      if (!!J.getInterceptor(t1).$isWXSComplexType)
        C.JSArray_methods.addAll$1(liste, H.interceptedTypeCast(t1, "$isWXSComplexType").subElements$0());
      t1 = this._modele;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.subElements$0());
      return liste;
    },
    parentElements$0: function() {
      var t1 = this._parent;
      if (t1 != null)
        return t1._parent.parentElements$0();
      else
        return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    regularExpression$0: function() {
      var t1, erBase, erModele;
      t1 = this._wxsBase;
      erBase = !!J.getInterceptor(t1).$isWXSComplexType ? H.interceptedTypeCast(t1, "$isWXSComplexType").regularExpression$0() : null;
      t1 = this._modele;
      erModele = t1 != null ? t1.regularExpression$0() : null;
      t1 = erBase == null;
      if (t1 && erModele == null)
        return "";
      else if (!t1 && erModele == null)
        return erBase;
      else if (t1 && erModele != null)
        return erModele;
      else
        return "(" + H.S(erBase) + ", " + H.S(erModele) + ")";
    },
    requiredChild$1: function(child) {
      var t1, bb1, t2, bb2;
      t1 = this._wxsBase;
      bb1 = !!J.getInterceptor(t1).$isWXSComplexType ? H.interceptedTypeCast(t1, "$isWXSComplexType").requiredChild$1(child) : null;
      t1 = bb1 != null;
      if (t1 && bb1)
        return bb1;
      t2 = this._modele;
      bb2 = t2 != null ? t2.requiredChild$1(child) : null;
      if (bb2 != null && bb2)
        return bb2;
      return t1 ? bb1 : bb2;
    },
    multipleChildren$1: function(child) {
      var t1, bb1, t2, bb2;
      t1 = this._wxsBase;
      bb1 = !!J.getInterceptor(t1).$isWXSComplexType ? H.interceptedTypeCast(t1, "$isWXSComplexType").multipleChildren$1(child) : null;
      t1 = bb1 != null;
      if (t1 && bb1)
        return bb1;
      t2 = this._modele;
      bb2 = t2 != null ? t2.multipleChildren$1(child) : null;
      return t1 ? bb1 : bb2;
    },
    possibleValues$0: function() {
      var t1 = this._wxsBase;
      if (t1 != null)
        return t1.possibleValues$0();
      else {
        t1 = this._base;
        if (t1 != null)
          return O.DaxeWXS__booleanValues(t1, this._domElement);
      }
      return;
    },
    attributes$0: [function(_) {
      var liste, t1, attrDecl, t2, listeBase, aAjouter, attributExt, nomExt, trouve, t3;
      liste = H.setRuntimeTypeInfo([], [O.WXSAttribute]);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          liste.push(attrDecl);
        else if (!!t2.$isWXSAttributeGroup)
          C.JSArray_methods.addAll$1(liste, t2.attributes$0(attrDecl));
      }
      t1 = this._wxsBase;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isWXSComplexType) {
        listeBase = t2.attributes$0(H.interceptedTypeCast(t1, "$isWXSComplexType"));
        aAjouter = H.setRuntimeTypeInfo([], [O.WXSAttribute]);
        for (t1 = new H.ListIterator(liste, liste.length, 0, null); t1.moveNext$0();) {
          attributExt = t1._current;
          nomExt = attributExt.getName$0();
          t2 = new H.ListIterator(listeBase, listeBase.length, 0, null);
          t3 = J.getInterceptor(nomExt);
          while (true) {
            if (!t2.moveNext$0()) {
              trouve = false;
              break;
            }
            if (t3.$eq(nomExt, t2._current.getName$0())) {
              trouve = true;
              break;
            }
          }
          if (!trouve)
            aAjouter.push(attributExt);
        }
        C.JSArray_methods.addAll$1(listeBase, aAjouter);
        return listeBase;
      }
      return liste;
    }, "call$0", "get$attributes", 0, 0, 42],
    validate$3: function(subElements, start, insertion) {
      var t1, pos, pos2;
      t1 = this._wxsBase;
      if (!!J.getInterceptor(t1).$isWXSComplexType) {
        pos = H.interceptedTypeCast(t1, "$isWXSComplexType").validate$3(subElements, start, insertion);
        if (pos === start && !insertion && !H.interceptedTypeCast(this._wxsBase, "$isWXSComplexType").isOptionnal$0())
          return start;
      } else
        pos = start;
      t1 = this._modele;
      if (t1 != null) {
        pos2 = t1.validate$3(subElements, pos, insertion);
        if (pos2 === pos && !insertion && !this._modele.isOptionnal$0())
          return start;
        pos = pos2;
      }
      return pos;
    },
    isOptionnal$0: function() {
      var t1 = this._wxsBase;
      if (!!J.getInterceptor(t1).$isWXSComplexType && !H.interceptedTypeCast(t1, "$isWXSComplexType").isOptionnal$0())
        return false;
      t1 = this._modele;
      if (t1 != null)
        return t1.isOptionnal$0();
      return true;
    },
    validValue$1: function(value) {
      var t1 = this._wxsBase;
      if (t1 != null)
        return t1.validValue$1(value);
      else {
        t1 = this._base;
        if (t1 != null)
          return O.WXSSimpleType_validateTypeValue(O.DaxeWXS__localValue(t1), value);
      }
      return false;
    },
    WXSExtension$3: function(el, $parent, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      this._attrDecls = H.setRuntimeTypeInfo([], [O.WXSThing]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "group"))
            this._modele = O.WXSGroup$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "all"))
            this._modele = O.WXSAll$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "choice")) {
            t1 = new O.WXSChoice(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (J.$eq(t1.get$localName(n), "sequence")) {
            t1 = new O.WXSSequence(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (J.$eq(t1.get$localName(n), "attribute"))
            this._attrDecls.push(O.WXSAttribute$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "attributeGroup"))
            this._attrDecls.push(O.WXSAttributeGroup$(n, this, schema));
      }
      if (el.hasAttribute$1("base"))
        this._base = el.getAttribute$1(0, "base");
      this._domElement = el;
      this._parent = $parent;
    },
    $isWXSExtension: true,
    static: {WXSExtension$: function(el, $parent, schema) {
        var t1 = new O.WXSExtension(null, null, null, null, null, null, null);
        t1.WXSExtension$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSFacet: {
    "^": "WXSAnnotated;_facet,_wxs$_value,_fixed,_iparam,_annotation",
    getFacet$0: function() {
      return this._facet;
    },
    getValue$0: function() {
      return this._wxs$_value;
    },
    validValue$1: function(value) {
      var val, val0, val1, val2, t1, exception, nb, i, apres, t2;
      if (J.$eq(this._facet, "minExclusive"))
        try {
          val = H.Primitives_parseDouble(value, null);
          t1 = J.$gt$n(val, this._iparam);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
            return false;
          else
            throw exception;
        }

      else if (J.$eq(this._facet, "minInclusive"))
        try {
          val0 = H.Primitives_parseDouble(value, null);
          t1 = J.$ge$n(val0, this._iparam);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
            return false;
          else
            throw exception;
        }

      else if (J.$eq(this._facet, "maxExclusive"))
        try {
          val1 = H.Primitives_parseDouble(value, null);
          t1 = J.$lt$n(val1, this._iparam);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
            return false;
          else
            throw exception;
        }

      else if (J.$eq(this._facet, "maxInclusive"))
        try {
          val2 = H.Primitives_parseDouble(value, null);
          t1 = J.$le$n(val2, this._iparam);
          return t1;
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
            return false;
          else
            throw exception;
        }

      else if (J.$eq(this._facet, "totalDigits")) {
        nb = 0;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(value);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (J.compareTo$1$ns(J.$index$asx(value, i), "0") >= 0 && J.compareTo$1$ns(J.$index$asx(value, i), "9") <= 0)
            ++nb;
          ++i;
        }
        t1 = this._iparam;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return nb <= t1;
      } else if (J.$eq(this._facet, "fractionDigits")) {
        nb = 0;
        apres = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(value);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          if (!apres)
            apres = J.$eq(J.$index$asx(value, i), ".") && true;
          else if (J.compareTo$1$ns(J.$index$asx(value, i), "0") >= 0 && J.compareTo$1$ns(J.$index$asx(value, i), "9") <= 0)
            ++nb;
          ++i;
        }
        t1 = this._iparam;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return nb <= t1;
      } else if (J.$eq(this._facet, "length")) {
        t1 = J.get$length$asx(value);
        t2 = this._iparam;
        return t1 == null ? t2 == null : t1 === t2;
      } else if (J.$eq(this._facet, "minLength")) {
        t1 = J.get$length$asx(value);
        t2 = this._iparam;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 >= t2;
      } else if (J.$eq(this._facet, "maxLength")) {
        t1 = J.get$length$asx(value);
        t2 = this._iparam;
        if (typeof t1 !== "number")
          return t1.$le();
        if (typeof t2 !== "number")
          return H.iae(t2);
        return t1 <= t2;
      } else if (J.$eq(this._facet, "enumeration")) {
        t1 = this._wxs$_value;
        return t1 != null && J.$eq(t1, value);
      } else if (J.$eq(this._facet, "whiteSpace"))
        return true;
      else if (J.$eq(this._facet, "pattern"))
        return O.WXSSimpleType__verifExpr(value, this._wxs$_value);
      else
        return true;
    },
    WXSFacet$1: function(el) {
      var t1;
      this._parseAnnotation$1(el);
      this._facet = el.get$localName(el);
      if (el.hasAttribute$1("value")) {
        t1 = el.getAttribute$1(0, "value");
        this._wxs$_value = t1;
        this._iparam = H.Primitives_parseInt(t1, null, new O.WXSFacet_closure());
        if (J.$eq(this._facet, "pattern")) {
          t1 = J.replaceAll$2$s(this._wxs$_value, "\\i", "[^<>&#!/?'\",0-9.\\-\\s]");
          this._wxs$_value = t1;
          t1 = J.replaceAll$2$s(t1, "\\I", "[^a-zA-Z]");
          this._wxs$_value = t1;
          t1 = J.replaceAll$2$s(t1, "\\c", "[^<>&#!/?'\",\\s]");
          this._wxs$_value = t1;
          this._wxs$_value = J.replaceAll$2$s(t1, "\\C", "\\W");
        }
      }
      if (el.hasAttribute$1("fixed"))
        this._fixed = J.$eq(el.getAttribute$1(0, "fixed"), "true") || J.$eq(el.getAttribute$1(0, "fixed"), "1");
    },
    static: {WXSFacet$: function(el) {
        var t1 = new O.WXSFacet(null, null, false, 0, null);
        t1.WXSFacet$1(el);
        return t1;
      }}
  },
  WXSFacet_closure: {
    "^": "Closure:0;",
    call$1: function(source) {
      return 0;
    },
    $isFunction: true
  },
  WXSField: {
    "^": "WXSAnnotated;_xpath,_annotation"
  },
  WXSGroup: {
    "^": "WXSAnnotated;_modele,_wxs$_name,_ref,_wxsRef,_minOccurs,_maxOccurs,_domElement,_parent,_wxs$_schema,_references,_annotation",
    getName$0: function() {
      var t1 = this._wxs$_name;
      if (t1 == null && this._wxsRef != null)
        return this._wxsRef.getName$0();
      return t1;
    },
    getNamespace$0: function() {
      return this._wxs$_schema._targetNamespace;
    },
    getParent$0: function() {
      return this._parent;
    },
    resolveReferences$2: function(schema, redefine) {
      var t1, tns, t2;
      t1 = this._modele;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._ref;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        t1 = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._ref), tns, null, redefine, "WXSGroup"), "$isWXSGroup");
        this._wxsRef = t1;
        if (t1 != null) {
          t2 = t1._references;
          if (t2 == null) {
            t2 = H.setRuntimeTypeInfo([], [O.WXSGroup]);
            t1._references = t2;
            t1 = t2;
          } else
            t1 = t2;
          t1.push(this);
        } else
          P.print("R\u00e9f\u00e9rence de groupe introuvable : " + H.S(this._ref));
      }
    },
    allElements$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.allElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    subElements$0: function() {
      var t1 = this._wxsRef;
      if (t1 != null)
        return t1.subElements$0();
      t1 = this._modele;
      if (t1 != null)
        return t1.subElements$0();
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    parentElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._parent;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.parentElements$0());
      t1 = this._references;
      if (t1 != null)
        for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
          C.JSArray_methods.addAll$1(liste, t1._current.parentElements$0());
      return liste;
    },
    regularExpression$0: function() {
      var t1, er;
      t1 = this._wxsRef;
      if (t1 != null)
        er = t1.regularExpression$0();
      else {
        t1 = this._modele;
        er = t1 != null ? t1.regularExpression$0() : "()";
      }
      if (J.$eq(this._minOccurs, 0) && J.$eq(this._maxOccurs, 1))
        return H.S(er) + "?";
      else if (J.$eq(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        return H.S(er) + "*";
      else if (J.$gt$n(this._minOccurs, 0) && J.$gt$n(this._maxOccurs, 1))
        return H.S(er) + "+";
      else
        return er;
    },
    requiredChild$1: function(child) {
      var t1 = this._wxsRef;
      if (t1 != null)
        return t1.requiredChild$1(child);
      t1 = this._modele;
      return t1 != null ? t1.requiredChild$1(child) : null;
    },
    multipleChildren$1: function(child) {
      var t1 = this._wxsRef;
      if (t1 != null)
        return t1.multipleChildren$1(child);
      t1 = this._modele;
      return t1 != null ? t1.multipleChildren$1(child) : null;
    },
    validate$3: function(subElements, start, insertion) {
      var t1, t2, i, nb, pos;
      if (!insertion) {
        t1 = subElements.length;
        t2 = this._minOccurs;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 < t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        return start;
      for (i = start, nb = 0; t1 = subElements.length, i < t1; i = pos) {
        t1 = this._maxOccurs;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (nb >= t1)
          return i;
        t1 = this._wxsRef;
        if (t1 != null)
          pos = t1.validate$3(subElements, i, insertion);
        else {
          t1 = this._modele;
          pos = t1 != null ? t1.validate$3(subElements, i, insertion) : i;
        }
        if (pos === i)
          return i;
        ++nb;
      }
      return t1;
    },
    isOptionnal$0: function() {
      if (J.$eq(this._minOccurs, 0))
        return true;
      var t1 = this._wxsRef;
      if (t1 != null)
        return t1.isOptionnal$0();
      t1 = this._modele;
      if (t1 != null)
        return t1.isOptionnal$0();
      return true;
    },
    WXSGroup$3: function(el, $parent, schema) {
      var n, t1, exception;
      this._parseAnnotation$1(el);
      for (n = J.get$firstChild$x(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "all"))
            this._modele = O.WXSAll$(n, this, schema);
          else if (J.$eq(t1.get$localName(n), "choice")) {
            t1 = new O.WXSChoice(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (J.$eq(t1.get$localName(n), "sequence")) {
            t1 = new O.WXSSequence(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          }
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = J.getAttribute$1$x(el, "name");
      if (el.hasAttribute$1("ref"))
        this._ref = J.getAttribute$1$x(el, "ref");
      try {
        if (el.hasAttribute$1("minOccurs"))
          this._minOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "minOccurs"), null, null);
        if (el.hasAttribute$1("maxOccurs"))
          if (J.$eq(J.getAttribute$1$x(el, "maxOccurs"), "unbounded"))
            this._maxOccurs = 9007199254740992;
          else
            this._maxOccurs = H.Primitives_parseInt(J.getAttribute$1$x(el, "maxOccurs"), null, null);
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
          ;
        else
          throw exception;
      }

      this._domElement = el;
      this._parent = $parent;
      this._wxs$_schema = schema;
      this._references = null;
    },
    $isWXSGroup: true,
    static: {WXSGroup$: function(el, $parent, schema) {
        var t1 = new O.WXSGroup(null, null, null, null, 1, 1, null, null, null, null, null);
        t1.WXSGroup$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSImport: {
    "^": "WXSAnnotated;_namespace,_schemaLocation,_schemaInclu,_annotation",
    _inclusions$1: function(schema) {
      var completer;
      if (this._schemaLocation == null)
        return P._Future$immediate(null, null);
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      schema.newIncludedSchema$3(this._schemaLocation, this._namespace, schema).then$2$onError(new O.WXSImport__inclusions_closure(this, completer), new O.WXSImport__inclusions_closure0(completer));
      return completer.future;
    }
  },
  WXSImport__inclusions_closure: {
    "^": "Closure:43;this_0,completer_1",
    call$1: function(schema) {
      this.this_0._schemaInclu = schema;
      this.completer_1.complete$0(0);
    },
    $isFunction: true
  },
  WXSImport__inclusions_closure0: {
    "^": "Closure:31;completer_2",
    call$1: function(ex) {
      this.completer_2.completeError$1(ex);
    },
    $isFunction: true
  },
  WXSInclude: {
    "^": "WXSAnnotated;_schemaLocation,_schemaInclu,_annotation",
    _inclusions$1: function(schema) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      schema.newIncludedSchema$3(this._schemaLocation, null, schema).then$2$onError(new O.WXSInclude__inclusions_closure(this, completer), new O.WXSInclude__inclusions_closure0(completer));
      return completer.future;
    }
  },
  WXSInclude__inclusions_closure: {
    "^": "Closure:43;this_0,completer_1",
    call$1: function(schema) {
      this.this_0._schemaInclu = schema;
      this.completer_1.complete$0(0);
    },
    $isFunction: true
  },
  WXSInclude__inclusions_closure0: {
    "^": "Closure:31;completer_2",
    call$1: function(ex) {
      this.completer_2.completeError$1(ex);
    },
    $isFunction: true
  },
  WXSKey: {
    "^": "WXSKeybase;_selector,_fields,_wxs$_name,_annotation"
  },
  WXSKeybase: {
    "^": "WXSAnnotated;",
    _parse$1: function(el) {
      var n, t1, t2, t3;
      this._parseAnnotation$1(el);
      this._fields = H.setRuntimeTypeInfo([], [O.WXSField]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "selector")) {
            t2 = new O.WXSSelector(null, null);
            if (n.hasAttribute$1("xpath"))
              t2._xpath = t1.getAttribute$1(n, "xpath");
            this._selector = t2;
          } else if (J.$eq(t1.get$localName(n), "field")) {
            t2 = this._fields;
            t3 = new O.WXSField(null, null);
            if (n.hasAttribute$1("xpath"))
              t3._xpath = t1.getAttribute$1(n, "xpath");
            t2.push(t3);
          }
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = el.getAttribute$1(0, "name");
    }
  },
  WXSKeyref: {
    "^": "WXSKeybase;_refer,_selector,_fields,_wxs$_name,_annotation"
  },
  WXSList: {
    "^": "WXSAnnotated;_simpleType,_itemType,_domElement,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1, tns, wxsType;
      t1 = this._simpleType;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._itemType;
      if (t1 != null && this._simpleType == null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        wxsType = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._itemType), tns, null, redefine, "WXSType"), "$isWXSType");
        if (!!J.getInterceptor(wxsType).$isWXSSimpleType)
          this._simpleType = wxsType;
        else if (!J.$eq(this._domElement.namespaceURI, tns))
          this._itemType = null;
      }
    },
    validValue$1: function(value) {
      var items, t1, item, t2;
      if (this._simpleType == null && this._itemType == null)
        return false;
      if (value == null)
        return false;
      items = J.trim$0$s(value).split("\\s");
      for (t1 = new H.ListIterator(items, items.length, 0, null); t1.moveNext$0();) {
        item = t1._current;
        t2 = this._simpleType;
        if (t2 != null) {
          if (!t2.validValue$1(item))
            return false;
        } else if (O.WXSSimpleType_validateTypeValue(O.DaxeWXS__localValue(this._itemType), item) !== true)
          return false;
      }
      return true;
    },
    WXSList$2: function(el, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement && J.$eq(t1.get$localName(n), "simpleType")) {
          this._simpleType = O.WXSSimpleType$(H.interceptedTypeCast(n, "$isElement"), null, schema);
          break;
        }
      }
      if (el.hasAttribute$1("itemType"))
        this._itemType = el.getAttribute$1(0, "itemType");
      this._domElement = el;
    },
    static: {WXSList$: function(el, schema) {
        var t1 = new O.WXSList(null, null, null, null);
        t1.WXSList$2(el, schema);
        return t1;
      }}
  },
  WXSRedefine: {
    "^": "Object;_redefinables,_schemaLocation,_schemaInclu,_wxs$_schema",
    _inclusions$1: function(schema) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      schema.newIncludedSchema$3(this._schemaLocation, null, schema).then$2$onError(new O.WXSRedefine__inclusions_closure(this, completer), new O.WXSRedefine__inclusions_closure0(completer));
      return completer.future;
    },
    parentElements$0: function() {
      return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    getNamespace$0: function() {
      return this._wxs$_schema._targetNamespace;
    },
    WXSRedefine$2: function(el, schema) {
      var n, t1;
      this._redefinables = H.setRuntimeTypeInfo([], [O.WXSThing]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "simpleType"))
            this._redefinables.push(O.WXSSimpleType$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "complexType"))
            this._redefinables.push(O.WXSComplexType$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "group"))
            this._redefinables.push(O.WXSGroup$(n, this, schema));
          else if (J.$eq(t1.get$localName(n), "attributeGroup"))
            this._redefinables.push(O.WXSAttributeGroup$(n, this, schema));
      }
      if (el.hasAttribute$1("schemaLocation"))
        this._schemaLocation = el.getAttribute$1(0, "schemaLocation");
      this._wxs$_schema = schema;
    },
    $isWXSRedefine: true,
    static: {WXSRedefine$: function(el, schema) {
        var t1 = new O.WXSRedefine(null, null, null, null);
        t1.WXSRedefine$2(el, schema);
        return t1;
      }}
  },
  WXSRedefine__inclusions_closure: {
    "^": "Closure:43;this_0,completer_1",
    call$1: function(schema) {
      this.this_0._schemaInclu = schema;
      this.completer_1.complete$0(0);
    },
    $isFunction: true
  },
  WXSRedefine__inclusions_closure0: {
    "^": "Closure:31;completer_2",
    call$1: function(ex) {
      this.completer_2.completeError$1(ex);
    },
    $isFunction: true
  },
  WXSRestriction: {
    "^": "WXSAnnotated;_simpleType,_facets,_modele,_attrDecls,_base,_wxsBase,_domElement,_parent,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1, attrDecl, t2, tns;
      t1 = this._simpleType;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._modele;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          attrDecl.resolveReferences$1(schema);
        else if (!!t2.$isWXSAttributeGroup)
          attrDecl.resolveReferences$2(schema, redefine);
      }
      t1 = this._base;
      if (t1 != null) {
        tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(t1));
        this._wxsBase = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(this._base), tns, null, redefine, "WXSType"), "$isWXSType");
      }
    },
    allElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._modele;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.allElements$0());
      return liste;
    },
    subElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      t1 = this._modele;
      if (t1 != null)
        C.JSArray_methods.addAll$1(liste, t1.subElements$0());
      return liste;
    },
    parentElements$0: function() {
      var t1 = this._parent;
      if (!!J.getInterceptor(t1).$isWXSComplexContent)
        return t1._parent.parentElements$0();
      else
        return H.setRuntimeTypeInfo([], [O.WXSElement]);
    },
    regularExpression$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.regularExpression$0();
      return;
    },
    requiredChild$1: function(child) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.requiredChild$1(child);
      return;
    },
    multipleChildren$1: function(child) {
      var t1 = this._modele;
      if (t1 != null)
        return t1.multipleChildren$1(child);
      return;
    },
    possibleValues$0: function() {
      var t1, liste, facet;
      for (t1 = this._facets, t1 = new H.ListIterator(t1, t1.length, 0, null), liste = null; t1.moveNext$0();) {
        facet = t1._current;
        if (J.$eq(facet.getFacet$0(), "enumeration")) {
          if (liste == null) {
            liste = [];
            liste.$builtinTypeInfo = [P.String];
          }
          liste.push(facet._wxs$_value);
        }
      }
      return liste;
    },
    attributes$0: [function(_) {
      var liste, t1, attrDecl, t2, listeBase, aRetirer, attributRest, nomExt, prohibited, t3, attributBase;
      liste = H.setRuntimeTypeInfo([], [O.WXSAttribute]);
      for (t1 = this._attrDecls, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        attrDecl = t1._current;
        t2 = J.getInterceptor(attrDecl);
        if (!!t2.$isWXSAttribute)
          liste.push(attrDecl);
        else if (!!t2.$isWXSAttributeGroup)
          C.JSArray_methods.addAll$1(liste, t2.attributes$0(attrDecl));
      }
      t1 = this._wxsBase;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isWXSComplexType) {
        listeBase = t2.attributes$0(H.interceptedTypeCast(t1, "$isWXSComplexType"));
        aRetirer = H.setRuntimeTypeInfo([], [O.WXSAttribute]);
        for (t1 = new H.ListIterator(liste, liste.length, 0, null); t1.moveNext$0();) {
          attributRest = t1._current;
          nomExt = attributRest.getName$0();
          prohibited = J.$eq(attributRest.getUse$0(), "prohibited");
          for (t2 = new H.ListIterator(listeBase, listeBase.length, 0, null), t3 = J.getInterceptor(nomExt); t2.moveNext$0();) {
            attributBase = t2._current;
            if (t3.$eq(nomExt, attributBase.getName$0())) {
              if (prohibited)
                aRetirer.push(attributBase);
              else {
                t2 = H.Lists_indexOf(listeBase, attributBase, 0, listeBase.length);
                if (t2 >>> 0 !== t2 || t2 >= listeBase.length)
                  return H.ioore(listeBase, t2);
                listeBase[t2] = attributRest;
              }
              break;
            }
          }
        }
        for (t1 = new H.ListIterator(aRetirer, aRetirer.length, 0, null); t1.moveNext$0();)
          C.JSArray_methods.remove$1(listeBase, t1._current);
        return listeBase;
      }
      return liste;
    }, "call$0", "get$attributes", 0, 0, 42],
    validate$3: function(subElements, start, insertion) {
      var t1 = this._modele;
      if (t1 == null)
        return start;
      return t1.validate$3(subElements, start, insertion);
    },
    isOptionnal$0: function() {
      var t1 = this._modele;
      if (t1 != null)
        return t1.isOptionnal$0();
      return true;
    },
    validValue$1: function(value) {
      var t1, enumerationOrPattern, facet;
      t1 = this._wxsBase;
      if (t1 != null)
        if (t1.validValue$1(value) !== true)
          return false;
      for (t1 = this._facets, t1 = new H.ListIterator(t1, t1.length, 0, null), enumerationOrPattern = false; t1.moveNext$0();) {
        facet = t1._current;
        if (J.$eq(facet.getFacet$0(), "enumeration")) {
          if (facet.validValue$1(value) === true)
            return true;
          enumerationOrPattern = true;
        } else if (J.$eq(facet._facet, "pattern")) {
          if (facet.validValue$1(value) === true)
            return true;
          enumerationOrPattern = true;
        } else if (facet.validValue$1(value) !== true)
          return false;
      }
      if (enumerationOrPattern)
        return false;
      return true;
    },
    WXSRestriction$3: function(el, $parent, schema) {
      var n, t1, localName;
      this._parseAnnotation$1(el);
      this._facets = H.setRuntimeTypeInfo([], [O.WXSFacet]);
      this._attrDecls = H.setRuntimeTypeInfo([], [O.WXSThing]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement) {
          localName = t1.get$localName(n);
          t1 = J.getInterceptor(localName);
          if (t1.$eq(localName, "simpleType"))
            this._simpleType = O.WXSSimpleType$(n, this, schema);
          else if (t1.$eq(localName, "minExclusive"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "minInclusive"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "maxExclusive"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "maxInclusive"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "totalDigits"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "fractionDigits"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "length"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "minLength"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "maxLength"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "enumeration"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "pattern"))
            this._facets.push(O.WXSFacet$(n));
          else if (t1.$eq(localName, "group"))
            this._modele = O.WXSGroup$(n, this, schema);
          else if (t1.$eq(localName, "all"))
            this._modele = O.WXSAll$(n, this, schema);
          else if (t1.$eq(localName, "choice")) {
            t1 = new O.WXSChoice(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (t1.$eq(localName, "sequence")) {
            t1 = new O.WXSSequence(null, 1, 1, null, null);
            t1._parse$3(n, this, schema);
            this._modele = t1;
          } else if (t1.$eq(localName, "attribute"))
            this._attrDecls.push(O.WXSAttribute$(n, this, schema));
          else if (t1.$eq(localName, "attributeGroup"))
            this._attrDecls.push(O.WXSAttributeGroup$(n, this, schema));
        }
      }
      if (el.hasAttribute$1("base"))
        this._base = el.getAttribute$1(0, "base");
      this._domElement = el;
      this._parent = $parent;
    },
    $isWXSRestriction: true,
    static: {WXSRestriction$: function(el, $parent, schema) {
        var t1 = new O.WXSRestriction(null, null, null, null, null, null, null, null, null);
        t1.WXSRestriction$3(el, $parent, schema);
        return t1;
      }}
  },
  WXSSchema: {
    "^": "Object;_includes,_imports,_redefines,_simpleTypes,_complexTypes,_groups,_attributeGroups,_elements,_attributes,_targetNamespace,_attributeFormDefault,_elementFormDefault,_url,_jwxs,_includedSchemas,_parentSchema,_namespaceToPrefix",
    _inclusions$0: function() {
      var futures, t1;
      futures = H.setRuntimeTypeInfo([], [P.Future]);
      for (t1 = this._includes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        futures.push(t1._current._inclusions$1(this));
      for (t1 = this._imports, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        futures.push(t1._current._inclusions$1(this));
      for (t1 = this._redefines, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        futures.push(t1._current._inclusions$1(this));
      return P.Future_wait(futures, false);
    },
    getTopElements$0: function() {
      var t1 = this._elements;
      return t1.get$values(t1);
    },
    getURL$0: function() {
      return this._url;
    },
    newIncludedSchema$3: function(schemaLocation, importNamespace, parentSchema) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      this._jwxs._newIncludedSchema$4(this._url, schemaLocation, importNamespace, parentSchema).then$2$onError(new O.WXSSchema_newIncludedSchema_closure(this, completer), new O.WXSSchema_newIncludedSchema_closure0(completer));
      return completer.future;
    },
    _resolveReferences$0: function() {
      var t1, simpleType, complexType, group, attributeGroup;
      for (t1 = this._simpleTypes, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
        simpleType = t1._current;
        simpleType.resolveReferences$2(this, !!J.getInterceptor(simpleType.getParent$0()).$isWXSRedefine ? simpleType : null);
      }
      for (t1 = this._complexTypes, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
        complexType = t1._current;
        complexType.resolveReferences$2(this, !!J.getInterceptor(complexType.getParent$0()).$isWXSRedefine ? complexType : null);
      }
      for (t1 = this._groups, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
        group = t1._current;
        group.resolveReferences$2(this, !!J.getInterceptor(group.getParent$0()).$isWXSRedefine ? group : null);
      }
      for (t1 = this._attributeGroups, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();) {
        attributeGroup = t1._current;
        attributeGroup.resolveReferences$2(this, !!J.getInterceptor(attributeGroup.getParent$0()).$isWXSRedefine ? attributeGroup : null);
      }
      for (t1 = this._elements, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        t1._current.resolveReferences$2(this, null);
      for (t1 = this._attributes, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        t1._current.resolveReferences$1(this);
    },
    allElements$0: function() {
      var liste, t1;
      liste = H.setRuntimeTypeInfo([], [O.WXSElement]);
      for (t1 = this._complexTypes, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        C.JSArray_methods.addAll$1(liste, t1._current.allElements$0());
      for (t1 = this._groups, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        C.JSArray_methods.addAll$1(liste, t1._current.allElements$0());
      for (t1 = this._elements, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        C.JSArray_methods.addAll$1(liste, t1._current.allElements$0());
      return liste;
    },
    _resolveReference$5: function(localName, namespace, exclure, redefine, classe) {
      var t1, exclure2, thing, t2, t3, schemaInclu;
      if (localName == null)
        return;
      t1 = this._parentSchema;
      if (t1 != null)
        t1 = exclure == null || !exclure.contains$1(0, t1);
      else
        t1 = false;
      if (t1) {
        exclure2 = exclure == null ? P.HashSet_HashSet(null, null, null, O.WXSSchema) : exclure;
        exclure2.add$1(0, this);
        thing = this._parentSchema._resolveReference$5(localName, namespace, exclure2, redefine, classe);
        if (thing != null)
          return thing;
      } else
        exclure2 = null;
      t1 = namespace == null;
      if (!(t1 && this._targetNamespace == null))
        t1 = !t1 && J.$eq(namespace, this._targetNamespace);
      else
        t1 = true;
      if (t1) {
        if (classe === "WXSElement")
          thing = this._elements.$index(0, localName);
        else if (classe === "WXSType") {
          thing = this._complexTypes.$index(0, localName);
          if (thing != null && !J.$eq(thing, redefine))
            return thing;
          thing = this._simpleTypes.$index(0, localName);
        } else if (classe === "WXSGroup")
          thing = this._groups.$index(0, localName);
        else if (classe === "WXSAttributeGroup")
          thing = this._attributeGroups.$index(0, localName);
        else
          thing = classe === "WXSAttribute" ? this._attributes.$index(0, localName) : null;
        if (thing != null && !J.$eq(thing, redefine))
          return thing;
      }
      for (t1 = this._includedSchemas, t1 = new H.ListIterator(t1, t1.length, 0, null), t2 = exclure == null, t3 = !t2; t1.moveNext$0();) {
        schemaInclu = t1._current;
        if (!t3 || !exclure.contains$1(0, schemaInclu)) {
          if (exclure2 == null) {
            exclure2 = t2 ? P.HashSet_HashSet(null, null, null, O.WXSSchema) : exclure;
            exclure2.add$1(0, this);
          }
          thing = schemaInclu._resolveReference$5(localName, namespace, exclure2, redefine, classe);
          if (thing != null)
            return thing;
        }
      }
      return;
    },
    WXSSchema$4: function(el, url, jwxs, schemaParent) {
      var t1, n, t2, localName, t3, t4, redefine, redefinable, simpleType, complexType, group, attributeGroup, element, attribute, att, prefixe;
      this._url = url;
      this._jwxs = jwxs;
      this._parentSchema = schemaParent;
      this._includes = H.setRuntimeTypeInfo([], [O.WXSInclude]);
      this._imports = H.setRuntimeTypeInfo([], [O.WXSImport]);
      this._redefines = H.setRuntimeTypeInfo([], [O.WXSRedefine]);
      this._simpleTypes = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.WXSSimpleType);
      this._complexTypes = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.WXSComplexType);
      this._groups = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.WXSGroup);
      this._attributeGroups = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.WXSAttributeGroup);
      this._elements = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.WXSElement);
      this._attributes = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, O.WXSAttribute);
      this._includedSchemas = H.setRuntimeTypeInfo([], [O.WXSSchema]);
      for (t1 = J.getInterceptor$x(el), n = t1.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t2 = J.getInterceptor(n);
        if (!!t2.$isElement) {
          localName = t2.get$localName(n);
          t3 = J.getInterceptor(localName);
          if (t3.$eq(localName, "include")) {
            t3 = this._includes;
            t4 = new O.WXSInclude(null, null, null);
            t4._parseAnnotation$1(n);
            if (n.hasAttribute$1("schemaLocation"))
              t4._schemaLocation = t2.getAttribute$1(n, "schemaLocation");
            t3.push(t4);
          } else if (t3.$eq(localName, "import")) {
            t3 = this._imports;
            t4 = new O.WXSImport(null, null, null, null);
            if (n.hasAttribute$1("namespace"))
              t4._namespace = t2.getAttribute$1(n, "namespace");
            if (n.hasAttribute$1("schemaLocation"))
              t4._schemaLocation = t2.getAttribute$1(n, "schemaLocation");
            t3.push(t4);
          } else if (t3.$eq(localName, "redefine")) {
            redefine = O.WXSRedefine$(n, this);
            this._redefines.push(redefine);
            for (t2 = redefine._redefinables, t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
              redefinable = t2._current;
              t3 = J.getInterceptor(redefinable);
              if (!!t3.$isWXSSimpleType)
                this._simpleTypes.$indexSet(0, redefinable._wxs$_name, redefinable);
              else if (!!t3.$isWXSComplexType)
                this._complexTypes.$indexSet(0, redefinable._wxs$_name, redefinable);
              else if (!!t3.$isWXSGroup)
                this._groups.$indexSet(0, redefinable.getName$0(), redefinable);
              else if (!!t3.$isWXSAttributeGroup)
                this._attributeGroups.$indexSet(0, redefinable.getName$0(), redefinable);
            }
          } else if (t3.$eq(localName, "simpleType")) {
            simpleType = O.WXSSimpleType$(n, null, this);
            this._simpleTypes.$indexSet(0, simpleType._wxs$_name, simpleType);
          } else if (t3.$eq(localName, "complexType")) {
            complexType = O.WXSComplexType$(n, null, this);
            this._complexTypes.$indexSet(0, complexType._wxs$_name, complexType);
          } else if (t3.$eq(localName, "group")) {
            group = O.WXSGroup$(n, null, this);
            this._groups.$indexSet(0, group.getName$0(), group);
          } else if (t3.$eq(localName, "attributeGroup")) {
            attributeGroup = O.WXSAttributeGroup$(n, null, this);
            this._attributeGroups.$indexSet(0, attributeGroup.getName$0(), attributeGroup);
          } else if (t3.$eq(localName, "element")) {
            element = O.WXSElement$(n, null, this);
            this._elements.$indexSet(0, element.getName$0(), element);
          } else if (t3.$eq(localName, "attribute")) {
            attribute = O.WXSAttribute$(n, null, this);
            this._attributes.$indexSet(0, attribute.getName$0(), attribute);
          }
        }
      }
      if (el.hasAttribute$1("targetNamespace")) {
        t2 = t1.getAttribute$1(el, "targetNamespace");
        this._targetNamespace = t2;
        if (J.$eq(t2, ""))
          this._targetNamespace = null;
      }
      if (el.hasAttribute$1("attributeFormDefault"))
        this._attributeFormDefault = t1.getAttribute$1(el, "attributeFormDefault");
      if (el.hasAttribute$1("elementFormDefault"))
        this._elementFormDefault = t1.getAttribute$1(el, "elementFormDefault");
      this._namespaceToPrefix = P.HashMap_HashMap(null, null, null, P.String, P.String);
      t1 = el.attributes;
      if (t1 != null)
        for (t1 = J.get$iterator$ax(J.get$values$x(t1)); t1.moveNext$0();) {
          att = t1.get$current();
          t2 = J.getInterceptor$x(att);
          if (J.startsWith$1$s(t2.get$name(att), "xmlns:")) {
            prefixe = J.substring$1$s(t2.get$name(att), 6);
            this._namespaceToPrefix.$indexSet(0, t2.get$value(att), prefixe);
          }
        }
    },
    static: {WXSSchema$: function(el, url, jwxs, schemaParent) {
        var t1 = new O.WXSSchema(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.WXSSchema$4(el, url, jwxs, schemaParent);
        return t1;
      }}
  },
  WXSSchema_newIncludedSchema_closure: {
    "^": "Closure:43;this_0,completer_1",
    call$1: function(schemaInclu) {
      if (schemaInclu != null && !C.JSArray_methods.contains$1(this.this_0._includedSchemas, schemaInclu))
        this.this_0._includedSchemas.push(schemaInclu);
      this.completer_1.complete$1(0, schemaInclu);
    },
    $isFunction: true
  },
  WXSSchema_newIncludedSchema_closure0: {
    "^": "Closure:31;completer_2",
    call$1: function(ex) {
      this.completer_2.completeError$1(ex);
    },
    $isFunction: true
  },
  WXSSelector: {
    "^": "WXSAnnotated;_xpath,_annotation"
  },
  WXSSequence: {
    "^": "WXSExplicitGroup;_nestedParticles,_minOccurs,_maxOccurs,_parent,_annotation",
    validate$3: function(subElements, start, insertion) {
      var t1, i, nb, t2, pos, nestedParticle, pos2;
      for (t1 = !insertion, i = start, nb = 0; t2 = subElements.length, i < t2; i = pos) {
        t2 = this._maxOccurs;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (nb >= t2)
          return i;
        for (t2 = this._nestedParticles, t2 = new H.ListIterator(t2, t2.length, 0, null), pos = i; t2.moveNext$0(); pos = pos2) {
          nestedParticle = t2._current;
          pos2 = nestedParticle.validate$3(subElements, pos, insertion);
          if (pos2 === pos)
            if (t1 && !nestedParticle.isOptionnal$0()) {
              t1 = this._minOccurs;
              if (typeof t1 !== "number")
                return H.iae(t1);
              if (nb < t1)
                return start;
              return i;
            }
        }
        if (pos === i)
          return i;
        ++nb;
      }
      if (t1) {
        t1 = this._minOccurs;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = nb < t1;
      } else
        t1 = false;
      if (t1)
        return start;
      return t2;
    },
    isOptionnal$0: function() {
      if (J.$eq(this._minOccurs, 0))
        return true;
      for (var t1 = this._nestedParticles, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        if (!t1._current.isOptionnal$0())
          return false;
      return true;
    },
    $isWXSSequence: true
  },
  WXSSimpleContent: {
    "^": "WXSAnnotated;_restriction,_extension,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1 = this._restriction;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      else {
        t1 = this._extension;
        if (t1 != null)
          t1.resolveReferences$2(schema, redefine);
      }
    },
    possibleValues$0: function() {
      var t1 = this._restriction;
      if (t1 != null)
        return t1.possibleValues$0();
      else {
        t1 = this._extension;
        if (t1 != null)
          return t1.possibleValues$0();
      }
      return;
    },
    attributes$0: [function(_) {
      var t1 = this._restriction;
      if (t1 != null)
        return t1.attributes$0(0);
      else {
        t1 = this._extension;
        if (t1 != null)
          return t1.attributes$0(0);
      }
      return H.setRuntimeTypeInfo([], [O.WXSAttribute]);
    }, "call$0", "get$attributes", 0, 0, 42],
    validValue$1: function(value) {
      var t1 = this._restriction;
      if (t1 != null)
        return t1.validValue$1(value);
      t1 = this._extension;
      if (t1 != null)
        return t1.validValue$1(value);
      return false;
    },
    WXSSimpleContent$2: function(el, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "restriction"))
            this._restriction = O.WXSRestriction$(n, null, schema);
          else if (J.$eq(t1.get$localName(n), "extension"))
            this._extension = O.WXSExtension$(n, null, schema);
      }
    },
    static: {WXSSimpleContent$: function(el, schema) {
        var t1 = new O.WXSSimpleContent(null, null, null);
        t1.WXSSimpleContent$2(el, schema);
        return t1;
      }}
  },
  WXSSimpleType: {
    "^": "WXSAnnotated;_restriction,_list,_union,_wxs$_name,_parent,_wxs$_schema,_annotation",
    getName$0: function() {
      return this._wxs$_name;
    },
    getNamespace$0: function() {
      return this._wxs$_schema._targetNamespace;
    },
    getParent$0: function() {
      return this._parent;
    },
    resolveReferences$2: function(schema, redefine) {
      var t1 = this._restriction;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._list;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
      t1 = this._union;
      if (t1 != null)
        t1.resolveReferences$2(schema, redefine);
    },
    possibleValues$0: function() {
      var t1 = this._restriction;
      if (t1 != null)
        return t1.possibleValues$0();
      t1 = this._union;
      if (t1 != null)
        return t1.possibleValues$0();
      return;
    },
    validValue$1: function(value) {
      var t1 = this._restriction;
      if (t1 != null)
        return t1.validValue$1(value);
      t1 = this._list;
      if (t1 != null)
        return t1.validValue$1(value);
      t1 = this._union;
      if (t1 != null)
        return t1.validValue$1(value);
      return false;
    },
    WXSSimpleType$3: function(el, $parent, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement)
          if (J.$eq(t1.get$localName(n), "restriction"))
            this._restriction = O.WXSRestriction$(n, null, schema);
          else if (J.$eq(t1.get$localName(n), "list"))
            this._list = O.WXSList$(n, schema);
          else if (J.$eq(t1.get$localName(n), "union"))
            this._union = O.WXSUnion$(n, schema);
      }
      if (el.hasAttribute$1("name"))
        this._wxs$_name = el.getAttribute$1(0, "name");
      this._parent = $parent;
      this._wxs$_schema = schema;
    },
    $isWXSSimpleType: true,
    $isWXSType: true,
    static: {WXSSimpleType$: function(el, $parent, schema) {
        var t1 = new O.WXSSimpleType(null, null, null, null, null, null, null);
        t1.WXSSimpleType$3(el, $parent, schema);
        return t1;
      }, WXSSimpleType_validateTypeValue: function(type, value) {
        var big, max, min, ex, big0, max0, ex0, v2, val, ex1, val0, ex2, v20, val1, ex3, val2, ex4, v21, val3, ex5, val4, ex6, f, t1, t2, exception, line;
        if (type === "string")
          return true;
        else if (type === "normalizedString") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^\\t\\r\\n]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "token") {
          if (J.indexOf$1$asx(value, "\n") !== -1 || J.indexOf$1$asx(value, "\r") !== -1 || J.indexOf$1$asx(value, "\t") !== -1 || J.indexOf$1$asx(value, "  ") !== -1)
            return false;
          return !J.startsWith$1$s(value, " ") && !J.endsWith$1$s(value, " ");
        } else if (type === "base64Binary") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(([a-zA-Z0-9+/=]\\s?){4})*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "hexBinary") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(([0-9a-fA-F]){2})*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "integer") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[+\\-]?\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "positiveInteger") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^\\+?0*[1-9]\\d*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "negativeInteger") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^-0*[1-9]\\d*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "nonNegativeInteger") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(-0+)|(\\+?\\d+)$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "nonPositiveInteger") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(\\+?0+)|(-\\d+)$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "long") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[+\\-]?\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          try {
            big = H.Primitives_parseInt(value, null, null);
            max = H.Primitives_parseInt("9223372036854775807", null, null);
            min = H.Primitives_parseInt("-9223372036854775808", null, null);
            if (J.compareTo$1$ns(big, max) > 0)
              return false;
            if (J.compareTo$1$ns(big, min) < 0)
              return false;
            return true;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "unsignedLong") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          try {
            big0 = H.Primitives_parseInt(value, null, null);
            max0 = H.Primitives_parseInt("18446744073709551615", null, null);
            t1 = J.compareTo$1$ns(big0, max0);
            return t1 <= 0;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex0 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex0);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "int") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[+\\-]?\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          v2 = value;
          if (J.startsWith$1$s(v2, "+"))
            v2 = J.substring$1$s(v2, 1);
          try {
            val = H.Primitives_parseInt(v2, null, null);
            t1 = J.$le$n(val, 2147483647) && J.$ge$n(val, -2147483648);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex1 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex1);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "unsignedInt") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          try {
            val0 = H.Primitives_parseInt(value, null, null);
            t1 = J.$le$n(val0, 4294967295) && J.$ge$n(val0, 0);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex2 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex2);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "short") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[+\\-]?\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          v20 = value;
          if (J.startsWith$1$s(v20, "+"))
            v20 = J.substring$1$s(v20, 1);
          try {
            val1 = H.Primitives_parseInt(v20, null, null);
            t1 = J.$le$n(val1, 32767) && J.$ge$n(val1, -32768);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex3 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex3);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "unsignedShort") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          try {
            val2 = H.Primitives_parseInt(value, null, null);
            t1 = J.$le$n(val2, 65535) && J.$ge$n(val2, 0);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex4 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex4);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "byte") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[+\\-]?\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          v21 = value;
          if (J.startsWith$1$s(v21, "+"))
            v21 = J.substring$1$s(v21, 1);
          try {
            val3 = H.Primitives_parseInt(v21, null, null);
            t1 = J.$le$n(val3, 127) && J.$ge$n(val3, -128);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex5 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex5);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "unsignedByte") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^\\d+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          try {
            val4 = H.Primitives_parseInt(value, null, null);
            t1 = J.$le$n(val4, 255) && J.$ge$n(val4, 0);
            return t1;
          } catch (exception) {
            t1 = H.unwrapException(exception);
            if (!!J.getInterceptor(t1).$isFormatException) {
              ex6 = t1;
              line = "validerValeur(String, String) - FormatException " + H.S(ex6);
              H.printString(line);
              return false;
            } else
              throw exception;
          }

        } else if (type === "decimal") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[+\\-]?\\d+\\.?\\d*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "float") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(-?INF)|(NaN)|([+\\-]?\\d+\\.?\\d*([eE][+\\-]?\\d{1,3})?)$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          if (J.$eq(value, "INF") || J.$eq(value, "-INF"))
            return true;
          try {
            f = H.Primitives_parseDouble(value, null);
            t1 = J.abs$0$n(f);
            if (typeof t1 !== "number")
              H.throwExpression(P.ArgumentError$(t1));
            if (Math.log(t1) / 0.6931471805599453 > 127)
              return false;
            t1 = J.abs$0$n(f);
            if (typeof t1 !== "number")
              H.throwExpression(P.ArgumentError$(t1));
            if (Math.log(t1) / 0.6931471805599453 < -126)
              return false;
            return true;
          } catch (exception) {
            if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
              return false;
            else
              throw exception;
          }

        } else if (type === "double") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(-?INF)|(NaN)|([+\\-]?\\d+\\.?\\d*([eE][+\\-]?\\d{1,3})?)$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          if (!t2.test(t1))
            return false;
          if (J.$eq(value, "INF") || J.$eq(value, "-INF"))
            return true;
          try {
            H.Primitives_parseDouble(value, null);
            return true;
          } catch (exception) {
            if (!!J.getInterceptor(H.unwrapException(exception)).$isFormatException)
              return false;
            else
              throw exception;
          }

        } else if (type === "boolean") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^(true)|(false)|1|0$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "duration") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^-?P(\\d{1,4}Y)?(\\d{1,2}M)?(\\d{1,2}D)?(T(\\d{1,2}H)?(\\d{1,2}M)?(\\d{1,2}(\\.\\d+)?S)?)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "dateTime") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^-?\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(\\.\\d+)?(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "date") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^-?\\d{4}-[01]\\d-[0-3]\\d(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "time") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[0-2]\\d:[0-5]\\d:[0-5]\\d(\\.\\d+)?(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "gYear") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^-?\\d{4}(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "gYearMonth") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^-?\\d{4}-[01]\\d(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "gMonth") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^--[01]\\d(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "gMonthDay") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^--[01]\\d-[0-3]\\d(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "gDay") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^---[0-3]\\d(([+\\-][01]\\d:\\d{2})|Z)?$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "Name") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s][^<>&#!/?'\",\\s]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "QName") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s][^<>&#!/?'\",\\s]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "NCName") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s:][^<>&#!/?'\",:\\s]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "anyURI")
          return true;
        else if (type === "language") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "ID") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s:][^<>&#!/?'\",:\\s]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "IDREF") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s:][^<>&#!/?'\",:\\s]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "IDREFS") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s:][^<>&#!/?'\",:]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "ENTITY") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s:][^<>&#!/?'\",:\\s]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "ENTITIES") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",0-9.\\-\\s:][^<>&#!/?'\",:]*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "NOTATION") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^0-9.\\-\\s][^\\s]*(\\s[^0-9.\\-\\s][^\\s]*)*$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "NMTOKEN") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",\\s]+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else if (type === "NMTOKENS") {
          t1 = value;
          t2 = H.JSSyntaxRegExp_makeNative("^[^<>&#!/?'\",]+$", false, true, false);
          if (typeof t1 !== "string")
            H.throwExpression(P.ArgumentError$(t1));
          return t2.test(t1);
        } else
          return true;
      }, WXSSimpleType__verifExpr: function(value, regexp) {
        return H.JSSyntaxRegExp_makeNative("^" + H.S(regexp) + "$", false, true, false).test(H.checkString(value));
      }}
  },
  WXSThing: {
    "^": "Object;"
  },
  WXSUnion: {
    "^": "WXSAnnotated;_simpleTypes,_memberTypes,_domElement,_wxsMemberTypes,_annotation",
    resolveReferences$2: function(schema, redefine) {
      var t1, i, type, tns, wxsType;
      for (t1 = this._simpleTypes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1._current.resolveReferences$2(schema, redefine);
      t1 = this._memberTypes;
      if (t1 != null) {
        this._wxsMemberTypes = H.setRuntimeTypeInfo(Array(t1.length), [O.WXSSimpleType]);
        for (i = 0; t1 = this._memberTypes, i < t1.length; ++i) {
          type = t1[i];
          tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(type));
          wxsType = H.interceptedTypeCast(schema._resolveReference$5(O.DaxeWXS__localValue(type), tns, null, redefine, "WXSType"), "$isWXSType");
          t1 = this._wxsMemberTypes;
          if (!!J.getInterceptor(wxsType).$isWXSSimpleType) {
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i] = wxsType;
          } else {
            if (i >= t1.length)
              return H.ioore(t1, i);
            t1[i] = null;
            if (!J.$eq(this._domElement.namespaceURI, tns)) {
              t1 = this._memberTypes;
              if (i >= t1.length)
                return H.ioore(t1, i);
              t1[i] = null;
            }
          }
        }
      }
    },
    possibleValues$0: function() {
      var liste, i, t1, t2, lv, type, tns, listest;
      liste = H.setRuntimeTypeInfo([], [P.String]);
      if (this._memberTypes != null)
        for (i = 0; t1 = this._memberTypes, i < t1.length; ++i) {
          t2 = this._wxsMemberTypes;
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2 = t2[i];
          if (t2 != null) {
            lv = t2.possibleValues$0();
            if (lv == null)
              return;
            C.JSArray_methods.addAll$1(liste, lv);
          } else {
            type = t1[i];
            tns = this._domElement.lookupNamespaceURI$1(O.DaxeWXS__namePrefix(type));
            if (J.$eq(this._domElement.namespaceURI, tns)) {
              lv = O.DaxeWXS__booleanValues(type, this._domElement);
              if (lv == null)
                return;
              C.JSArray_methods.addAll$1(liste, lv);
            }
          }
        }
      for (t1 = this._simpleTypes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        listest = t1._current.possibleValues$0();
        if (listest == null)
          return;
        C.JSArray_methods.addAll$1(liste, listest);
      }
      if (liste.length === 0)
        return;
      return liste;
    },
    validValue$1: function(value) {
      var i, t1, t2;
      if (this._memberTypes != null)
        for (i = 0; t1 = this._memberTypes, i < t1.length; ++i) {
          t2 = this._wxsMemberTypes;
          if (i >= t2.length)
            return H.ioore(t2, i);
          t2 = t2[i];
          if (t2 != null) {
            if (t2.validValue$1(value))
              return true;
          } else {
            t1 = t1[i];
            if (t1 != null)
              if (O.WXSSimpleType_validateTypeValue(O.DaxeWXS__localValue(t1), value) === true)
                return true;
          }
        }
      for (t1 = this._simpleTypes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        if (t1._current.validValue$1(value) === true)
          return true;
      return false;
    },
    WXSUnion$2: function(el, schema) {
      var n, t1;
      this._parseAnnotation$1(el);
      this._simpleTypes = H.setRuntimeTypeInfo([], [O.WXSSimpleType]);
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling()) {
        t1 = J.getInterceptor(n);
        if (!!t1.$isElement && J.$eq(t1.get$localName(n), "simpleType"))
          this._simpleTypes.push(O.WXSSimpleType$(H.interceptedTypeCast(n, "$isElement"), null, schema));
      }
      if (el.hasAttribute$1("memberTypes"))
        this._memberTypes = J.split$1$s(el.getAttribute$1(0, "memberTypes"), "\\s");
      this._domElement = el;
      this._wxsMemberTypes = null;
    },
    static: {WXSUnion$: function(el, schema) {
        var t1 = new O.WXSUnion(null, null, null, null, null);
        t1.WXSUnion$2(el, schema);
        return t1;
      }}
  },
  WXSUnique: {
    "^": "WXSKeybase;_selector,_fields,_wxs$_name,_annotation"
  }
}],
["xmldom", "xmldom/xmldom.dart", , Z, {
  "^": "",
  NodeImpl__escape: function(s) {
    return J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(J.replaceAll$2$s(s, "&", "&amp;"), "\"", "&quot;"), "<", "&lt;"), ">", "&gt;");
  },
  Attr: {
    "^": "Node;",
    $isAttr: true
  },
  AttrImpl: {
    "^": "NodeImpl;specified,ownerElement?,isId,nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    get$name: function(_) {
      return this.nodeName;
    },
    get$value: function(_) {
      return this.nodeValue;
    },
    set$value: function(_, value) {
      this.nodeValue = value;
    },
    toString$0: function(_) {
      return H.S(this.nodeName) + "=\"" + H.S(Z.NodeImpl__escape(this.nodeValue)) + "\"";
    },
    AttrImpl$NS$3: function(doc, namespaceURI, qualifiedName) {
      var ind;
      this.specified = true;
      this.ownerElement = null;
      this.isId = false;
      this.nodeName = qualifiedName;
      this.nodeValue = null;
      this.nodeType = 2;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = namespaceURI;
      ind = J.indexOf$1$asx(qualifiedName, ":");
      if (ind !== -1) {
        this.prefix = J.substring$2$s(this.nodeName, 0, ind);
        this.localName = J.substring$1$s(this.nodeName, ind + 1);
      } else {
        this.prefix = null;
        this.localName = this.nodeName;
      }
    },
    $isAttr: true,
    $isNode: true,
    static: {AttrImpl$NS: function(doc, namespaceURI, qualifiedName) {
        var t1 = new Z.AttrImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.AttrImpl$NS$3(doc, namespaceURI, qualifiedName);
        return t1;
      }}
  },
  CDATASectionImpl: {
    "^": "NodeImpl;nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    toString$0: function(_) {
      var value = this.nodeValue;
      return "<![CDATA[" + H.S(value == null ? "" : value) + "]]>";
    },
    CDATASectionImpl$2: function(doc, data) {
      this.nodeName = "#cdata-section";
      this.nodeValue = data;
      this.nodeType = 4;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isCDATASection: true,
    $isNode: true,
    static: {CDATASectionImpl$: function(doc, data) {
        var t1 = new Z.CDATASectionImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.CDATASectionImpl$2(doc, data);
        return t1;
      }}
  },
  CommentImpl: {
    "^": "NodeImpl;nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    toString$0: function(_) {
      return "<!--" + H.S(this.nodeValue) + "-->";
    },
    CommentImpl$2: function(doc, data) {
      this.nodeName = "#comment";
      this.nodeValue = data;
      this.nodeType = 8;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isComment: true,
    $isNode: true,
    static: {CommentImpl$: function(doc, data) {
        var t1 = new Z.CommentImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.CommentImpl$2(doc, data);
        return t1;
      }}
  },
  Document: {
    "^": "Node;",
    $isDocument: true
  },
  DocumentImpl: {
    "^": "NodeImpl;implementation,documentElement>,inputEncoding,xmlEncoding@,xmlStandalone,xmlVersion<,documentURI,doctype,_idToElement,nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    createElement$1: function(_, tagName) {
      return Z.ElementImpl$(this, tagName);
    },
    toString$0: function(_) {
      var sb, t1, str;
      sb = P.StringBuffer$("");
      sb.write$1("<?xml");
      t1 = this.xmlVersion;
      if (t1 != null)
        sb.write$1(" version=\"" + H.S(t1) + "\"");
      t1 = this.xmlEncoding;
      if (t1 != null)
        sb.write$1(" encoding=\"" + H.S(t1) + "\"");
      sb.write$1("?>");
      sb.write$1("\n");
      t1 = this.doctype;
      if (t1 != null)
        sb.write$1(J.toString$0(t1));
      for (t1 = this.childNodes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        str = J.toString$0(t1._current);
        sb._contents += typeof str === "string" ? str : H.S(str);
      }
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    DocumentImpl$4: function(implementation, namespaceURI, qualifiedName, doctype) {
      this.implementation = implementation;
      this.inputEncoding = null;
      this.xmlEncoding = "UTF-8";
      this.xmlStandalone = false;
      this.xmlVersion = "1.0";
      this.documentURI = null;
      this.doctype = doctype;
      this._idToElement = P.HashMap_HashMap(null, null, null, P.String, Z.Element);
      this.nodeName = "#document";
      this.nodeValue = null;
      this.nodeType = 9;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = null;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isDocument: true,
    $isNode: true,
    static: {DocumentImpl$: function(implementation, namespaceURI, qualifiedName, doctype) {
        var t1 = new Z.DocumentImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.DocumentImpl$4(implementation, namespaceURI, qualifiedName, doctype);
        return t1;
      }}
  },
  DocumentTypeImpl: {
    "^": "NodeImpl;name>,publicId,systemId,nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    toString$0: function(_) {
      var t1 = this.publicId == null;
      if (t1 && this.systemId != null)
        return "<!DOCTYPE " + H.S(this.name) + " SYSTEM \"" + H.S(this.systemId) + "\">";
      t1 = !t1;
      if (t1 && this.systemId != null)
        return "<!DOCTYPE " + H.S(this.name) + " PUBLIC \"" + H.S(this.publicId) + "\" \"" + H.S(this.systemId) + "\">";
      if (t1)
        return "<!DOCTYPE " + H.S(this.name) + " PUBLIC \"" + H.S(this.publicId) + "\">";
      return "<!DOCTYPE " + H.S(this.name) + ">";
    },
    DocumentTypeImpl$3: function(qualifiedName, publicId, systemId) {
      this.name = qualifiedName;
      this.publicId = publicId;
      this.systemId = systemId;
      this.nodeName = qualifiedName;
      this.nodeValue = null;
      this.nodeType = 10;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = null;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isDocumentType: true,
    $isNode: true
  },
  DOMException: {
    "^": "Object;message>,errorCode>",
    toString$0: function(_) {
      var msg, t1;
      msg = "DOMException" + (": " + this.message);
      t1 = this.errorCode;
      return t1 != null ? msg + (": " + H.S(t1)) : msg;
    },
    $isDOMException: true,
    $isException: true,
    static: {DOMException$: function(message, errorCode) {
        return new Z.DOMException(message, errorCode);
      }}
  },
  DOMImplementationImpl: {
    "^": "Object;"
  },
  DOMParser: {
    "^": "Object;",
    parseFromURL$2$disableCache: function(url, disableCache) {
      var t1, t2, completer, request, param, t3;
      t1 = {};
      t1.url_0 = url;
      t2 = Z.Document;
      completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
      request = new XMLHttpRequest();
      if (disableCache)
        if (J.contains$1$asx(t1.url_0, ".php?") !== true) {
          param = "random_workaround=" + H.S(C.C__JSRandom.nextDouble$0());
          t2 = J.contains$1$asx(t1.url_0, "?");
          t3 = t1.url_0;
          if (t2 === true)
            t1.url_0 = H.S(t3) + "&" + param;
          else
            t1.url_0 = H.S(t3) + "?" + param;
        }
      C.HttpRequest_methods.open$2(request, "GET", t1.url_0);
      t2 = H.setRuntimeTypeInfo(new W._EventStream(request, "load", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.DOMParser_parseFromURL_closure(t1, this, completer, request)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t2 = H.setRuntimeTypeInfo(new W._EventStream(request, "error", false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._target, t2._eventType, W._wrapZone(new Z.DOMParser_parseFromURL_closure0(t1, completer)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      request.send();
      return completer.future;
    },
    parseFromURL$1: function(url) {
      return this.parseFromURL$2$disableCache(url, true);
    },
    parseFromString$1: function(s) {
      var parser = new Z.XMLParser(null, null, null);
      parser._initRules$0();
      return parser.parseString$1(s);
    }
  },
  DOMParser_parseFromURL_closure: {
    "^": "Closure:8;box_0,this_1,completer_2,request_3",
    call$1: function($event) {
      var xdoc, ex, t1, exception;
      t1 = this.request_3;
      if (t1.status !== 200) {
        this.completer_2.completeError$1(new Z.DOMException("Error reading " + H.S(this.box_0.url_0), t1.status));
        return;
      }
      xdoc = null;
      t1 = t1.responseText;
      if (t1 == null) {
        this.completer_2.completeError$1(new Z.DOMException("Error reading " + H.S(this.box_0.url_0), null));
        return;
      }
      try {
        xdoc = this.this_1.parseFromString$1(t1);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        if (!!J.getInterceptor(t1).$isDOMException) {
          ex = t1;
          this.completer_2.completeError$1(new Z.DOMException("Error reading " + H.S(this.box_0.url_0) + ": " + J.get$message$x(ex), null));
          return;
        } else
          throw exception;
      }

      this.completer_2.complete$1(0, xdoc);
    },
    $isFunction: true
  },
  DOMParser_parseFromURL_closure0: {
    "^": "Closure:8;box_0,completer_4",
    call$1: function($event) {
      this.completer_4.completeError$1(new Z.DOMException("Error reading " + H.S(this.box_0.url_0), null));
    },
    $isFunction: true
  },
  Element: {
    "^": "Node;",
    $isElement: true
  },
  ElementImpl: {
    "^": "NodeImpl;tagName,nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    getAttribute$1: function(_, $name) {
      var t1, att, v;
      t1 = this.attributes;
      if (t1 == null)
        return "";
      att = J.$index$asx(t1, $name);
      if (att == null)
        return "";
      v = J.get$nodeValue$x(att);
      if (v == null)
        return "";
      return v;
    },
    setAttributeNS$3: function(_, namespaceURI, qualifiedName, value) {
      var t1, ind, attPrefix, attLocalName, att;
      if (this.attributes == null)
        this.attributes = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Z.Attr);
      t1 = J.getInterceptor$asx(qualifiedName);
      ind = t1.indexOf$1(qualifiedName, ":");
      if (ind !== -1) {
        attPrefix = t1.substring$2(qualifiedName, 0, ind);
        attLocalName = C.JSString_methods.substring$1(qualifiedName, ind + 1);
      } else {
        attLocalName = qualifiedName;
        attPrefix = null;
      }
      att = this.getAttributeNodeNS$2(namespaceURI, attLocalName);
      if (att != null) {
        att.set$prefix(attPrefix);
        att.set$nodeValue(0, value);
        return;
      }
      att = Z.AttrImpl$NS(this.ownerDocument, namespaceURI, qualifiedName);
      att.parentNode = this;
      att.ownerElement = this;
      att.nodeValue = value;
      J.$indexSet$ax(this.attributes, qualifiedName, att);
    },
    getAttributeNodeNS$2: function(namespaceURI, localName) {
      var t1, att;
      t1 = this.attributes;
      if (t1 == null)
        return;
      for (t1 = J.get$iterator$ax(J.get$values$x(t1)); t1.moveNext$0();) {
        att = t1.get$current();
        if (J.$eq(att.get$namespaceURI(), namespaceURI) && J.$eq(att.get$localName(att), localName))
          return att;
      }
      return;
    },
    hasAttribute$1: function($name) {
      var t1 = this.attributes;
      if (t1 == null)
        return false;
      return J.$index$asx(t1, $name) != null;
    },
    toString$0: function(_) {
      var sb, t1, att, str;
      sb = P.StringBuffer$("");
      sb.write$1("<" + H.S(this.tagName));
      t1 = this.attributes;
      if (t1 != null)
        for (t1 = J.get$iterator$ax(J.get$values$x(t1)); t1.moveNext$0();) {
          att = t1.get$current();
          sb._contents += " ";
          str = J.toString$0(att);
          sb._contents += typeof str === "string" ? str : H.S(str);
        }
      t1 = this.childNodes;
      if (t1 != null && t1.length > 0) {
        sb.write$1(">");
        for (t1 = this.childNodes, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          str = J.toString$0(t1._current);
          sb._contents += typeof str === "string" ? str : H.S(str);
        }
        sb.write$1("</" + H.S(this.tagName) + ">");
      } else
        sb.write$1("/>");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ElementImpl$2: function(doc, tagName) {
      this.tagName = tagName;
      this.nodeName = tagName;
      this.nodeValue = null;
      this.nodeType = 1;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    ElementImpl$NS$3: function(doc, namespaceURI, qualifiedName) {
      var t1, ind;
      this.tagName = qualifiedName;
      this.nodeName = qualifiedName;
      this.nodeValue = null;
      this.nodeType = 1;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = namespaceURI;
      t1 = J.getInterceptor$asx(qualifiedName);
      ind = t1.indexOf$1(qualifiedName, ":");
      if (ind !== -1) {
        this.prefix = t1.substring$2(qualifiedName, 0, ind);
        this.localName = C.JSString_methods.substring$1(qualifiedName, ind + 1);
      } else {
        this.prefix = null;
        this.localName = qualifiedName;
      }
    },
    $isElementImpl: true,
    $isElement: true,
    $isNode: true,
    static: {ElementImpl$: function(doc, tagName) {
        var t1 = new Z.ElementImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.ElementImpl$2(doc, tagName);
        return t1;
      }, ElementImpl$NS: function(doc, namespaceURI, qualifiedName) {
        var t1 = new Z.ElementImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.ElementImpl$NS$3(doc, namespaceURI, qualifiedName);
        return t1;
      }}
  },
  EntityReferenceImpl: {
    "^": "NodeImpl;nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    toString$0: function(_) {
      return "&" + H.S(this.nodeName) + ";";
    },
    EntityReferenceImpl$2: function(doc, $name) {
      this.nodeName = $name;
      this.nodeValue = null;
      this.nodeType = 5;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isNode: true
  },
  Node: {
    "^": "Object;",
    $isNode: true
  },
  NodeImpl: {
    "^": "Object;nodeName>,nodeValue*,nodeType>,parentNode*,childNodes>,firstChild*,lastChild>,previousSibling@,nextSibling@,attributes*,ownerDocument>,namespaceURI@,prefix@,localName>",
    attributes$0: function($receiver) {
      return this.attributes.call$0();
    },
    insertBefore$2: function(_, newChild, refChild) {
      var t1 = this.childNodes;
      if (t1 == null || !J.contains$1$asx(t1, refChild))
        throw H.wrapException(Z.DOMException$("NOT_FOUND_ERR", null));
      this._checkNewChildValid$1(newChild);
      if (this.nodeType === 9 && J.get$nodeType$x(newChild) === 1 && H.interceptedTypeCast(this, "$isDocument").documentElement != null)
        throw H.wrapException(Z.DOMException$("HIERARCHY_REQUEST_ERR", null));
      if (this.childNodes == null)
        this.childNodes = H.setRuntimeTypeInfo([], [Z.Node]);
      t1 = J.getInterceptor$x(newChild);
      if (t1.get$parentNode(newChild) != null)
        t1.get$parentNode(newChild).removeChild$1(newChild);
      t1.set$parentNode(newChild, this);
      if (this.nodeType === 9 && t1.get$nodeType(newChild) === 1)
        H.interceptedTypeCast(this, "$isDocument").documentElement = newChild;
      if (J.$eq(this.firstChild, refChild))
        this.firstChild = newChild;
      newChild.set$nextSibling(refChild);
      newChild.set$previousSibling(refChild.get$previousSibling());
    },
    removeChild$1: function(oldChild) {
      var t1 = this.childNodes;
      if (t1 == null || !J.contains$1$asx(t1, oldChild))
        throw H.wrapException(Z.DOMException$("NOT_FOUND_ERR", null));
      if (this.nodeType === 9 && J.get$nodeType$x(oldChild) === 1)
        H.interceptedTypeCast(this, "$isDocument").documentElement = null;
      if (J.$eq(this.firstChild, oldChild))
        this.firstChild = oldChild.get$nextSibling();
      t1 = this.lastChild;
      if (t1 == null ? oldChild == null : t1 === oldChild)
        this.lastChild = oldChild.get$previousSibling();
      if (oldChild.get$previousSibling() != null)
        oldChild.get$previousSibling().set$nextSibling(oldChild.get$nextSibling());
      if (oldChild.get$nextSibling() != null)
        oldChild.get$nextSibling().set$previousSibling(oldChild.get$previousSibling());
      oldChild.set$parentNode(0, null);
      J.remove$1$ax(this.childNodes, oldChild);
    },
    appendChild$1: function(newChild) {
      var t1;
      this._checkNewChildValid$1(newChild);
      if (this.nodeType === 9 && J.get$nodeType$x(newChild) === 1 && H.interceptedTypeCast(this, "$isDocument").documentElement != null)
        throw H.wrapException(Z.DOMException$("HIERARCHY_REQUEST_ERR", null));
      if (this.childNodes == null)
        this.childNodes = H.setRuntimeTypeInfo([], [Z.Node]);
      t1 = J.getInterceptor$x(newChild);
      if (t1.get$parentNode(newChild) != null)
        t1.get$parentNode(newChild).removeChild$1(newChild);
      t1.set$parentNode(newChild, this);
      if (this.nodeType === 9 && t1.get$nodeType(newChild) === 1)
        H.interceptedTypeCast(this, "$isDocument").documentElement = newChild;
      newChild.set$nextSibling(null);
      if (this.firstChild == null) {
        newChild.set$previousSibling(null);
        this.firstChild = newChild;
        this.lastChild = newChild;
      } else {
        this.lastChild.set$nextSibling(newChild);
        newChild.set$previousSibling(this.lastChild);
        this.lastChild = newChild;
      }
      this.childNodes.push(newChild);
    },
    hasChildNodes$0: function(_) {
      return this.firstChild != null;
    },
    lookupPrefix$1: function(namespaceURI) {
      var t1;
      if (namespaceURI == null || J.$eq(namespaceURI, ""))
        return;
      switch (this.nodeType) {
        case 1:
          return this._lookupNamespacePrefix$1(namespaceURI);
        case 9:
          return H.interceptedTypeCast(H.interceptedTypeCast(this, "$isDocument").documentElement, "$isElementImpl")._lookupNamespacePrefix$1(namespaceURI);
        case 6:
        case 12:
        case 11:
        case 10:
          return;
        case 2:
          t1 = H.interceptedTypeCast(this, "$isAttr").ownerElement;
          if (t1 != null)
            return t1._lookupNamespacePrefix$1(namespaceURI);
          return;
        default:
          t1 = this.parentNode;
          if (t1 != null)
            return H.interceptedTypeCast(t1, "$isElementImpl")._lookupNamespacePrefix$1(namespaceURI);
          return;
      }
    },
    _lookupNamespacePrefix$1: function(namespaceURI) {
      var t1, t2, att, t3, t4;
      t1 = H.JSSyntaxRegExp_makeNative("/^xmlns:(.*)$/", false, true, false);
      if (namespaceURI != null)
        if (J.$eq(this.namespaceURI, namespaceURI)) {
          t2 = this.prefix;
          t2 = t2 != null && J.$eq(this.lookupNamespaceURI$1(t2), namespaceURI);
        } else
          t2 = false;
      else
        t2 = false;
      if (t2)
        return this.prefix;
      t2 = this.attributes;
      if (t2 != null)
        for (t2 = J.get$iterator$ax(J.get$values$x(t2)); t2.moveNext$0();) {
          att = t2.get$current();
          t3 = J.getInterceptor$x(att);
          t4 = t3.get$name(att);
          if (typeof t4 !== "string")
            H.throwExpression(P.ArgumentError$(t4));
          if (t1.test(t4) && J.$eq(t3.get$value(att), namespaceURI) && J.$eq(this.lookupNamespaceURI$1(t3.get$localName(att)), namespaceURI))
            return this.localName;
        }
      t1 = this.parentNode;
      if (t1 != null)
        return H.interceptedTypeCast(t1, "$isElementImpl")._lookupNamespacePrefix$1(namespaceURI);
      return;
    },
    lookupNamespaceURI$1: function(prefix) {
      var t1, t2, att;
      switch (this.nodeType) {
        case 1:
          t1 = this.namespaceURI;
          if (t1 != null) {
            t2 = this.prefix;
            t2 = t2 == null ? prefix == null : t2 === prefix;
          } else
            t2 = false;
          if (t2)
            return t1;
          t1 = this.attributes;
          if (t1 != null)
            for (t1 = J.get$iterator$ax(J.get$values$x(t1)), t2 = prefix == null; t1.moveNext$0();) {
              att = t1.get$current();
              if (J.$eq(att.get$prefix(), "xmlns") && J.$eq(att.get$localName(att), prefix)) {
                if (att.get$value(att) != null && !J.$eq(att.get$value(att), ""))
                  return att.get$value(att);
                return;
              } else if (J.$eq(att.get$localName(att), "xmlns") && t2) {
                if (att.get$value(att) != null && !J.$eq(att.get$value(att), ""))
                  return att.get$value(att);
                return;
              }
            }
          t1 = this.parentNode;
          if (t1 != null && t1.nodeType !== 9)
            return t1.lookupNamespaceURI$1(prefix);
          return;
        case 9:
          return H.interceptedTypeCast(this, "$isDocument").documentElement.lookupNamespaceURI$1(prefix);
        case 6:
        case 12:
        case 10:
        case 11:
          return;
        case 2:
          t1 = this.parentNode;
          if (t1 != null)
            return t1.lookupNamespaceURI$1(prefix);
          return;
        default:
          t1 = this.parentNode;
          if (t1 != null)
            return t1.lookupNamespaceURI$1(prefix);
          return;
      }
    },
    _checkNewChildValid$1: function(newChild) {
      var t1, t2, ancestor;
      if (this.nodeType !== 9) {
        t1 = this.ownerDocument;
        t2 = J.get$ownerDocument$x(newChild);
        t2 = t1 == null ? t2 != null : t1 !== t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw H.wrapException(Z.DOMException$("WRONG_DOCUMENT_ERR", null));
      if (this.nodeType === 9 && this !== J.get$ownerDocument$x(newChild))
        throw H.wrapException(Z.DOMException$("WRONG_DOCUMENT_ERR", null));
      t1 = this.nodeType;
      if (t1 !== 1 && t1 !== 9)
        throw H.wrapException(Z.DOMException$("HIERARCHY_REQUEST_ERR", null));
      t1 = J.getInterceptor$x(newChild);
      if (t1.get$nodeType(newChild) === 9)
        throw H.wrapException(Z.DOMException$("HIERARCHY_REQUEST_ERR", null));
      if (this.nodeType !== 9 && t1.get$nodeType(newChild) === 2)
        throw H.wrapException(Z.DOMException$("HIERARCHY_REQUEST_ERR", null));
      for (ancestor = this; ancestor != null;) {
        if (newChild === ancestor)
          throw H.wrapException(Z.DOMException$("HIERARCHY_REQUEST_ERR", null));
        ancestor = ancestor.parentNode;
      }
    },
    $isNode: true
  },
  Engine: {
    "^": "Object;rules,states",
    parseString$1: function(s) {
      var result, t1, t2, pos, t3, pos0, match, t4;
      result = H.setRuntimeTypeInfo([], [Z.Token]);
      this.states = P.HashMap_HashMap(null, null, null, P.String, P.bool);
      t1 = J.getInterceptor$asx(s);
      t2 = this.rules;
      pos = 0;
      while (true) {
        t3 = t1.get$length(s);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(pos < t3))
          break;
        for (t3 = new H.ListIterator(t2, t2.length, 0, null), pos0 = pos; t3.moveNext$0();) {
          match = t3._current.evaluateString$2(s, pos0);
          if (match == null)
            continue;
          pos0 += match.nbMatched;
          t4 = match.tokens;
          if (t4.length > 0) {
            C.JSArray_methods.addAll$1(result, t4);
            break;
          }
        }
        if (pos === pos0)
          throw H.wrapException(Z.DOMException$("parser blocking at character " + pos0 + ": " + t1.substring$2(s, pos0, P.min(pos0 + 10, t1.get$length(s))), null));
        pos = pos0;
      }
      return result;
    },
    parseTokens$1: function(tokens) {
      var result, t1, pos, t2, pos0, match, t3;
      result = H.setRuntimeTypeInfo([], [Z.Token]);
      this.states = P.HashMap_HashMap(null, null, null, P.String, P.bool);
      for (t1 = this.rules, pos = 0; pos < tokens.length; pos = pos0) {
        for (t2 = new H.ListIterator(t1, t1.length, 0, null), pos0 = pos; t2.moveNext$0();) {
          match = t2._current.evaluateTokens$2(tokens, pos0);
          if (match == null)
            continue;
          pos0 += match.nbMatched;
          t3 = match.tokens;
          if (t3.length > 0) {
            C.JSArray_methods.addAll$1(result, t3);
            break;
          }
        }
        if (pos === pos0) {
          if (pos0 < 0 || pos0 >= tokens.length)
            return H.ioore(tokens, pos0);
          throw H.wrapException(Z.DOMException$("parser blocking at character " + H.S(J.get$position$x(tokens[pos0])), null));
        }
      }
      return result;
    },
    checkConditions$1: function(rule) {
      var t1, condition, t2, current;
      t1 = rule.conditions;
      if (t1 == null)
        return true;
      for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        condition = t1._current;
        t2 = J.getInterceptor$x(condition);
        current = this.states.$index(0, t2.get$name(condition));
        if (current == null)
          current = false;
        if (!J.$eq(current, t2.get$value(condition)))
          return false;
      }
      return true;
    },
    changeStates$1: function(rule) {
      var t1, change, t2;
      t1 = rule.changes;
      if (t1 == null)
        return;
      for (t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        change = t1._current;
        t2 = J.getInterceptor$x(change);
        this.states.$indexSet(0, t2.get$name(change), t2.get$value(change));
      }
    },
    Engine$1: function(rules) {
      var t1;
      for (t1 = this.rules, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();)
        t1._current.set$engine(this);
    },
    static: {Engine$: function(rules) {
        var t1 = new Z.Engine(rules, null);
        t1.Engine$1(rules);
        return t1;
      }}
  },
  MatchResult: {
    "^": "Object;nbMatched,characters,tokens"
  },
  StateChange: {
    "^": "Object;name>,value>"
  },
  StateCondition: {
    "^": "Object;name>,value>"
  },
  Token: {
    "^": "Object;id>,matchedString<,matchedTokens<,data>,position>",
    toString$0: function(_) {
      var sb, t1, token;
      sb = P.StringBuffer$("");
      sb.write$1("[" + this.id);
      t1 = this.matchedString;
      if (t1 != null)
        sb.write$1(" " + H.S(t1));
      else
        for (t1 = this.matchedTokens, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
          token = t1._current;
          sb._contents += " ";
          sb._contents += typeof token === "string" ? token : H.S(token);
        }
      sb.write$1("]");
      t1 = sb._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  },
  TokenChar: {
    "^": "TokenItem;character,isdigit,isletter,isany,exceptions",
    evaluateString$2: function(doc, pos) {
      var t1, c, t2, s, t3, t4, t5;
      t1 = J.getInterceptor$asx(doc);
      c = t1.$index(doc, pos);
      t2 = this.character;
      if (t2 != null) {
        if (J.$eq(c, t2))
          return new Z.MatchResult(1, c, null);
      } else if (this.isdigit) {
        if (C.JSString_methods.contains$1("0123456789", c))
          return new Z.MatchResult(1, c, null);
      } else if (this.isletter) {
        if (C.JSString_methods.contains$1("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", c))
          return new Z.MatchResult(1, c, null);
      } else if (this.isany)
        return new Z.MatchResult(1, c, null);
      else {
        t2 = this.exceptions;
        if (t2 != null) {
          for (t2 = new H.ListIterator(t2, t2.length, 0, null); t2.moveNext$0();) {
            s = t2._current;
            t3 = J.getInterceptor$asx(s);
            t4 = t3.get$length(s);
            if (typeof t4 !== "number")
              return H.iae(t4);
            t5 = t1.get$length(doc);
            if (typeof t5 !== "number")
              return H.iae(t5);
            if (pos + t4 <= t5) {
              t4 = t3.get$length(s);
              if (typeof t4 !== "number")
                return H.iae(t4);
              t4 = t3.$eq(s, t1.substring$2(doc, pos, pos + t4));
              t3 = t4;
            } else
              t3 = false;
            if (t3)
              return;
          }
          return new Z.MatchResult(1, c, null);
        }
      }
      return;
    },
    evaluateTokens$2: function(tokens, pos) {
      return;
    }
  },
  TokenChoice: {
    "^": "TokenItem;items<",
    evaluateString$2: function(doc, pos) {
      var t1, match;
      for (t1 = this.items, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        match = t1._current.evaluateString$2(doc, pos);
        if (match != null)
          return match;
      }
      return;
    },
    evaluateTokens$2: function(tokens, pos) {
      var t1, match;
      for (t1 = this.items, t1 = new H.ListIterator(t1, t1.length, 0, null); t1.moveNext$0();) {
        match = t1._current.evaluateTokens$2(tokens, pos);
        if (match != null)
          return match;
      }
      return;
    }
  },
  TokenId: {
    "^": "TokenItem;id>",
    evaluateString$2: function(doc, pos) {
      return;
    },
    evaluateTokens$2: function(tokens, pos) {
      if (pos < 0 || pos >= tokens.length)
        return H.ioore(tokens, pos);
      if (J.get$id$x(tokens[pos]) === this.id) {
        if (pos >= tokens.length)
          return H.ioore(tokens, pos);
        return new Z.MatchResult(1, null, [tokens[pos]]);
      } else
        return;
    }
  },
  TokenItem: {
    "^": "Object;"
  },
  TokenRepeat: {
    "^": "TokenItem;repeat,item",
    evaluateString$2: function(doc, pos) {
      var match, t1, t2, i, sb, t3, str, nbMatched, s;
      if (this.repeat === 0) {
        match = this.item.evaluateString$2(doc, pos);
        if (match == null)
          return new Z.MatchResult(0, "", null);
        else
          return match;
      }
      t1 = J.getInterceptor$asx(doc);
      t2 = this.item;
      i = pos;
      sb = null;
      while (true) {
        t3 = t1.get$length(doc);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(i < t3))
          break;
        match = t2.evaluateString$2(doc, i);
        if (match == null)
          break;
        if (sb == null) {
          sb = new P.StringBuffer("");
          sb._contents = "";
        }
        str = match.characters;
        str = typeof str === "string" ? str : H.S(str);
        sb._contents = sb._contents + str;
        i += match.nbMatched;
      }
      nbMatched = i - pos;
      if (nbMatched > 0 || this.repeat === 1) {
        if (sb != null) {
          t1 = sb._contents;
          s = t1.charCodeAt(0) == 0 ? t1 : t1;
        } else
          s = "";
        return new Z.MatchResult(nbMatched, s, null);
      } else
        return;
    },
    evaluateTokens$2: function(tokens, pos) {
      var match, resultTokens, t1, i, nbMatched;
      if (this.repeat === 0) {
        match = this.item.evaluateTokens$2(tokens, pos);
        if (match == null)
          return new Z.MatchResult(0, null, H.setRuntimeTypeInfo([], [Z.Token]));
        else
          return match;
      }
      resultTokens = H.setRuntimeTypeInfo([], [Z.Token]);
      for (t1 = this.item, i = pos; i < tokens.length;) {
        match = t1.evaluateTokens$2(tokens, i);
        if (match == null)
          break;
        C.JSArray_methods.addAll$1(resultTokens, match.tokens);
        i += match.nbMatched;
      }
      nbMatched = i - pos;
      if (nbMatched > 0 || this.repeat === 1)
        return new Z.MatchResult(nbMatched, null, resultTokens);
      else
        return;
    },
    static: {"^": "TokenRepeat_ZERO_OR_ONE,TokenRepeat_ZERO_OR_MORE,TokenRepeat_ONE_OR_MORE"}
  },
  TokenRule: {
    "^": "TokenItem;id>,conditions,changes,content,ignore,action,engine?",
    action$1: function($receiver, arg0) {
      return this.action.call$1(arg0);
    },
    evaluateString$2: function(doc, pos) {
      var match, token, t1, resultTokens, result;
      if (!this.engine.checkConditions$1(this))
        return;
      match = this.content.evaluateString$2(doc, pos);
      if (match == null)
        return;
      token = new Z.Token(this.id, match.characters, null, null, pos);
      if (this.action != null)
        this.action$1(0, token);
      this.engine.changeStates$1(this);
      t1 = this.ignore;
      resultTokens = t1 ? H.setRuntimeTypeInfo([], [Z.Token]) : [token];
      result = new Z.MatchResult(match.nbMatched, null, resultTokens);
      if (!t1)
        result.characters = token.matchedString;
      return result;
    },
    evaluateTokens$2: function(tokens, pos) {
      var match, t1, t2, token, resultTokens;
      if (!this.engine.checkConditions$1(this))
        return;
      match = this.content.evaluateTokens$2(tokens, pos);
      if (match == null)
        return;
      t1 = this.id;
      t2 = match.tokens;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      token = new Z.Token(t1, null, t2, null, J.get$position$x(t2[0]));
      if (this.action != null)
        this.action$1(0, token);
      this.engine.changeStates$1(this);
      resultTokens = this.ignore ? H.setRuntimeTypeInfo([], [Z.Token]) : [token];
      return new Z.MatchResult(match.nbMatched, null, resultTokens);
    },
    toString$0: function(_) {
      return this.id;
    }
  },
  TokenSequence: {
    "^": "TokenItem;items<",
    evaluateString$2: function(doc, pos) {
      var t1, t2, i, sb, item, t3, match, str, s;
      for (t1 = this.items, t1 = new H.ListIterator(t1, t1.length, 0, null), t2 = J.getInterceptor$asx(doc), i = pos, sb = null; t1.moveNext$0();) {
        item = t1._current;
        t3 = t2.get$length(doc);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (i >= t3)
          return;
        match = item.evaluateString$2(doc, i);
        if (match == null)
          return;
        if (sb == null) {
          sb = new P.StringBuffer("");
          sb._contents = "";
        }
        str = match.characters;
        str = typeof str === "string" ? str : H.S(str);
        sb._contents = sb._contents + str;
        i += match.nbMatched;
      }
      if (sb != null) {
        t1 = sb._contents;
        s = t1.charCodeAt(0) == 0 ? t1 : t1;
      } else
        s = "";
      return new Z.MatchResult(i - pos, s, null);
    },
    evaluateTokens$2: function(tokens, pos) {
      var resultTokens, t1, i, item, match;
      resultTokens = H.setRuntimeTypeInfo([], [Z.Token]);
      for (t1 = this.items, t1 = new H.ListIterator(t1, t1.length, 0, null), i = pos; t1.moveNext$0();) {
        item = t1._current;
        if (i >= tokens.length)
          return;
        match = item.evaluateTokens$2(tokens, i);
        if (match == null)
          return;
        C.JSArray_methods.addAll$1(resultTokens, match.tokens);
        i += match.nbMatched;
      }
      return new Z.MatchResult(i - pos, null, resultTokens);
    },
    TokenSequence$string$1: function(s) {
      var t1, i;
      this.items = H.setRuntimeTypeInfo([], [Z.TokenItem]);
      for (t1 = s.length, i = 0; i < t1; ++i)
        this.items.push(new Z.TokenChar(s[i], false, false, false, null));
    },
    static: {TokenSequence$string: function(s) {
        var t1 = new Z.TokenSequence(null);
        t1.TokenSequence$string$1(s);
        return t1;
      }}
  },
  XMLParser: {
    "^": "Object;lexRules,xmlRules,doc",
    _initRules$0: function() {
      var t1, inTag, t2, firstChar, nameChar, entityRef, t3, attributeRule, startTagRule, endTagRule, emptyElementRule, commentRule, entityRefRule, cdataSectionRule, piRule, elementRule;
      t1 = H.setRuntimeTypeInfo([], [Z.TokenRule]);
      this.lexRules = t1;
      inTag = new Z.StateCondition("in_tag", true);
      t1.push(new Z.TokenRule("CDATA_SECTION_OPEN", [new Z.StateCondition("in_cdata_section", false)], [new Z.StateChange("in_cdata_section", true)], Z.TokenSequence$string("<![CDATA["), false, null, null));
      t1 = this.lexRules;
      t2 = new Z.TokenRepeat(null, new Z.TokenChar(null, false, false, false, ["]]>"]));
      t2.repeat = 2;
      t1.push(new Z.TokenRule("CDATA_SECTION_DATA", [new Z.StateCondition("in_cdata_section", true)], null, t2, false, null, null));
      this.lexRules.push(new Z.TokenRule("CDATA_SECTION_CLOSE", [new Z.StateCondition("in_cdata_section", true)], [new Z.StateChange("in_cdata_section", false)], Z.TokenSequence$string("]]>"), false, null, null));
      this.lexRules.push(new Z.TokenRule("COMMENT_OPEN", null, [new Z.StateChange("in_comment", true)], Z.TokenSequence$string("<!--"), false, null, null));
      this.lexRules.push(new Z.TokenRule("COMMENT_CLOSE", [new Z.StateCondition("in_comment", true)], [new Z.StateChange("in_comment", false)], Z.TokenSequence$string("-->"), false, null, null));
      t2 = this.lexRules;
      t1 = new Z.TokenRepeat(null, new Z.TokenChar(null, false, false, false, ["-->"]));
      t1.repeat = 2;
      t2.push(new Z.TokenRule("COMMENT_DATA", [new Z.StateCondition("in_comment", true)], null, t1, false, null, null));
      this.lexRules.push(new Z.TokenRule("DOC_DECL_OPEN", null, [new Z.StateChange("in_tag", true), new Z.StateChange("in_decl", true)], Z.TokenSequence$string("<?xml"), false, null, null));
      this.lexRules.push(new Z.TokenRule("DOC_DECL_CLOSE", [new Z.StateCondition("in_decl", true)], [new Z.StateChange("in_tag", false), new Z.StateChange("in_decl", false)], Z.TokenSequence$string("?>"), false, null, null));
      this.lexRules.push(new Z.TokenRule("DOCTYPE_OPEN", null, [new Z.StateChange("in_tag", true), new Z.StateChange("in_doctype", true)], Z.TokenSequence$string("<!DOCTYPE"), false, null, null));
      this.lexRules.push(new Z.TokenRule("DOCTYPE_CLOSE", [new Z.StateCondition("in_doctype", true)], [new Z.StateChange("in_tag", false), new Z.StateChange("in_doctype", false)], Z.TokenSequence$string(">"), false, null, null));
      this.lexRules.push(new Z.TokenRule("PI_OPEN", null, [new Z.StateChange("in_pi", true)], Z.TokenSequence$string("<?"), false, null, null));
      t1 = new Z.TokenChar(null, false, false, false, null);
      t1.isletter = true;
      firstChar = new Z.TokenChoice([t1, new Z.TokenChar("_", false, false, false, null), new Z.TokenChar(":", false, false, false, null)]);
      t1 = new Z.TokenChar(null, false, false, false, null);
      t1.isletter = true;
      t2 = new Z.TokenChar(null, false, false, false, null);
      t2.isdigit = true;
      nameChar = new Z.TokenChoice([t1, t2, new Z.TokenChar(".", false, false, false, null), new Z.TokenChar("-", false, false, false, null), new Z.TokenChar("_", false, false, false, null), new Z.TokenChar(":", false, false, false, null)]);
      t2 = this.lexRules;
      t1 = new Z.TokenRepeat(null, nameChar);
      t1.repeat = 1;
      t2.push(new Z.TokenRule("PI_TARGET", [new Z.StateCondition("in_pi", true), new Z.StateCondition("pi_after_target", false)], [new Z.StateChange("pi_after_target", true)], new Z.TokenSequence([firstChar, t1]), false, null, null));
      t1 = this.lexRules;
      t2 = new Z.TokenRepeat(null, new Z.TokenChar(null, false, false, false, ["?>"]));
      t2.repeat = 2;
      t1.push(new Z.TokenRule("PI_DATA", [new Z.StateCondition("pi_after_target", true)], null, t2, false, null, null));
      this.lexRules.push(new Z.TokenRule("PI_CLOSE", [new Z.StateCondition("in_pi", true)], [new Z.StateChange("in_pi", false), new Z.StateChange("pi_after_target", false)], Z.TokenSequence$string("?>"), false, null, null));
      this.lexRules.push(new Z.TokenRule("TAG_END_OPEN", null, [new Z.StateChange("in_tag", true)], Z.TokenSequence$string("</"), false, null, null));
      this.lexRules.push(new Z.TokenRule("TAG_START_OPEN", null, [new Z.StateChange("in_tag", true)], new Z.TokenChar("<", false, false, false, null), false, null, null));
      this.lexRules.push(new Z.TokenRule("TAG_CLOSE", [inTag], [new Z.StateChange("in_tag", false)], new Z.TokenChar(">", false, false, false, null), false, null, null));
      this.lexRules.push(new Z.TokenRule("TAG_EMPTY_CLOSE", [inTag], [new Z.StateChange("in_tag", false)], Z.TokenSequence$string("/>"), false, null, null));
      this.lexRules.push(new Z.TokenRule("ATTR_EQ", [inTag], null, new Z.TokenChar("=", false, false, false, null), false, null, null));
      t2 = new Z.TokenChar(null, false, false, false, null);
      t2.isdigit = true;
      t1 = new Z.TokenChar(null, false, false, false, null);
      t1.isletter = true;
      t1 = new Z.TokenRepeat(null, new Z.TokenChoice([new Z.TokenChar("#", false, false, false, null), t2, t1]));
      t1.repeat = 2;
      entityRef = new Z.TokenRule("ENTITY_REF", null, null, new Z.TokenSequence([new Z.TokenChar("&", false, false, false, null), t1, new Z.TokenChar(";", false, false, false, null)]), false, new Z.XMLParser__initRules_closure(), null);
      this.lexRules.push(entityRef);
      t1 = this.lexRules;
      t2 = new Z.TokenRepeat(null, new Z.TokenChoice([new Z.TokenChar(null, false, false, false, ["\"", "&", "<"]), entityRef]));
      t2.repeat = 1;
      t3 = new Z.TokenRepeat(null, new Z.TokenChoice([new Z.TokenChar(null, false, false, false, ["'", "&", "<"]), entityRef]));
      t3.repeat = 1;
      t1.push(new Z.TokenRule("ATTR_VALUE", [inTag], null, new Z.TokenChoice([new Z.TokenSequence([new Z.TokenChar("\"", false, false, false, null), t2, new Z.TokenChar("\"", false, false, false, null)]), new Z.TokenSequence([new Z.TokenChar("'", false, false, false, null), t3, new Z.TokenChar("'", false, false, false, null)])]), false, null, null));
      t3 = this.lexRules;
      t2 = new Z.TokenRepeat(null, new Z.TokenChar(null, false, false, false, ["<", "&"]));
      t2.repeat = 2;
      t3.push(new Z.TokenRule("PCDATA", [new Z.StateCondition("in_tag", false)], null, t2, false, null, null));
      t2 = this.lexRules;
      t3 = new Z.TokenRepeat(null, nameChar);
      t3.repeat = 1;
      t2.push(new Z.TokenRule("GENERIC_ID", [inTag], null, new Z.TokenSequence([firstChar, t3]), false, null, null));
      this.lexRules.push(new Z.TokenRule("WHITE", [inTag], null, new Z.TokenChoice([new Z.TokenChar(" ", false, false, false, null), new Z.TokenChar("\n", false, false, false, null), new Z.TokenChar("\r", false, false, false, null), new Z.TokenChar("\t", false, false, false, null)]), true, null, null));
      t3 = H.setRuntimeTypeInfo([], [Z.TokenRule]);
      this.xmlRules = t3;
      attributeRule = new Z.TokenRule("ATTRIBUTE", null, null, new Z.TokenSequence([new Z.TokenId("GENERIC_ID"), new Z.TokenId("ATTR_EQ"), new Z.TokenId("ATTR_VALUE")]), false, new Z.XMLParser__initRules_closure0(this), null);
      t2 = new Z.TokenRepeat(null, attributeRule);
      t2.repeat = 1;
      t3.push(new Z.TokenRule("DOC_DECL", null, null, new Z.TokenSequence([new Z.TokenId("DOC_DECL_OPEN"), t2, new Z.TokenId("DOC_DECL_CLOSE")]), false, new Z.XMLParser__initRules_closure1(this), null));
      t2 = this.xmlRules;
      t3 = new Z.TokenRepeat(null, new Z.TokenChoice([new Z.TokenId("GENERIC_ID"), new Z.TokenId("ATTR_VALUE")]));
      t3.repeat = 2;
      t2.push(new Z.TokenRule("DOCTYPE", null, null, new Z.TokenSequence([new Z.TokenId("DOCTYPE_OPEN"), t3, new Z.TokenId("DOCTYPE_CLOSE")]), false, new Z.XMLParser__initRules_closure2(this), null));
      this.xmlRules.push(new Z.TokenRule("OUTSIDE_ROOT", null, null, new Z.TokenId("PCDATA"), true, null, null));
      t3 = new Z.TokenRepeat(null, attributeRule);
      t3.repeat = 1;
      startTagRule = new Z.TokenRule("START_TAG", null, null, new Z.TokenSequence([new Z.TokenId("TAG_START_OPEN"), new Z.TokenId("GENERIC_ID"), t3, new Z.TokenId("TAG_CLOSE")]), false, null, null);
      endTagRule = new Z.TokenRule("END_TAG", null, null, new Z.TokenSequence([new Z.TokenId("TAG_END_OPEN"), new Z.TokenId("GENERIC_ID"), new Z.TokenId("TAG_CLOSE")]), false, null, null);
      t3 = new Z.TokenRepeat(null, attributeRule);
      t3.repeat = 1;
      emptyElementRule = new Z.TokenRule("EMPTY_ELEMENT", null, null, new Z.TokenSequence([new Z.TokenId("TAG_START_OPEN"), new Z.TokenId("GENERIC_ID"), t3, new Z.TokenId("TAG_EMPTY_CLOSE")]), false, null, null);
      t3 = new Z.TokenRepeat(null, new Z.TokenId("COMMENT_DATA"));
      t3.repeat = 0;
      commentRule = new Z.TokenRule("COMMENT", null, null, new Z.TokenSequence([new Z.TokenId("COMMENT_OPEN"), t3, new Z.TokenId("COMMENT_CLOSE")]), false, new Z.XMLParser__initRules_closure3(this), null);
      entityRefRule = new Z.TokenRule("ENTITY_REF", null, null, new Z.TokenSequence([new Z.TokenId("ENTITY_REF")]), false, new Z.XMLParser__initRules_closure4(this), null);
      t3 = new Z.TokenRepeat(null, new Z.TokenId("CDATA_SECTION_DATA"));
      t3.repeat = 0;
      cdataSectionRule = new Z.TokenRule("CDATA", null, null, new Z.TokenSequence([new Z.TokenId("CDATA_SECTION_OPEN"), t3, new Z.TokenId("CDATA_SECTION_CLOSE")]), false, new Z.XMLParser__initRules_closure5(this), null);
      t3 = new Z.TokenRepeat(null, new Z.TokenId("PI_DATA"));
      t3.repeat = 0;
      piRule = new Z.TokenRule("PI", null, null, new Z.TokenSequence([new Z.TokenId("PI_OPEN"), new Z.TokenId("PI_TARGET"), t3, new Z.TokenId("PI_CLOSE")]), false, new Z.XMLParser__initRules_closure6(this), null);
      elementRule = new Z.TokenRule("ELEMENT", null, null, null, false, new Z.XMLParser__initRules_closure7(this), null);
      t3 = new Z.TokenRepeat(null, new Z.TokenChoice([elementRule, commentRule, new Z.TokenId("PCDATA"), entityRefRule, cdataSectionRule, piRule]));
      t3.repeat = 1;
      elementRule.content = new Z.TokenChoice([new Z.TokenSequence([startTagRule, t3, endTagRule]), emptyElementRule]);
      this.xmlRules.push(elementRule);
      this.xmlRules.push(attributeRule);
      this.xmlRules.push(startTagRule);
      this.xmlRules.push(endTagRule);
      this.xmlRules.push(emptyElementRule);
      this.xmlRules.push(commentRule);
      this.xmlRules.push(entityRefRule);
      this.xmlRules.push(cdataSectionRule);
      this.xmlRules.push(piRule);
    },
    parseString$1: function(s) {
      var tokens, t1, data, t2;
      s.toString;
      H.checkString("\n");
      s = H.stringReplaceAllUnchecked(s, "\r\n", "\n");
      this.doc = Z.DocumentImpl$(new Z.DOMImplementationImpl(), null, null, null);
      tokens = Z.Engine$(this.lexRules).parseString$1(s);
      tokens = Z.Engine$(this.xmlRules).parseTokens$1(tokens);
      for (t1 = new H.ListIterator(tokens, tokens.length, 0, null); t1.moveNext$0();) {
        data = J.get$data$x(t1._current);
        t2 = J.getInterceptor(data);
        if (!!t2.$isDocumentType)
          this.doc.doctype = data;
        else if (!!t2.$isNode)
          this.doc.appendChild$1(data);
      }
      t1 = this.doc.documentElement;
      if (t1 != null)
        this._fixNamespaces$1(t1);
      return this.doc;
    },
    _fixNamespaces$1: function(el) {
      var t1, attr, t2, t3, n;
      if (el.get$attributes(el) != null)
        for (t1 = J.get$iterator$ax(J.get$values$x(el.get$attributes(el))); t1.moveNext$0();) {
          attr = t1.get$current();
          t2 = J.getInterceptor$x(attr);
          if (!J.$eq(t2.get$name(attr), "xmlns"))
            t3 = J.$eq(attr.get$prefix(), "xmlns") && J.$eq(t2.get$localName(attr), el.get$prefix());
          else
            t3 = true;
          if (t3) {
            el.set$namespaceURI(t2.get$value(attr));
            break;
          }
        }
      if (el.get$namespaceURI() == null && el.get$parentNode(el) != null)
        el.set$namespaceURI(el.get$parentNode(el).lookupNamespaceURI$1(el.get$prefix()));
      for (n = el.get$firstChild(el); n != null; n = n.get$nextSibling())
        if (!!J.getInterceptor(n).$isElement)
          this._fixNamespaces$1(n);
    }
  },
  XMLParser__initRules_closure: {
    "^": "Closure:44;",
    call$1: function(token) {
      var data, t1, t2, num, s;
      data = token.matchedString;
      t1 = J.getInterceptor$asx(data);
      t2 = t1.get$length(data);
      if (typeof t2 !== "number")
        return t2.$sub();
      data = t1.substring$2(data, 1, t2 - 1);
      if (C.JSString_methods.startsWith$1(data, "#")) {
        if (1 >= data.length)
          return H.ioore(data, 1);
        num = data[1] === "x" ? H.Primitives_parseInt(C.JSString_methods.substring$1(data, 2), 16, null) : H.Primitives_parseInt(C.JSString_methods.substring$1(data, 1), null, null);
        H.Primitives_stringFromCharCode(num);
        token.matchedString = H.Primitives_stringFromCharCode(num);
      } else {
        if (data === "amp")
          s = "&";
        else if (data === "lt")
          s = "<";
        else if (data === "gt")
          s = ">";
        else if (data === "apos")
          s = "'";
        else
          s = data === "quot" ? "\"" : null;
        if (s != null)
          token.matchedString = s;
      }
    },
    $isFunction: true
  },
  XMLParser__initRules_closure0: {
    "^": "Closure:44;this_0",
    call$1: function(token) {
      var t1, $name, value, t2, attr;
      t1 = token.matchedTokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      $name = t1[0].get$matchedString();
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      value = t1[2].get$matchedString();
      t1 = J.getInterceptor$asx(value);
      t2 = t1.get$length(value);
      if (typeof t2 !== "number")
        return t2.$sub();
      value = t1.substring$2(value, 1, t2 - 1);
      attr = Z.AttrImpl$NS(this.this_0.doc, null, $name);
      attr.nodeValue = value;
      token.data = attr;
    },
    $isFunction: true
  },
  XMLParser__initRules_closure1: {
    "^": "Closure:44;this_1",
    call$1: function(token) {
      var t1, t2, i, data, t3;
      t1 = token.matchedTokens;
      if (t1.length - 2 > 0)
        for (t2 = this.this_1, i = 1; i < t1.length - 1; ++i) {
          data = J.get$data$x(t1[i]);
          t3 = J.getInterceptor(data);
          if (!!t3.$isAttr)
            if (J.$eq(t3.get$name(data), "version"))
              t2.doc.xmlVersion = t3.get$value(data);
            else if (J.$eq(t3.get$name(data), "encoding")) {
              t2.doc.xmlEncoding = t3.get$value(data);
              t2.doc.inputEncoding = t3.get$value(data);
            }
        }
    },
    $isFunction: true
  },
  XMLParser__initRules_closure2: {
    "^": "Closure:44;this_2",
    call$1: function(token) {
      var t1, $name, publicId, systemId, i, t2, t3, doctype;
      t1 = token.matchedTokens;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      $name = t1[1].get$matchedString();
      for (publicId = null, systemId = null, i = 2; i < t1.length - 1; ++i) {
        if (J.get$id$x(t1[i]) === "GENERIC_ID") {
          if (i >= t1.length)
            return H.ioore(t1, i);
          t2 = J.$eq(t1[i].get$matchedString(), "PUBLIC") && i < t1.length - 2 && J.get$id$x(t1[i + 1]) === "ATTR_VALUE";
        } else
          t2 = false;
        if (t2) {
          t2 = i + 1;
          if (t2 >= t1.length)
            return H.ioore(t1, t2);
          publicId = J.substring$2$s(t1[t2].get$matchedString(), 1, systemId.length - 1);
        } else {
          if (i >= t1.length)
            return H.ioore(t1, i);
          if (J.get$id$x(t1[i]) === "GENERIC_ID") {
            if (i >= t1.length)
              return H.ioore(t1, i);
            t2 = J.$eq(t1[i].get$matchedString(), "SYSTEM") && i < t1.length - 2 && J.get$id$x(t1[i + 1]) === "ATTR_VALUE";
          } else
            t2 = false;
          if (t2) {
            t2 = i + 1;
            if (t2 >= t1.length)
              return H.ioore(t1, t2);
            systemId = t1[t2].get$matchedString();
            t2 = J.getInterceptor$asx(systemId);
            t3 = t2.get$length(systemId);
            if (typeof t3 !== "number")
              return t3.$sub();
            systemId = t2.substring$2(systemId, 1, t3 - 1);
          }
        }
      }
      doctype = new Z.DocumentTypeImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
      doctype.DocumentTypeImpl$3($name, publicId, systemId);
      doctype.ownerDocument = this.this_2.doc;
      token.data = doctype;
    },
    $isFunction: true
  },
  XMLParser__initRules_closure3: {
    "^": "Closure:44;this_3",
    call$1: function(token) {
      var t1, t2, data;
      t1 = token.matchedTokens;
      t2 = t1.length;
      if (t2 === 3) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        data = t1[1].get$matchedString();
      } else
        data = "";
      token.data = Z.CommentImpl$(this.this_3.doc, data);
    },
    $isFunction: true
  },
  XMLParser__initRules_closure4: {
    "^": "Closure:44;this_4",
    call$1: function(token) {
      var t1, data, t2, entityRef;
      t1 = token.matchedTokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      data = t1[0].get$matchedString();
      t1 = J.getInterceptor$s(data).startsWith$1(data, "&") && data.length > 1;
      t2 = this.this_4;
      if (t1) {
        data = C.JSString_methods.substring$2(data, 1, data.length - 1);
        entityRef = new Z.EntityReferenceImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        entityRef.EntityReferenceImpl$2(t2.doc, data);
        token.data = entityRef;
      } else
        token.data = Z.TextImpl$(t2.doc, data);
    },
    $isFunction: true
  },
  XMLParser__initRules_closure5: {
    "^": "Closure:44;this_5",
    call$1: function(token) {
      var t1, t2, data;
      t1 = token.matchedTokens;
      t2 = t1.length;
      if (t2 === 3) {
        if (1 >= t2)
          return H.ioore(t1, 1);
        data = t1[1].get$matchedString();
      } else
        data = "";
      token.data = Z.CDATASectionImpl$(this.this_5.doc, data);
    },
    $isFunction: true
  },
  XMLParser__initRules_closure6: {
    "^": "Closure:44;this_6",
    call$1: function(token) {
      var t1, target, t2, data;
      t1 = token.matchedTokens;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      target = t1[1].get$matchedString();
      t2 = t1.length;
      if (t2 === 4) {
        if (2 >= t2)
          return H.ioore(t1, 2);
        data = J.replaceAll$2$s(t1[2].get$matchedString(), new H.JSSyntaxRegExp("^\\s+", H.JSSyntaxRegExp_makeNative("^\\s+", false, true, false), null, null), "");
      } else
        data = "";
      token.data = Z.ProcessingInstructionImpl$(this.this_6.doc, target, data);
    },
    $isFunction: true
  },
  XMLParser__initRules_closure7: {
    "^": "Closure:44;this_7",
    call$1: function(token) {
      var t1, t2, startTagToken, t3, $name, el, t4, i, data, t5, t6, t7, tokeni, n, n2;
      t1 = token.matchedTokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = J.get$id$x(t1[0]);
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      startTagToken = t1[0];
      t3 = startTagToken.get$matchedTokens();
      if (1 >= t3.length)
        return H.ioore(t3, 1);
      $name = t3[1].get$matchedString();
      t3 = this.this_7;
      el = Z.ElementImpl$NS(t3.doc, null, $name);
      t4 = startTagToken.matchedTokens;
      if (t4.length - 3 > 0)
        for (i = 2; i < t4.length - 1; ++i) {
          data = J.get$data$x(t4[i]);
          t5 = J.getInterceptor(data);
          if (!!t5.$isAttr) {
            t6 = el.ownerDocument;
            t7 = t5.get$ownerDocument(data);
            if (t6 == null ? t7 != null : t6 !== t7)
              H.throwExpression(Z.DOMException$("WRONG_DOCUMENT_ERR", null));
            if (el.attributes == null)
              el.attributes = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, Z.Attr);
            t5.set$parentNode(data, el);
            data.set$ownerElement(el);
            J.$indexSet$ax(el.attributes, t5.get$name(data), data);
          }
        }
      if (t2 !== "EMPTY_ELEMENT")
        if (t1.length - 2 > 0) {
          for (i = 1; i < t1.length - 1; ++i) {
            tokeni = t1[i];
            t2 = J.getInterceptor$x(tokeni);
            if (t2.get$id(tokeni) === "PCDATA")
              el.appendChild$1(Z.TextImpl$(t3.doc, tokeni.get$matchedString()));
            else {
              data = t2.get$data(tokeni);
              if (!!J.getInterceptor(data).$isNode)
                el.appendChild$1(data);
            }
          }
          for (n = el.firstChild; n != null; n = n.get$nextSibling()) {
            t1 = J.getInterceptor$x(n);
            if (t1.get$nodeType(n) === 3) {
              n2 = n.get$nextSibling();
              while (true) {
                if (!(n2 != null && J.get$nodeType$x(n2) === 3))
                  break;
                t1.set$nodeValue(n, J.$add$ns(t1.get$nodeValue(n), J.get$nodeValue$x(n2)));
                el.removeChild$1(n2);
                n2 = n.get$nextSibling();
              }
            }
          }
        }
      token.data = el;
    },
    $isFunction: true
  },
  ProcessingInstructionImpl: {
    "^": "NodeImpl;target>,data>,nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    toString$0: function(_) {
      return "<?" + H.S(this.target) + " " + H.S(this.data) + "?>";
    },
    ProcessingInstructionImpl$3: function(doc, target, data) {
      this.target = target;
      this.data = data;
      this.nodeName = target;
      this.nodeValue = data;
      this.nodeType = 7;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isProcessingInstruction: true,
    $isNode: true,
    static: {ProcessingInstructionImpl$: function(doc, target, data) {
        var t1 = new Z.ProcessingInstructionImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.ProcessingInstructionImpl$3(doc, target, data);
        return t1;
      }}
  },
  TextImpl: {
    "^": "NodeImpl;nodeName,nodeValue,nodeType,parentNode,childNodes,firstChild,lastChild,previousSibling,nextSibling,attributes,ownerDocument,namespaceURI,prefix,localName",
    toString$0: function(_) {
      return Z.NodeImpl__escape(this.nodeValue);
    },
    TextImpl$2: function(doc, data) {
      this.nodeName = "#text";
      this.nodeValue = data;
      this.nodeType = 3;
      this.parentNode = null;
      this.childNodes = null;
      this.firstChild = null;
      this.lastChild = null;
      this.previousSibling = null;
      this.nextSibling = null;
      this.attributes = null;
      this.ownerDocument = doc;
      this.namespaceURI = null;
      this.prefix = null;
      this.localName = null;
    },
    $isNode: true,
    static: {TextImpl$: function(doc, data) {
        var t1 = new Z.TextImpl(null, null, null, null, null, null, null, null, null, null, null, null, null, null);
        t1.TextImpl$2(doc, data);
        return t1;
      }}
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
;(function() {
  var TRUE = !0, _;
  _ = P.$int;
  _.$is$int = TRUE;
  _.$isObject = TRUE;
  _ = W.Node0;
  _.$isNode0 = TRUE;
  _.$isObject = TRUE;
  P.$double.$isObject = TRUE;
  _ = P.Rectangle;
  _.$isRectangle = TRUE;
  _.$isObject = TRUE;
  P.num.$isObject = TRUE;
  _ = P.String;
  _.$isString = TRUE;
  _.$isObject = TRUE;
  _ = P.List;
  _.$isList = TRUE;
  _.$isObject = TRUE;
  _ = P.Duration;
  _.$isDuration = TRUE;
  _.$isObject = TRUE;
  P.Match.$isObject = TRUE;
  P.Object.$isObject = TRUE;
  _ = W.Element0;
  _.$isElement0 = TRUE;
  _.$isNode0 = TRUE;
  _.$isObject = TRUE;
  Z.UndoableEdit.$isObject = TRUE;
  _ = Z.DaxeNode;
  _.$isDaxeNode = TRUE;
  _.$isObject = TRUE;
  _ = Z.Document;
  _.$isDocument = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  _ = P.bool;
  _.$isbool = TRUE;
  _.$isObject = TRUE;
  _ = Z.Node;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  _ = Z.Token;
  _.$isToken = TRUE;
  _.$isObject = TRUE;
  _ = Z.Element;
  _.$isElement = TRUE;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  Z.TokenRule.$isObject = TRUE;
  Z.TokenItem.$isObject = TRUE;
  _ = Z.Attr;
  _.$isNode = TRUE;
  _.$isObject = TRUE;
  O.WXSElement.$isObject = TRUE;
  _ = O.WXSAttribute;
  _.$isWXSAttribute = TRUE;
  _.$isObject = TRUE;
  _ = P.Future;
  _.$isFuture = TRUE;
  _.$isObject = TRUE;
  O.WXSInclude.$isObject = TRUE;
  O.WXSImport.$isObject = TRUE;
  O.WXSRedefine.$isObject = TRUE;
  _ = O.WXSSchema;
  _.$isWXSSchema = TRUE;
  _.$isObject = TRUE;
  O.WXSSimpleType.$isObject = TRUE;
  O.WXSComplexType.$isObject = TRUE;
  O.WXSGroup.$isObject = TRUE;
  O.WXSAttributeGroup.$isObject = TRUE;
  O.WXSFacet.$isObject = TRUE;
  O.WXSThing.$isObject = TRUE;
  O.WithSubElements.$isObject = TRUE;
  O.WXSField.$isObject = TRUE;
  O.WXSDocumentation.$isObject = TRUE;
  O.WXSExtension.$isObject = TRUE;
  P.Pattern.$isObject = TRUE;
  Z.DaxeAttr.$isObject = TRUE;
  _ = W.NodeValidator;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  S.SimpleTypeControl.$isObject = TRUE;
  _ = W.HttpRequest;
  _.$isHttpRequest = TRUE;
  _.$isObject = TRUE;
  B.TextMetrics.$isObject = TRUE;
  B.MathElement.$isObject = TRUE;
  B.JEQ.$isObject = TRUE;
  P.HashMap.$isObject = TRUE;
  _ = Z.MenuItem;
  _.$isMenuItem = TRUE;
  _.$isObject = TRUE;
  Z.Position.$isObject = TRUE;
  _ = Z.Menu;
  _.$isMenu = TRUE;
  _.$isMenuItem = TRUE;
  _.$isObject = TRUE;
  _ = W.SpanElement;
  _.$isHtmlElement = TRUE;
  _.$isElement0 = TRUE;
  _.$isNode0 = TRUE;
  _.$isObject = TRUE;
  _ = S.DNTD;
  _.$isDaxeNode = TRUE;
  _.$isObject = TRUE;
  H.RawReceivePortImpl.$isObject = TRUE;
  H._IsolateEvent.$isObject = TRUE;
  H._IsolateContext.$isObject = TRUE;
  _ = Z.DaxeException;
  _.$isDaxeException = TRUE;
  _.$isObject = TRUE;
  _ = Z.DOMException;
  _.$isDOMException = TRUE;
  _.$isObject = TRUE;
  _ = W.ProgressEvent;
  _.$isProgressEvent = TRUE;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.Symbol;
  _.$isSymbol = TRUE;
  _.$isObject = TRUE;
  _ = P.StackTrace;
  _.$isStackTrace = TRUE;
  _.$isObject = TRUE;
  _ = O.WXSException;
  _.$isWXSException = TRUE;
  _.$isObject = TRUE;
  _ = W.Event;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = W.MouseEvent;
  _.$isMouseEvent = TRUE;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = W.KeyboardEvent;
  _.$isKeyboardEvent = TRUE;
  _.$isEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.Timer;
  _.$isTimer = TRUE;
  _.$isObject = TRUE;
  _ = W._Html5NodeValidator;
  _.$is_Html5NodeValidator = TRUE;
  _.$isNodeValidator = TRUE;
  _.$isObject = TRUE;
  _ = P._EventSink;
  _.$is_EventSink = TRUE;
  _.$isObject = TRUE;
  _ = W.HtmlElement;
  _.$isHtmlElement = TRUE;
  _.$isElement0 = TRUE;
  _.$isNode0 = TRUE;
  _.$isObject = TRUE;
  _ = P._DelayedEvent;
  _.$is_DelayedEvent = TRUE;
  _.$isObject = TRUE;
  _ = P.StreamSubscription;
  _.$isStreamSubscription = TRUE;
  _.$isObject = TRUE;
  _ = P.Stream;
  _.$isStream = TRUE;
  _.$isObject = TRUE;
  _ = P.Function;
  _.$isFunction = TRUE;
  _.$isObject = TRUE;
  _ = P.DateTime;
  _.$isDateTime = TRUE;
  _.$isObject = TRUE;
})();
;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J._clearChildren$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J.abs$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).abs$0(receiver);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.appendText$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).appendText$1(receiver, a0);
};
J.attributes$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).attributes$0(receiver);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createElement$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).createElement$1(receiver, a0);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.defaultValue$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).defaultValue$0(receiver);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$checked$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$checked(receiver);
};
J.get$childNodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$childNodes(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$client$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$client(receiver);
};
J.get$context2D$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$context2D(receiver);
};
J.get$data$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$data(receiver);
};
J.get$display$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$display(receiver);
};
J.get$documentElement$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$documentElement(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$errorCode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$errorCode(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$firstChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$firstChild(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$language$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$language(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$message$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$message(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$naturalWidth$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$naturalWidth(receiver);
};
J.get$nodeName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodeName(receiver);
};
J.get$nodeType$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodeType(receiver);
};
J.get$nodeValue$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodeValue(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$onBlur$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onBlur(receiver);
};
J.get$onChange$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onChange(receiver);
};
J.get$onClick$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onClick(receiver);
};
J.get$onInput$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onInput(receiver);
};
J.get$onKeyDown$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onKeyDown(receiver);
};
J.get$onKeyUp$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onKeyUp(receiver);
};
J.get$onLoad$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onLoad(receiver);
};
J.get$onScroll$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$onScroll(receiver);
};
J.get$ownerDocument$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ownerDocument(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$response$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$response(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$selected$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selected(receiver);
};
J.get$shiftKey$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shiftKey(receiver);
};
J.get$style$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$style(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$title$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$title(receiver);
};
J.get$topLeft$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$topLeft(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$visibility$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$visibility(receiver);
};
J.get$x$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$x(receiver);
};
J.getAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getAttribute$1(receiver, a0);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getClientRects$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getClientRects$0(receiver);
};
J.getPropertyValue$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getPropertyValue$1(receiver, a0);
};
J.html$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).html$0(receiver);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.indexOf$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
J.insertBefore$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertBefore$2(receiver, a0, a1);
};
J.nextNode$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).nextNode$0(receiver);
};
J.postMessage$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).postMessage$2(receiver, a0, a1);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.remove$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).remove$2(receiver, a0, a1);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.roundToDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).roundToDouble$0(receiver);
};
J.select$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).select$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$attributes$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$attributes(receiver, value);
};
J.set$background$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$background(receiver, value);
};
J.set$border$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$border(receiver, value);
};
J.set$bottom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$bottom(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$colSpan$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$colSpan(receiver, value);
};
J.set$color$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$color(receiver, value);
};
J.set$cursor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$cursor(receiver, value);
};
J.set$disabled$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$disabled(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$firstChild$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$firstChild(receiver, value);
};
J.set$fontFamily$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fontFamily(receiver, value);
};
J.set$fontSize$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fontSize(receiver, value);
};
J.set$fontStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fontStyle(receiver, value);
};
J.set$fontWeight$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$fontWeight(receiver, value);
};
J.set$height$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$height(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$htmlFor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$htmlFor(receiver, value);
};
J.set$left$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$left(receiver, value);
};
J.set$marginRight$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$marginRight(receiver, value);
};
J.set$nodeValue$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$nodeValue(receiver, value);
};
J.set$parent$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parent(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$src$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$src(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$textAlign$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textAlign(receiver, value);
};
J.set$textDecoration$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$textDecoration(receiver, value);
};
J.set$title$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$title(receiver, value);
};
J.set$top$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$top(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$verticalAlign$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$verticalAlign(receiver, value);
};
J.set$visibility$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$visibility(receiver, value);
};
J.set$width$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$width(receiver, value);
};
J.setProperty$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).setProperty$3(receiver, a0, a1, a2);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toDouble$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toDouble$0(receiver);
};
J.toInt$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).toInt$0(receiver);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toRadixString$1$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.NativeUint8List_methods = H.NativeUint8List.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.SelectElement_methods = W.SelectElement.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C._ClientRectList_methods = W._ClientRectList.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C__JSRandom = new P._JSRandom();
C.C__RootZone = new P._RootZone();
C.Duration_0 = new P.Duration(0);
C.Duration_700000 = new P.Duration(700000);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_oRe = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JS_CONST_s8I = function(_, letter) { return letter.toUpperCase(); };
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
;
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
C.List_KIf = Isolate.makeConstantList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431]);
C.List_empty = Isolate.makeConstantList([]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
C.Utf8Codec_false = new P.Utf8Codec(false);
$.Strings_resourcePath = "LocalStrings";
$.Strings_map = null;
$.Strings_systemLocale = null;
$.IsolateNatives_enableSpawnWorker = null;
$.RawReceivePortImpl__nextFreeId = 1;
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$._lastPriorityCallback = null;
$._isInCallbackLoop = false;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.page = null;
$.doc = null;
$.applicationVersion = "Version 1.3";
$.FindDialog_caseSensitive = false;
$.FindDialog_backwards = false;
$.FindDialog_findString = "";
$.MenuItem_idcount = 0;
$.MathBase_STIXFontRegular = "STIXSubset-Regular";
$.MathBase_STIXFontItalic = "STIXSubset-Italic";
$.MathBase_STIXFontBold = "STIXSubset-Bold";
$.MathBase_fontsLoaded = false;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.Intl_defaultLocale = null;
$.Intl_systemLocale = "en_US";
$.SimpleTypeControl__n = 0;
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return new P.Expando(null);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_toStringVisiting", "IterableBase__toStringVisiting", "get$IterableBase__toStringVisiting", function() {
  return [];
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "customFunctions", "customFunctions", "get$customFunctions", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, {func: "void_", void: true});
});
Isolate.$lazy($, "nodeFactory", "nodeFactory", "get$nodeFactory", function() {
  return new Z.NodeFactory(P.HashMap_HashMap(null, null, null, P.String, {func: "DaxeNode__Element", ret: Z.DaxeNode, args: [Z.Element]}), P.HashMap_HashMap(null, null, null, P.String, {func: "DaxeNode__Node_DaxeNode", ret: Z.DaxeNode, args: [Z.Node, Z.DaxeNode]}));
});
Isolate.$lazy($, "special", "StringMathBuilder_special", "get$StringMathBuilder_special", function() {
  return [["<==", "\u21d0"], ["==>", "\u21d2"], ["<=>", "\u21d4"], ["!=", "\u2260"], ["~=", "\u2248"], ["~", "\u223c"], ["<=", "\u2264"], [">=", "\u2265"], ["<<", "\u226a"], [">>", "\u226b"], ["-->", "\u2192"], ["<->", "\u2194"], ["->", "\u2192"], ["<--", "\u2190"], ["equiv", "\u2261"], ["forall", "\u2200"], ["quelquesoit", "\u2200"], ["exists", "\u2203"], ["ilexiste", "\u2203"], ["part", "\u2202"], ["drond", "\u2202"], ["nabla", "\u2207"], ["prop", "\u221d"], ["times", "\u00d7"], ["cross", "\u00d7"], ["croix", "\u00d7"], ["wedge", "\u2227"], ["pvec", "\u2227"], ["plusmn", "\u00b1"], ["plusoumoins", "\u00b1"], ["plusminus", "\u00b1"], ["cap", "\u2229"], ["cup", "\u222a"], ["...", "\u2026"]];
});
Isolate.$lazy($, "sops", "StringMathBuilder_sops", "get$StringMathBuilder_sops", function() {
  return "_^#*/\u2207\u00b1\u2213\u2227-+\u2200\u2203\u2202\u00d7=\u2260\u2248\u223c\u2261<>\u2264\u2265\u226a\u226b\u221d|\u2229\u222a\u2190\u2192\u2194\u21d0\u21d2\u21d4";
});
Isolate.$lazy($, "symboles_id", "StringMathBuilder_symboles_id", "get$StringMathBuilder_symboles_id", function() {
  return [["alpha", "\u03b1"], ["beta", "\u03b2"], ["gamma", "\u03b3"], ["delta", "\u03b4"], ["epsilon", "\u03b5"], ["zeta", "\u03b6"], ["eta", "\u03b7"], ["theta", "\u03b8"], ["iota", "\u03b9"], ["kappa", "\u03ba"], ["lambda", "\u03bb"], ["mu", "\u03bc"], ["nu", "\u03bd"], ["xi", "\u03be"], ["omicron", "\u03bf"], ["rho", "\u03c1"], ["sigma", "\u03c3"], ["tau", "\u03c4"], ["upsilon", "\u03c5"], ["phi", "\u03c6"], ["chi", "\u03c7"], ["psi", "\u03c8"], ["omega", "\u03c9"], ["Alpha", "\u0391"], ["Beta", "\u0392"], ["Gamma", "\u0393"], ["Delta", "\u0394"], ["Epsilon", "\u0395"], ["Zeta", "\u0396"], ["Eta", "\u0397"], ["Theta", "\u0398"], ["Iota", "\u0399"], ["Kappa", "\u039a"], ["Lambda", "\u039b"], ["Mu", "\u039c"], ["Nu", "\u039d"], ["Xi", "\u039e"], ["Omicron", "\u039f"], ["Pi", "\u03a0"], ["Rho", "\u03a1"], ["Sigma", "\u03a3"], ["Tau", "\u03a4"], ["Upsilon", "\u03a5"], ["Phi", "\u03a6"], ["Chi", "\u03a7"], ["Psi", "\u03a8"], ["Omega", "\u03a9"], ["thetasym", "\u03d1"], ["upsih", "\u03d2"], ["piv", "\u03d6"], ["phiv", "\u03d5"], ["phi1", "\u03d5"]];
});
Isolate.$lazy($, "symboles_droits", "StringMathBuilder_symboles_droits", "get$StringMathBuilder_symboles_droits", function() {
  return [["pi", "\u03c0"], ["infin", "\u221e"], ["infty", "\u221e"], ["infini", "\u221e"], ["parallel", "\u2225"], ["parall\u00e8le", "\u2225"], ["sun", "\u2609"], ["soleil", "\u2609"], ["star", "\u2605"], ["\u00e9toile", "\u2605"], ["mercury", "\u263f"], ["mercure", "\u263f"], ["venus", "\u2640"], ["v\u00e9nus", "\u2640"], ["earth", "\u2295"], ["terre", "\u2295"], ["mars", "\u2642"], ["jupiter", "\u2643"], ["saturn", "\u2644"], ["saturne", "\u2644"], ["uranus", "\u26e2"], ["neptun", "\u2646"], ["neptune", "\u2646"], ["planck", "\u210f"], ["angstrom", "\u212b"], ["angstr\u00f6m", "\u212b"], ["asterisk", "*"], ["ast\u00e9risque", "*"], ["ell", "\u2113"], ["smalll", "\u2113"], ["petitl", "\u2113"], ["Ascr", "\ud835\udc9c"], ["biga", "\ud835\udc9c"], ["granda", "\ud835\udc9c"], ["Bscr", "\u212c"], ["bigb", "\u212c"], ["grandb", "\u212c"], ["Cscr", "\ud835\udc9e"], ["bigc", "\ud835\udc9e"], ["grandc", "\ud835\udc9e"], ["Dscr", "\ud835\udc9f"], ["bigd", "\ud835\udc9f"], ["grandd", "\ud835\udc9f"], ["Escr", "\u2130"], ["bige", "\u2130"], ["grande", "\u2130"], ["Fscr", "\u2131"], ["bigf", "\u2131"], ["grandf", "\u2131"], ["Gscr", "\ud835\udca2"], ["bigg", "\ud835\udca2"], ["grandg", "\ud835\udca2"], ["Hscr", "\u210b"], ["bigh", "\u210b"], ["grandh", "\u210b"], ["Iscr", "\u2110"], ["bigi", "\u2110"], ["grandi", "\u2110"], ["Jscr", "\ud835\udca5"], ["bigj", "\ud835\udca5"], ["grandj", "\ud835\udca5"], ["Kscr", "\ud835\udca6"], ["bigk", "\ud835\udca6"], ["grandk", "\ud835\udca6"], ["Lscr", "\u2112"], ["bigl", "\u2112"], ["grandl", "\u2112"], ["Mscr", "\u2133"], ["bigm", "\u2133"], ["grandm", "\u2133"], ["Nscr", "\ud835\udca9"], ["bign", "\ud835\udca9"], ["grandn", "\ud835\udca9"], ["Oscr", "\ud835\udcaa"], ["bigo", "\ud835\udcaa"], ["grando", "\ud835\udcaa"], ["Pscr", "\ud835\udcab"], ["bigp", "\ud835\udcab"], ["grandp", "\ud835\udcab"], ["Qscr", "\ud835\udcac"], ["bigq", "\ud835\udcac"], ["grandq", "\ud835\udcac"], ["Rscr", "\u211b"], ["bigr", "\u211b"], ["grandr", "\u211b"], ["Sscr", "\ud835\udcae"], ["bigs", "\ud835\udcae"], ["grands", "\ud835\udcae"], ["Tscr", "\ud835\udcaf"], ["bigt", "\ud835\udcaf"], ["grandt", "\ud835\udcaf"], ["Uscr", "\ud835\udcb0"], ["bigu", "\ud835\udcb0"], ["grandu", "\ud835\udcb0"], ["Vscr", "\ud835\udcb1"], ["bigv", "\ud835\udcb1"], ["grandv", "\ud835\udcb1"], ["Wscr", "\ud835\udcb2"], ["bigw", "\ud835\udcb2"], ["grandw", "\ud835\udcb2"], ["Xscr", "\ud835\udcb3"], ["bigx", "\ud835\udcb3"], ["grandx", "\ud835\udcb3"], ["Yscr", "\ud835\udcb4"], ["bigy", "\ud835\udcb4"], ["grandy", "\ud835\udcb4"], ["Zscr", "\ud835\udcb5"], ["bigz", "\ud835\udcb5"], ["grandz", "\ud835\udcb5"]];
});
Isolate.$lazy($, "fctnopar", "StringMathBuilder_fctnopar", "get$StringMathBuilder_fctnopar", function() {
  return ["sin", "cos", "tan", "acos", "asin", "atan"];
});
Isolate.$lazy($, "_numbersExpr", "StringMathBuilder__numbersExpr", "get$StringMathBuilder__numbersExpr", function() {
  return new H.JSSyntaxRegExp("^\\s?([0-9]+([\\.,][0-9]+)?|[\\.,][0-9]+)([Ee][+-]?[0-9]+)?\\s?$", H.JSSyntaxRegExp_makeNative("^\\s?([0-9]+([\\.,][0-9]+)?|[\\.,][0-9]+)([Ee][+-]?[0-9]+)?\\s?$", false, true, false), null, null);
});
Isolate.$lazy($, "canvas", "TextMetrics_canvas", "get$TextMetrics_canvas", function() {
  return W.CanvasElement_CanvasElement(300, 500);
});
Isolate.$lazy($, "symbols", "SpecialDialog_symbols", "get$SpecialDialog_symbols", function() {
  return [["\u0393", "\u0394", "\u0398", "\u039b", "\u039e", "\u03a0", "\u03a3", "\u03a5", "\u03a6", "\u03a7", "\u03a8", "\u03a9"], ["\u03b1", "\u03b2", "\u03b3", "\u03b4", "\u03b5", "\u03b6", "\u03b7", "\u03b8", "\u03b9", "\u03ba", "\u03bb", "\u03bc", "\u03bd", "\u03be", "\u03bf", "\u03c0", "\u03c1", "\u03c2", "\u03c3", "\u03c4", "\u03c5", "\u03c6", "\u03c7", "\u03c8", "\u03c9"], ["\u03d1", "\u03d5", "\u03d6"], ["\u00ac", "\u00b1", "\u00d7", "\u2113", "\u2102", "\u2115", "\u211a", "\u211d", "\u2124", "\u212b", "\u2190", "\u2192", "\u2194", "\u21d0", "\u21d2", "\u21d4", "\u2200", "\u2202", "\u2203", "\u2205", "\u2207", "\u2208", "\u2209", "\u2211", "\u221d", "\u221e", "\u2227", "\u2228", "\u2229", "\u222a", "\u222b", "\u223c", "\u2248", "\u2260", "\u2261", "\u2264", "\u2265", "\u2282"], ["\ud835\udc9c", "\u212c", "\ud835\udc9e", "\ud835\udc9f", "\u2130", "\u2131", "\ud835\udca2", "\u210b", "\u2110", "\ud835\udca5", "\ud835\udca6", "\u2112", "\u2133", "\ud835\udca9", "\ud835\udcaa", "\ud835\udcab", "\ud835\udcac", "\u211b", "\ud835\udcae", "\ud835\udcaf", "\ud835\udcb0", "\ud835\udcb1", "\ud835\udcb2", "\ud835\udcb3", "\ud835\udcb4", "\ud835\udcb5"]];
});
// Native classes

init.metadata = [{func: "dynamic__String", args: [P.String]},
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void_", void: true},
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
{func: "int__dynamic", ret: P.$int, args: [null]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: P.bool, args: [W.Element0, P.String, P.String, W._Html5NodeValidator]},
{func: "dynamic__ProgressEvent", args: [W.ProgressEvent]},
{func: "int_", ret: P.$int},
{func: "args0"},
{func: "args2", args: [null, null]},
{func: "args1", args: [null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
{func: "dynamic__void_", args: [{func: "void_", void: true}]},
{func: "dynamic__Object", args: [P.Object]},
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
,
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
{func: "dynamic__bool", args: [P.bool]},
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "int__dynamic_int", ret: P.$int, args: [null, P.$int]},
{func: "void__int_int", void: true, args: [P.$int, P.$int]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol, null]},
{func: "String__int", ret: P.String, args: [P.$int]},
{func: "void__Node", void: true, args: [W.Node0]},
{func: "dynamic__Event", args: [W.Event]},
{func: "dynamic__MouseEvent", args: [W.MouseEvent]},
{func: "dynamic__Document", args: [Z.Document]},
{func: "dynamic__WXSException", args: [O.WXSException]},
{func: "dynamic__DOMException", args: [Z.DOMException]},
{func: "dynamic__KeyboardEvent", args: [W.KeyboardEvent]},
{func: "dynamic__Timer", args: [P.Timer]},
{func: "dynamic__DaxeException", args: [Z.DaxeException]},
{func: "dynamic__Element", args: [Z.Element]},
{func: "dynamic__Node_DaxeNode", args: [Z.Node, Z.DaxeNode]},
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__int_dynamic", args: [P.$int, null]},
{func: "dynamic__HttpRequest", args: [W.HttpRequest]},
{func: "void__String", void: true, args: [P.String]},
{func: "List_", ret: [P.List, O.WXSAttribute]},
{func: "dynamic__WXSSchema", args: [O.WXSSchema]},
{func: "dynamic__Token", args: [Z.Token]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
function init() {
  Isolate.$isolateProperties = Object.create(null);
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = Object.create(null);
    if (!init.allClasses)
      init.allClasses = Object.create(null);
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      var desc = collectedClasses[cls];
      if (desc instanceof Array)
        desc = desc[1];
      var classData = desc["^"], supr, name = cls, fields = classData;
      if (typeof classData == "string") {
        var split = classData.split("/");
        if (split.length == 2) {
          name = split[0];
          fields = split[1];
        }
      }
      var s = fields.split(";");
      fields = s[1] == "" ? [] : s[1].split(",");
      supr = s[0];
      split = supr.split(":");
      if (split.length == 2) {
        supr = split[0];
        var functionSignature = split[1];
        if (functionSignature)
          desc.$signature = function(s) {
            return function() {
              return init.metadata[s];
            };
          }(functionSignature);
      }
      if (supr && supr.indexOf("+") > 0) {
        s = supr.split("+");
        supr = s[0];
        var mixin = collectedClasses[s[1]];
        if (mixin instanceof Array)
          mixin = mixin[1];
        for (var d in mixin) {
          if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
            desc[d] = mixin[d];
        }
      }
      if (typeof dart_precompiled != "function") {
        combinedConstructorFunction += defineClass(name, cls, fields);
        constructorsList.push(cls);
      }
      if (supr)
        pendingClasses[cls] = supr;
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = Object.create(null);
    init.interceptorsByTag = Object.create(null);
    init.leafTags = Object.create(null);
    function finishClass(cls) {
      if (finishedClasses[cls])
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (Object.prototype.hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    if (!init.lazies)
      init.lazies = Object.create(null);
    init.lazies[fieldName] = getterName;
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      var lazies = init.lazies;
      for (var lazyInit in lazies) {
        this[lazies[lazyInit]] = null;
      }
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
      for (var lazyInit in lazies) {
        var lazyInitName = lazies[lazyInit];
        this[lazyInitName] = isolateProperties[lazyInitName];
      }
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(Z.main$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(Z.main$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
})()

//# sourceMappingURL=daxe.dart.js.map
{
  var message =
      'Deprecation: Automatic generation of output for Content Security\n' +
      'Policy is deprecated and will be removed with the next development\n' +
      'release. Use the --csp option to generate CSP restricted output.';
  if (typeof dartPrint == "function") {
    dartPrint(message);
  } else if (typeof console == "object" && typeof console.log == "function") {
    console.log(message);
  } else if (typeof print == "function") {
    print(message);
  }
}
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AnchorElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AnimationPlayerEvent() {
  }
  AnimationPlayerEvent.builtin$cls = "AnimationPlayerEvent";
  if (!"name" in AnimationPlayerEvent)
    AnimationPlayerEvent.name = "AnimationPlayerEvent";
  $desc = $collectedClasses.AnimationPlayerEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationPlayerEvent.prototype = $desc;
  function ApplicationCacheErrorEvent() {
  }
  ApplicationCacheErrorEvent.builtin$cls = "ApplicationCacheErrorEvent";
  if (!"name" in ApplicationCacheErrorEvent)
    ApplicationCacheErrorEvent.name = "ApplicationCacheErrorEvent";
  $desc = $collectedClasses.ApplicationCacheErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ApplicationCacheErrorEvent.prototype = $desc;
  ApplicationCacheErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  BaseElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ButtonElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ButtonElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  CanvasElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  CanvasElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function CanvasGradient() {
  }
  CanvasGradient.builtin$cls = "CanvasGradient";
  if (!"name" in CanvasGradient)
    CanvasGradient.name = "CanvasGradient";
  $desc = $collectedClasses.CanvasGradient;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasGradient.prototype = $desc;
  function CanvasPattern() {
  }
  CanvasPattern.builtin$cls = "CanvasPattern";
  if (!"name" in CanvasPattern)
    CanvasPattern.name = "CanvasPattern";
  $desc = $collectedClasses.CanvasPattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasPattern.prototype = $desc;
  function CanvasRenderingContext2D() {
  }
  CanvasRenderingContext2D.builtin$cls = "CanvasRenderingContext2D";
  if (!"name" in CanvasRenderingContext2D)
    CanvasRenderingContext2D.name = "CanvasRenderingContext2D";
  $desc = $collectedClasses.CanvasRenderingContext2D;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasRenderingContext2D.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment0() {
  }
  Comment0.builtin$cls = "Comment0";
  if (!"name" in Comment0)
    Comment0.name = "Comment0";
  $desc = $collectedClasses.Comment0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment0.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  CompositionEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceLightEvent() {
  }
  DeviceLightEvent.builtin$cls = "DeviceLightEvent";
  if (!"name" in DeviceLightEvent)
    DeviceLightEvent.name = "DeviceLightEvent";
  $desc = $collectedClasses.DeviceLightEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceLightEvent.prototype = $desc;
  DeviceLightEvent.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document0() {
  }
  Document0.builtin$cls = "Document0";
  if (!"name" in Document0)
    Document0.name = "Document0";
  $desc = $collectedClasses.Document0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document0.prototype = $desc;
  Document0.prototype.get$documentElement = function(receiver) {
    return receiver.documentElement;
  };
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  DomException.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element0() {
  }
  Element0.builtin$cls = "Element0";
  if (!"name" in Element0)
    Element0.name = "Element0";
  $desc = $collectedClasses.Element0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element0.prototype = $desc;
  Element0.prototype.get$title = function(receiver) {
    return receiver.title;
  };
  Element0.prototype.set$title = function(receiver, v) {
    return receiver.title = v;
  };
  Element0.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element0.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element0.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element0.prototype.get$style = function(receiver) {
    return receiver.style;
  };
  Element0.prototype.get$tagName = function(receiver) {
    return receiver.tagName;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  EmbedElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  EmbedElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  EmbedElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  ErrorEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FetchEvent() {
  }
  FetchEvent.builtin$cls = "FetchEvent";
  if (!"name" in FetchEvent)
    FetchEvent.name = "FetchEvent";
  $desc = $collectedClasses.FetchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FetchEvent.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FormElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FormElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function GamepadEvent() {
  }
  GamepadEvent.builtin$cls = "GamepadEvent";
  if (!"name" in GamepadEvent)
    GamepadEvent.name = "GamepadEvent";
  $desc = $collectedClasses.GamepadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GamepadEvent.prototype = $desc;
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$responseText = function(receiver) {
    return receiver.responseText;
  };
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  IFrameElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  IFrameElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function ImageData() {
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageData.prototype = $desc;
  ImageData.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  ImageElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ImageElement.prototype.get$naturalWidth = function(receiver) {
    return receiver.naturalWidth;
  };
  ImageElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ImageElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$checked = function(receiver) {
    return receiver.checked;
  };
  InputElement.prototype.set$checked = function(receiver, v) {
    return receiver.checked = v;
  };
  InputElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  InputElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  InputElement.prototype.set$size = function(receiver, v) {
    return receiver.size = v;
  };
  InputElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  InputElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  InputElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function InstallEvent() {
  }
  InstallEvent.builtin$cls = "InstallEvent";
  if (!"name" in InstallEvent)
    InstallEvent.name = "InstallEvent";
  $desc = $collectedClasses.InstallEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstallEvent.prototype = $desc;
  function InstallPhaseEvent() {
  }
  InstallPhaseEvent.builtin$cls = "InstallPhaseEvent";
  if (!"name" in InstallPhaseEvent)
    InstallPhaseEvent.name = "InstallPhaseEvent";
  $desc = $collectedClasses.InstallPhaseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstallPhaseEvent.prototype = $desc;
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  KeyboardEvent.prototype.get$metaKey = function(receiver) {
    return receiver.metaKey;
  };
  KeyboardEvent.prototype.get$shiftKey = function(receiver) {
    return receiver.shiftKey;
  };
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  LIElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  LabelElement.prototype.set$htmlFor = function(receiver, v) {
    return receiver.htmlFor = v;
  };
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  function LinkElement() {
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  LinkElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  LinkElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  LinkElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MapElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  MediaElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  MediaKeyEvent.prototype.get$errorCode = function(receiver) {
    return receiver.errorCode;
  };
  MediaKeyEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  MediaKeyMessageEvent.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MetaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  MeterElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  MidiMessageEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$button = function(receiver) {
    return receiver.button;
  };
  MouseEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  MouseEvent.prototype.get$metaKey = function(receiver) {
    return receiver.metaKey;
  };
  MouseEvent.prototype.get$shiftKey = function(receiver) {
    return receiver.shiftKey;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorCpu() {
  }
  NavigatorCpu.builtin$cls = "NavigatorCpu";
  if (!"name" in NavigatorCpu)
    NavigatorCpu.name = "NavigatorCpu";
  $desc = $collectedClasses.NavigatorCpu;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorCpu.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node0() {
  }
  Node0.builtin$cls = "Node0";
  if (!"name" in Node0)
    Node0.name = "Node0";
  $desc = $collectedClasses.Node0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node0.prototype = $desc;
  Node0.prototype.get$childNodes = function(receiver) {
    return receiver.childNodes;
  };
  Node0.prototype.get$firstChild = function(receiver) {
    return receiver.firstChild;
  };
  Node0.prototype.get$nodeName = function(receiver) {
    return receiver.nodeName;
  };
  Node0.prototype.get$nodeType = function(receiver) {
    return receiver.nodeType;
  };
  Node0.prototype.get$nodeValue = function(receiver) {
    return receiver.nodeValue;
  };
  Node0.prototype.get$ownerDocument = function(receiver) {
    return receiver.ownerDocument;
  };
  Node0.prototype.get$parent = function(receiver) {
    return receiver.parentElement;
  };
  Node0.prototype.get$parentNode = function(receiver) {
    return receiver.parentNode;
  };
  Node0.prototype.get$text = function(receiver) {
    return receiver.textContent;
  };
  Node0.prototype.set$text = function(receiver, v) {
    return receiver.textContent = v;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  ObjectElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ObjectElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ObjectElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  OptGroupElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  OptionElement.prototype.get$selected = function(receiver) {
    return receiver.selected;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OptionElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OutputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ParamElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function PictureElement() {
  }
  PictureElement.builtin$cls = "PictureElement";
  if (!"name" in PictureElement)
    PictureElement.name = "PictureElement";
  $desc = $collectedClasses.PictureElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PictureElement.prototype = $desc;
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  PositionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction0() {
  }
  ProcessingInstruction0.builtin$cls = "ProcessingInstruction0";
  if (!"name" in ProcessingInstruction0)
    ProcessingInstruction0.name = "ProcessingInstruction0";
  $desc = $collectedClasses.ProcessingInstruction0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction0.prototype = $desc;
  ProcessingInstruction0.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ProgressElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function PushEvent() {
  }
  PushEvent.builtin$cls = "PushEvent";
  if (!"name" in PushEvent)
    PushEvent.name = "PushEvent";
  $desc = $collectedClasses.PushEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PushEvent.prototype = $desc;
  PushEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  ScriptElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  SelectElement.prototype.set$size = function(receiver, v) {
    return receiver.size = v;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  SelectElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function Selection() {
  }
  Selection.builtin$cls = "Selection";
  if (!"name" in Selection)
    Selection.name = "Selection";
  $desc = $collectedClasses.Selection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Selection.prototype = $desc;
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  SourceElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  SpeechRecognitionError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  StyleElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  TableCellElement.prototype.set$colSpan = function(receiver, v) {
    return receiver.colSpan = v;
  };
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  TextAreaElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  TextEvent.prototype.get$data = function(receiver) {
    return receiver.data;
  };
  function TextMetrics0() {
  }
  TextMetrics0.builtin$cls = "TextMetrics0";
  if (!"name" in TextMetrics0)
    TextMetrics0.name = "TextMetrics0";
  $desc = $collectedClasses.TextMetrics0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextMetrics0.prototype = $desc;
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  TouchEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  TouchEvent.prototype.get$metaKey = function(receiver) {
    return receiver.metaKey;
  };
  TouchEvent.prototype.get$shiftKey = function(receiver) {
    return receiver.shiftKey;
  };
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.set$src = function(receiver, v) {
    return receiver.src = v;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  VideoElement.prototype.set$height = function(receiver, v) {
    return receiver.height = v;
  };
  VideoElement.prototype.set$width = function(receiver, v) {
    return receiver.width = v;
  };
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function XmlDocument() {
  }
  XmlDocument.builtin$cls = "XmlDocument";
  if (!"name" in XmlDocument)
    XmlDocument.name = "XmlDocument";
  $desc = $collectedClasses.XmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XmlDocument.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$bottom = function(receiver) {
    return receiver.bottom;
  };
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$right = function(receiver) {
    return receiver.right;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _ClientRectList() {
  }
  _ClientRectList.builtin$cls = "_ClientRectList";
  if (!"name" in _ClientRectList)
    _ClientRectList.name = "_ClientRectList";
  $desc = $collectedClasses._ClientRectList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRectList.prototype = $desc;
  function _DocumentType() {
  }
  _DocumentType.builtin$cls = "_DocumentType";
  if (!"name" in _DocumentType)
    _DocumentType.name = "_DocumentType";
  $desc = $collectedClasses._DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DocumentType.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  AElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function DiscardElement() {
  }
  DiscardElement.builtin$cls = "DiscardElement";
  if (!"name" in DiscardElement)
    DiscardElement.name = "DiscardElement";
  $desc = $collectedClasses.DiscardElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DiscardElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  FEBlendElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEBlendElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEColorMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  FEComponentTransferElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEComponentTransferElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FECompositeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  FEConvolveMatrixElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEConvolveMatrixElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  FEDiffuseLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDiffuseLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  FEDisplacementMapElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEDisplacementMapElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  FEFloodElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEFloodElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  FEGaussianBlurElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEGaussianBlurElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEImageElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  FEMergeElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMergeElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEMorphologyElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  FEOffsetElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEOffsetElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  FEPointLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FEPointLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  FESpecularLightingElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpecularLightingElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  FESpotLightElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FESpotLightElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  FETileElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETileElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FETurbulenceElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  FilterElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  ForeignObjectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ForeignObjectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GeometryElement() {
  }
  GeometryElement.builtin$cls = "GeometryElement";
  if (!"name" in GeometryElement)
    GeometryElement.name = "GeometryElement";
  $desc = $collectedClasses.GeometryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeometryElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  ImageElement0.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  MaskElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  MaskElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  PatternElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  RectElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  RectElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.set$disabled = function(receiver, v) {
    return receiver.disabled = v;
  };
  StyleElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  SvgSvgElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  SvgSvgElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  TextPositioningElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  TextPositioningElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$x = function(receiver) {
    return receiver.x;
  };
  UseElement.prototype.get$y = function(receiver) {
    return receiver.y;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  SqlError.prototype.get$message = function(receiver) {
    return receiver.message;
  };
  function NativeByteBuffer() {
  }
  NativeByteBuffer.builtin$cls = "NativeByteBuffer";
  if (!"name" in NativeByteBuffer)
    NativeByteBuffer.name = "NativeByteBuffer";
  $desc = $collectedClasses.NativeByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteBuffer.prototype = $desc;
  function NativeTypedData() {
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedData.prototype = $desc;
  function NativeByteData() {
  }
  NativeByteData.builtin$cls = "NativeByteData";
  if (!"name" in NativeByteData)
    NativeByteData.name = "NativeByteData";
  $desc = $collectedClasses.NativeByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteData.prototype = $desc;
  function NativeFloat32List() {
  }
  NativeFloat32List.builtin$cls = "NativeFloat32List";
  if (!"name" in NativeFloat32List)
    NativeFloat32List.name = "NativeFloat32List";
  $desc = $collectedClasses.NativeFloat32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat32List.prototype = $desc;
  function NativeFloat64List() {
  }
  NativeFloat64List.builtin$cls = "NativeFloat64List";
  if (!"name" in NativeFloat64List)
    NativeFloat64List.name = "NativeFloat64List";
  $desc = $collectedClasses.NativeFloat64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat64List.prototype = $desc;
  function NativeInt16List() {
  }
  NativeInt16List.builtin$cls = "NativeInt16List";
  if (!"name" in NativeInt16List)
    NativeInt16List.name = "NativeInt16List";
  $desc = $collectedClasses.NativeInt16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt16List.prototype = $desc;
  function NativeInt32List() {
  }
  NativeInt32List.builtin$cls = "NativeInt32List";
  if (!"name" in NativeInt32List)
    NativeInt32List.name = "NativeInt32List";
  $desc = $collectedClasses.NativeInt32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt32List.prototype = $desc;
  function NativeInt8List() {
  }
  NativeInt8List.builtin$cls = "NativeInt8List";
  if (!"name" in NativeInt8List)
    NativeInt8List.name = "NativeInt8List";
  $desc = $collectedClasses.NativeInt8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt8List.prototype = $desc;
  function NativeUint16List() {
  }
  NativeUint16List.builtin$cls = "NativeUint16List";
  if (!"name" in NativeUint16List)
    NativeUint16List.name = "NativeUint16List";
  $desc = $collectedClasses.NativeUint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint16List.prototype = $desc;
  function NativeUint32List() {
  }
  NativeUint32List.builtin$cls = "NativeUint32List";
  if (!"name" in NativeUint32List)
    NativeUint32List.name = "NativeUint32List";
  $desc = $collectedClasses.NativeUint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint32List.prototype = $desc;
  function NativeUint8ClampedList() {
  }
  NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
  if (!"name" in NativeUint8ClampedList)
    NativeUint8ClampedList.name = "NativeUint8ClampedList";
  $desc = $collectedClasses.NativeUint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8ClampedList.prototype = $desc;
  function NativeUint8List() {
  }
  NativeUint8List.builtin$cls = "NativeUint8List";
  if (!"name" in NativeUint8List)
    NativeUint8List.name = "NativeUint8List";
  $desc = $collectedClasses.NativeUint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8List.prototype = $desc;
  function Strings_load_closure(completer_0) {
    this.completer_0 = completer_0;
  }
  Strings_load_closure.builtin$cls = "Strings_load_closure";
  if (!"name" in Strings_load_closure)
    Strings_load_closure.name = "Strings_load_closure";
  $desc = $collectedClasses.Strings_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Strings_load_closure.prototype = $desc;
  function Strings_load__closure(completer_1, request_2) {
    this.completer_1 = completer_1;
    this.request_2 = request_2;
  }
  Strings_load__closure.builtin$cls = "Strings_load__closure";
  if (!"name" in Strings_load__closure)
    Strings_load__closure.name = "Strings_load__closure";
  $desc = $collectedClasses.Strings_load__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Strings_load__closure.prototype = $desc;
  function Strings_load__closure0(completer_3) {
    this.completer_3 = completer_3;
  }
  Strings_load__closure0.builtin$cls = "Strings_load__closure0";
  if (!"name" in Strings_load__closure0)
    Strings_load__closure0.name = "Strings_load__closure0";
  $desc = $collectedClasses.Strings_load__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Strings_load__closure0.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "JSBool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "JSArray";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSArray_forEach_getLength(this_0) {
    this.this_0 = this_0;
  }
  JSArray_forEach_getLength.builtin$cls = "JSArray_forEach_getLength";
  if (!"name" in JSArray_forEach_getLength)
    JSArray_forEach_getLength.name = "JSArray_forEach_getLength";
  $desc = $collectedClasses.JSArray_forEach_getLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray_forEach_getLength.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "JSNumber";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "JSInt";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "JSDouble";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "JSString";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function _CodeUnits(__interceptors$_string) {
    this.__interceptors$_string = __interceptors$_string;
  }
  _CodeUnits.builtin$cls = "_CodeUnits";
  if (!"name" in _CodeUnits)
    _CodeUnits.name = "_CodeUnits";
  $desc = $collectedClasses._CodeUnits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CodeUnits.prototype = $desc;
  function startRootIsolate_closure(box_0, entry_1) {
    this.box_0 = box_0;
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(box_0, entry_2) {
    this.box_0 = box_0;
    this.entry_2 = entry_2;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, initialized, isPaused, delayedEvents, pauseTokens, doneHandlers, _scheduledControlEvents, _isExecutingEvent, errorsAreFatal, errorPorts) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
    this.controlPort = controlPort;
    this.pauseCapability = pauseCapability;
    this.terminateCapability = terminateCapability;
    this.initialized = initialized;
    this.isPaused = isPaused;
    this.delayedEvents = delayedEvents;
    this.pauseTokens = pauseTokens;
    this.doneHandlers = doneHandlers;
    this._scheduledControlEvents = _scheduledControlEvents;
    this._isExecutingEvent = _isExecutingEvent;
    this.errorsAreFatal = errorsAreFatal;
    this.errorPorts = errorPorts;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  _IsolateContext.prototype.get$controlPort = function() {
    return this.controlPort;
  };
  function _IsolateContext_handlePing_respond(responsePort_0) {
    this.responsePort_0 = responsePort_0;
  }
  _IsolateContext_handlePing_respond.builtin$cls = "_IsolateContext_handlePing_respond";
  if (!"name" in _IsolateContext_handlePing_respond)
    _IsolateContext_handlePing_respond.name = "_IsolateContext_handlePing_respond";
  $desc = $collectedClasses._IsolateContext_handlePing_respond;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext_handlePing_respond.prototype = $desc;
  function _EventLoop(events, _activeJsAsyncCount) {
    this.events = events;
    this._activeJsAsyncCount = _activeJsAsyncCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  _IsolateEvent.prototype.get$message = function(receiver) {
    return this.message;
  };
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, startPaused_4, replyTo_5) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.startPaused_4 = startPaused_4;
    this.replyTo_5 = replyTo_5;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function IsolateNatives__startIsolate_runStartFunction(topLevel_0, args_1, message_2, isSpawnUri_3, context_4) {
    this.topLevel_0 = topLevel_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.context_4 = context_4;
  }
  IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
  if (!"name" in IsolateNatives__startIsolate_runStartFunction)
    IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
  $desc = $collectedClasses.IsolateNatives__startIsolate_runStartFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(box_0, this_1, shouldSerialize_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.shouldSerialize_2 = shouldSerialize_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function RawReceivePortImpl(__isolate_helper$_id, _handler, _isClosed) {
    this.__isolate_helper$_id = __isolate_helper$_id;
    this._handler = _handler;
    this._isClosed = _isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$__isolate_helper$_id = function() {
    return this.__isolate_helper$_id;
  };
  RawReceivePortImpl.prototype.get$_isClosed = function() {
    return this._isClosed;
  };
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function TimerImpl$periodic_closure(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl$periodic_closure.builtin$cls = "TimerImpl$periodic_closure";
  if (!"name" in TimerImpl$periodic_closure)
    TimerImpl$periodic_closure.name = "TimerImpl$periodic_closure";
  $desc = $collectedClasses.TimerImpl$periodic_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl$periodic_closure.prototype = $desc;
  function CapabilityImpl(__isolate_helper$_id) {
    this.__isolate_helper$_id = __isolate_helper$_id;
  }
  CapabilityImpl.builtin$cls = "CapabilityImpl";
  if (!"name" in CapabilityImpl)
    CapabilityImpl.name = "CapabilityImpl";
  $desc = $collectedClasses.CapabilityImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CapabilityImpl.prototype = $desc;
  CapabilityImpl.prototype.get$__isolate_helper$_id = function() {
    return this.__isolate_helper$_id;
  };
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  ReflectionInfo.prototype.get$data = function(receiver) {
    return this.data;
  };
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure() {
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, __js_helper$_target, _receiver, __js_helper$_name) {
    this._self = _self;
    this.__js_helper$_target = __js_helper$_target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  CastErrorImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  RuntimeError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RuntimeType() {
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeType.prototype = $desc;
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeFunctionType.prototype = $desc;
  function DynamicRuntimeType() {
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicRuntimeType.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(pattern, _nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this.pattern = pattern;
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  function _AllMatchesIterable(_re, _string, _start) {
    this._re = _re;
    this._string = _string;
    this._start = _start;
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterable.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, _nextIndex, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this._nextIndex = _nextIndex;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, __internal$_start, _endOrLength) {
    this._iterable = _iterable;
    this.__internal$_start = __internal$_start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, __internal$_length, _index, _current) {
    this._iterable = _iterable;
    this.__internal$_length = __internal$_length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(__internal$_source, _f) {
    this.__internal$_source = __internal$_source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function IterableMixinWorkaround() {
  }
  IterableMixinWorkaround.builtin$cls = "IterableMixinWorkaround";
  if (!"name" in IterableMixinWorkaround)
    IterableMixinWorkaround.name = "IterableMixinWorkaround";
  $desc = $collectedClasses.IterableMixinWorkaround;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableMixinWorkaround.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function ReversedListIterable(__internal$_source) {
    this.__internal$_source = __internal$_source;
  }
  ReversedListIterable.builtin$cls = "ReversedListIterable";
  if (!"name" in ReversedListIterable)
    ReversedListIterable.name = "ReversedListIterable";
  $desc = $collectedClasses.ReversedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReversedListIterable.prototype = $desc;
  function _AsyncRun__initializeScheduleImmediate_internalCallback(box_0) {
    this.box_0 = box_0;
  }
  _AsyncRun__initializeScheduleImmediate_internalCallback.builtin$cls = "_AsyncRun__initializeScheduleImmediate_internalCallback";
  if (!"name" in _AsyncRun__initializeScheduleImmediate_internalCallback)
    _AsyncRun__initializeScheduleImmediate_internalCallback.name = "_AsyncRun__initializeScheduleImmediate_internalCallback";
  $desc = $collectedClasses._AsyncRun__initializeScheduleImmediate_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__initializeScheduleImmediate_internalCallback.prototype = $desc;
  function _AsyncRun__initializeScheduleImmediate_closure(box_0, div_1, span_2) {
    this.box_0 = box_0;
    this.div_1 = div_1;
    this.span_2 = span_2;
  }
  _AsyncRun__initializeScheduleImmediate_closure.builtin$cls = "_AsyncRun__initializeScheduleImmediate_closure";
  if (!"name" in _AsyncRun__initializeScheduleImmediate_closure)
    _AsyncRun__initializeScheduleImmediate_closure.name = "_AsyncRun__initializeScheduleImmediate_closure";
  $desc = $collectedClasses._AsyncRun__initializeScheduleImmediate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__initializeScheduleImmediate_closure.prototype = $desc;
  function _AsyncRun__scheduleImmediateJsOverride_internalCallback(callback_0) {
    this.callback_0 = callback_0;
  }
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  if (!"name" in _AsyncRun__scheduleImmediateJsOverride_internalCallback)
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.name = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  $desc = $collectedClasses._AsyncRun__scheduleImmediateJsOverride_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = $desc;
  function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(callback_0) {
    this.callback_0 = callback_0;
  }
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
  if (!"name" in _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback)
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.name = "_AsyncRun__scheduleImmediateWithSetImmediate_internalCallback";
  $desc = $collectedClasses._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = $desc;
  function _UncaughtAsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _UncaughtAsyncError.builtin$cls = "_UncaughtAsyncError";
  if (!"name" in _UncaughtAsyncError)
    _UncaughtAsyncError.name = "_UncaughtAsyncError";
  $desc = $collectedClasses._UncaughtAsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _UncaughtAsyncError.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0, eagerError_1, result_2) {
    this.box_0 = box_0;
    this.eagerError_1 = eagerError_1;
    this.result_2 = result_2;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, eagerError_3, result_4, pos_5) {
    this.box_0 = box_0;
    this.eagerError_3 = eagerError_3;
    this.result_4 = result_4;
    this.pos_5 = pos_5;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
  if (!"name" in _Future__chainForeignFuture_closure)
    _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
  $desc = $collectedClasses._Future__chainForeignFuture_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
  if (!"name" in _Future__chainForeignFuture_closure0)
    _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
  $desc = $collectedClasses._Future__chainForeignFuture_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, coreFuture_1) {
    this.this_0 = this_0;
    this.coreFuture_1 = coreFuture_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncComplete_closure0(this_2, value_3) {
    this.this_2 = this_2;
    this.value_3 = value_3;
  }
  _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
  if (!"name" in _Future__asyncComplete_closure0)
    _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
  $desc = $collectedClasses._Future__asyncComplete_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure0.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_handleValueCallback(box_1, listener_3, sourceValue_4, zone_5) {
    this.box_1 = box_1;
    this.listener_3 = listener_3;
    this.sourceValue_4 = sourceValue_4;
    this.zone_5 = zone_5;
  }
  _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
  if (!"name" in _Future__propagateToListeners_handleValueCallback)
    _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleValueCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleValueCallback.prototype = $desc;
  function _Future__propagateToListeners_handleError(box_2, box_1, listener_6, zone_7) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.listener_6 = listener_6;
    this.zone_7 = zone_7;
  }
  _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
  if (!"name" in _Future__propagateToListeners_handleError)
    _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
  $desc = $collectedClasses._Future__propagateToListeners_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleError.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback(box_2, box_1, hasError_8, listener_9, zone_10) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_8 = hasError_8;
    this.listener_9 = listener_9;
    this.zone_10 = zone_10;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback)
    _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure(box_2, listener_11) {
    this.box_2 = box_2;
    this.listener_11 = listener_11;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(box_0, listener_12) {
    this.box_0 = box_0;
    this.listener_12 = listener_12;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
  function _AsyncCallbackEntry(callback, next) {
    this.callback = callback;
    this.next = next;
  }
  _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
  if (!"name" in _AsyncCallbackEntry)
    _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
  $desc = $collectedClasses._AsyncCallbackEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCallbackEntry.prototype = $desc;
  _AsyncCallbackEntry.prototype.get$next = function() {
    return this.next;
  };
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_contains_closure(box_0, this_1, needle_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.needle_2 = needle_2;
    this.future_3 = future_3;
  }
  Stream_contains_closure.builtin$cls = "Stream_contains_closure";
  if (!"name" in Stream_contains_closure)
    Stream_contains_closure.name = "Stream_contains_closure";
  $desc = $collectedClasses.Stream_contains_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure.prototype = $desc;
  function Stream_contains__closure(needle_4, element_5) {
    this.needle_4 = needle_4;
    this.element_5 = element_5;
  }
  Stream_contains__closure.builtin$cls = "Stream_contains__closure";
  if (!"name" in Stream_contains__closure)
    Stream_contains__closure.name = "Stream_contains__closure";
  $desc = $collectedClasses.Stream_contains__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure.prototype = $desc;
  function Stream_contains__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
  if (!"name" in Stream_contains__closure0)
    Stream_contains__closure0.name = "Stream_contains__closure0";
  $desc = $collectedClasses.Stream_contains__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure0.prototype = $desc;
  function Stream_contains_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
  if (!"name" in Stream_contains_closure0)
    Stream_contains_closure0.name = "Stream_contains_closure0";
  $desc = $collectedClasses.Stream_contains_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure0.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _DelayedEvent() {
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function Timer() {
  }
  Timer.builtin$cls = "Timer";
  if (!"name" in Timer)
    Timer.name = "Timer";
  $desc = $collectedClasses.Timer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Timer.prototype = $desc;
  function AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  AsyncError.builtin$cls = "AsyncError";
  if (!"name" in AsyncError)
    AsyncError.name = "AsyncError";
  $desc = $collectedClasses.AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AsyncError.prototype = $desc;
  AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _Zone() {
  }
  _Zone.builtin$cls = "_Zone";
  if (!"name" in _Zone)
    _Zone.name = "_Zone";
  $desc = $collectedClasses._Zone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Zone.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _RootZone_bindCallback_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _RootZone_bindCallback_closure.builtin$cls = "_RootZone_bindCallback_closure";
  if (!"name" in _RootZone_bindCallback_closure)
    _RootZone_bindCallback_closure.name = "_RootZone_bindCallback_closure";
  $desc = $collectedClasses._RootZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindCallback_closure.prototype = $desc;
  function _RootZone_bindCallback_closure0(this_2, f_3) {
    this.this_2 = this_2;
    this.f_3 = f_3;
  }
  _RootZone_bindCallback_closure0.builtin$cls = "_RootZone_bindCallback_closure0";
  if (!"name" in _RootZone_bindCallback_closure0)
    _RootZone_bindCallback_closure0.name = "_RootZone_bindCallback_closure0";
  $desc = $collectedClasses._RootZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindCallback_closure0.prototype = $desc;
  function _RootZone_bindUnaryCallback_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _RootZone_bindUnaryCallback_closure.builtin$cls = "_RootZone_bindUnaryCallback_closure";
  if (!"name" in _RootZone_bindUnaryCallback_closure)
    _RootZone_bindUnaryCallback_closure.name = "_RootZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._RootZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindUnaryCallback_closure.prototype = $desc;
  function _RootZone_bindUnaryCallback_closure0(this_2, f_3) {
    this.this_2 = this_2;
    this.f_3 = f_3;
  }
  _RootZone_bindUnaryCallback_closure0.builtin$cls = "_RootZone_bindUnaryCallback_closure0";
  if (!"name" in _RootZone_bindUnaryCallback_closure0)
    _RootZone_bindUnaryCallback_closure0.name = "_RootZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._RootZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone_bindUnaryCallback_closure0.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _keys, _offset, _collection$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _collection$_value, _next, _previous) {
    this._key = _key;
    this._collection$_value = _collection$_value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_collection$_value = function() {
    return this._collection$_value;
  };
  LinkedHashMapCell.prototype.set$_collection$_value = function(v) {
    return this._collection$_value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet(_collection$_length, _strings, _nums, _rest, _collection$_elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._collection$_elements = _collection$_elements;
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function HashSetIterator(_set, _collection$_elements, _offset, _collection$_current) {
    this._set = _set;
    this._collection$_elements = _collection$_elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_collection$_element, _next, _previous) {
    this._collection$_element = _collection$_element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_collection$_element = function() {
    return this._collection$_element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function UnmodifiableListView(_collection$_source) {
    this._collection$_source = _collection$_source;
  }
  UnmodifiableListView.builtin$cls = "UnmodifiableListView";
  if (!"name" in UnmodifiableListView)
    UnmodifiableListView.name = "UnmodifiableListView";
  $desc = $collectedClasses.UnmodifiableListView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListView.prototype = $desc;
  function HashMap() {
  }
  HashMap.builtin$cls = "HashMap";
  if (!"name" in HashMap)
    HashMap.name = "HashMap";
  $desc = $collectedClasses.HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMap.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function Object_ListMixin() {
  }
  Object_ListMixin.builtin$cls = "Object_ListMixin";
  if (!"name" in Object_ListMixin)
    Object_ListMixin.name = "Object_ListMixin";
  $desc = $collectedClasses.Object_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_ListMixin.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function SetMixin() {
  }
  SetMixin.builtin$cls = "SetMixin";
  if (!"name" in SetMixin)
    SetMixin.name = "SetMixin";
  $desc = $collectedClasses.SetMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetMixin.prototype = $desc;
  function SetBase() {
  }
  SetBase.builtin$cls = "SetBase";
  if (!"name" in SetBase)
    SetBase.name = "SetBase";
  $desc = $collectedClasses.SetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetBase.prototype = $desc;
  function _JsonMap(_original, _processed, _data) {
    this._original = _original;
    this._processed = _processed;
    this._data = _data;
  }
  _JsonMap.builtin$cls = "_JsonMap";
  if (!"name" in _JsonMap)
    _JsonMap.name = "_JsonMap";
  $desc = $collectedClasses._JsonMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonMap.prototype = $desc;
  function _JsonMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _JsonMap_values_closure.builtin$cls = "_JsonMap_values_closure";
  if (!"name" in _JsonMap_values_closure)
    _JsonMap_values_closure.name = "_JsonMap_values_closure";
  $desc = $collectedClasses._JsonMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsonMap_values_closure.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function JsonCodec(_reviver, _toEncodable) {
    this._reviver = _reviver;
    this._toEncodable = _toEncodable;
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Decoder.prototype = $desc;
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder.prototype = $desc;
  function _Utf8Decoder_convert_scanOneByteCharacters(endIndex_0) {
    this.endIndex_0 = endIndex_0;
  }
  _Utf8Decoder_convert_scanOneByteCharacters.builtin$cls = "_Utf8Decoder_convert_scanOneByteCharacters";
  if (!"name" in _Utf8Decoder_convert_scanOneByteCharacters)
    _Utf8Decoder_convert_scanOneByteCharacters.name = "_Utf8Decoder_convert_scanOneByteCharacters";
  $desc = $collectedClasses._Utf8Decoder_convert_scanOneByteCharacters;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder_convert_scanOneByteCharacters.prototype = $desc;
  function _Utf8Decoder_convert_addSingleBytes(this_1, codeUnits_2, startIndex_3, endIndex_4) {
    this.this_1 = this_1;
    this.codeUnits_2 = codeUnits_2;
    this.startIndex_3 = startIndex_3;
    this.endIndex_4 = endIndex_4;
  }
  _Utf8Decoder_convert_addSingleBytes.builtin$cls = "_Utf8Decoder_convert_addSingleBytes";
  if (!"name" in _Utf8Decoder_convert_addSingleBytes)
    _Utf8Decoder_convert_addSingleBytes.name = "_Utf8Decoder_convert_addSingleBytes";
  $desc = $collectedClasses._Utf8Decoder_convert_addSingleBytes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder_convert_addSingleBytes.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function bool() {
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bool.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function $double() {
  }
  $double.builtin$cls = "$double";
  if (!"name" in $double)
    $double.name = "$double";
  $desc = $collectedClasses.$double;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $double.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  ArgumentError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  UnsupportedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  UnimplementedError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  StateError.prototype.get$message = function(receiver) {
    return this.message;
  };
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  _ExceptionImplementation.prototype.get$message = function(receiver) {
    return this.message;
  };
  function FormatException(message, source, offset) {
    this.message = message;
    this.source = source;
    this.offset = offset;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  FormatException.prototype.get$message = function(receiver) {
    return this.message;
  };
  FormatException.prototype.get$offset = function(receiver) {
    return this.offset;
  };
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function $int() {
  }
  $int.builtin$cls = "$int";
  if (!"name" in $int)
    $int.name = "$int";
  $desc = $collectedClasses.$int;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $int.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function List() {
  }
  List.builtin$cls = "List";
  if (!"name" in List)
    List.name = "List";
  $desc = $collectedClasses.List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  List.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function num() {
  }
  num.builtin$cls = "num";
  if (!"name" in num)
    num.name = "num";
  $desc = $collectedClasses.num;
  if ($desc instanceof Array)
    $desc = $desc[1];
  num.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Pattern() {
  }
  Pattern.builtin$cls = "Pattern";
  if (!"name" in Pattern)
    Pattern.name = "Pattern";
  $desc = $collectedClasses.Pattern;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Pattern.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function String() {
  }
  String.builtin$cls = "String";
  if (!"name" in String)
    String.name = "String";
  $desc = $collectedClasses.String;
  if ($desc instanceof Array)
    $desc = $desc[1];
  String.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol() {
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function _CssStyleDeclarationSet(_elementIterable, _elementCssStyleDeclarationSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssStyleDeclarationSetIterable = _elementCssStyleDeclarationSetIterable;
  }
  _CssStyleDeclarationSet.builtin$cls = "_CssStyleDeclarationSet";
  if (!"name" in _CssStyleDeclarationSet)
    _CssStyleDeclarationSet.name = "_CssStyleDeclarationSet";
  $desc = $collectedClasses._CssStyleDeclarationSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssStyleDeclarationSet.prototype = $desc;
  function Object_CssStyleDeclarationBase() {
  }
  Object_CssStyleDeclarationBase.builtin$cls = "Object_CssStyleDeclarationBase";
  if (!"name" in Object_CssStyleDeclarationBase)
    Object_CssStyleDeclarationBase.name = "Object_CssStyleDeclarationBase";
  $desc = $collectedClasses.Object_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object_CssStyleDeclarationBase.prototype = $desc;
  function _CssStyleDeclarationSet_closure() {
  }
  _CssStyleDeclarationSet_closure.builtin$cls = "_CssStyleDeclarationSet_closure";
  if (!"name" in _CssStyleDeclarationSet_closure)
    _CssStyleDeclarationSet_closure.name = "_CssStyleDeclarationSet_closure";
  $desc = $collectedClasses._CssStyleDeclarationSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssStyleDeclarationSet_closure.prototype = $desc;
  function _CssStyleDeclarationSet_setProperty_closure(propertyName_0, value_1, priority_2) {
    this.propertyName_0 = propertyName_0;
    this.value_1 = value_1;
    this.priority_2 = priority_2;
  }
  _CssStyleDeclarationSet_setProperty_closure.builtin$cls = "_CssStyleDeclarationSet_setProperty_closure";
  if (!"name" in _CssStyleDeclarationSet_setProperty_closure)
    _CssStyleDeclarationSet_setProperty_closure.name = "_CssStyleDeclarationSet_setProperty_closure";
  $desc = $collectedClasses._CssStyleDeclarationSet_setProperty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CssStyleDeclarationSet_setProperty_closure.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_element, _childElements) {
    this._element = _element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function HttpRequest_getString_closure() {
  }
  HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
  if (!"name" in HttpRequest_getString_closure)
    HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
  $desc = $collectedClasses.HttpRequest_getString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_getString_closure.prototype = $desc;
  function HttpRequest_request_closure0(xhr_0) {
    this.xhr_0 = xhr_0;
  }
  HttpRequest_request_closure0.builtin$cls = "HttpRequest_request_closure0";
  if (!"name" in HttpRequest_request_closure0)
    HttpRequest_request_closure0.name = "HttpRequest_request_closure0";
  $desc = $collectedClasses.HttpRequest_request_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure0.prototype = $desc;
  function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  }
  HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
  if (!"name" in HttpRequest_request_closure)
    HttpRequest_request_closure.name = "HttpRequest_request_closure";
  $desc = $collectedClasses.HttpRequest_request_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function SelectElement_options_closure() {
  }
  SelectElement_options_closure.builtin$cls = "SelectElement_options_closure";
  if (!"name" in SelectElement_options_closure)
    SelectElement_options_closure.name = "SelectElement_options_closure";
  $desc = $collectedClasses.SelectElement_options_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement_options_closure.prototype = $desc;
  function SelectElement_selectedOptions_closure() {
  }
  SelectElement_selectedOptions_closure.builtin$cls = "SelectElement_selectedOptions_closure";
  if (!"name" in SelectElement_selectedOptions_closure)
    SelectElement_selectedOptions_closure.name = "SelectElement_selectedOptions_closure";
  $desc = $collectedClasses.SelectElement_selectedOptions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement_selectedOptions_closure.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function Interceptor_ListMixin2() {
  }
  Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
  if (!"name" in Interceptor_ListMixin2)
    Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin2.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin2() {
  }
  Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin2)
    Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _ElementAttributeMap(_element) {
    this._element = _element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _ElementCssClassSet(_element) {
    this._element = _element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function FixedSizeListIterator(_array, _length, _position, _html$_current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function Capability() {
  }
  Capability.builtin$cls = "Capability";
  if (!"name" in Capability)
    Capability.name = "Capability";
  $desc = $collectedClasses.Capability;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Capability.prototype = $desc;
  function _JSRandom() {
  }
  _JSRandom.builtin$cls = "_JSRandom";
  if (!"name" in _JSRandom)
    _JSRandom.name = "_JSRandom";
  $desc = $collectedClasses._JSRandom;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JSRandom.prototype = $desc;
  function Point(x, y) {
    this.x = x;
    this.y = y;
  }
  Point.builtin$cls = "Point";
  if (!"name" in Point)
    Point.name = "Point";
  $desc = $collectedClasses.Point;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point.prototype = $desc;
  Point.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point.prototype.get$y = function(receiver) {
    return this.y;
  };
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function Rectangle(left, top, width, height) {
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
  }
  Rectangle.builtin$cls = "Rectangle";
  if (!"name" in Rectangle)
    Rectangle.name = "Rectangle";
  $desc = $collectedClasses.Rectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Rectangle.prototype = $desc;
  Rectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  Rectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  Rectangle.prototype.get$width = function(receiver) {
    return this.width;
  };
  Rectangle.prototype.get$height = function(receiver) {
    return this.height;
  };
  function NativeTypedArray() {
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray.prototype = $desc;
  function NativeTypedArrayOfDouble() {
  }
  NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
  if (!"name" in NativeTypedArrayOfDouble)
    NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
  $desc = $collectedClasses.NativeTypedArrayOfDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfDouble.prototype = $desc;
  function NativeTypedArray_ListMixin() {
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function NativeTypedArrayOfInt() {
  }
  NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
  if (!"name" in NativeTypedArrayOfInt)
    NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
  $desc = $collectedClasses.NativeTypedArrayOfInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfInt.prototype = $desc;
  function NativeTypedArray_ListMixin0() {
  }
  NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
  if (!"name" in NativeTypedArray_ListMixin0)
    NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin0.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin0)
    NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function AttributeDialog(el, ref, attRefs, controls, okfct) {
    this.el = el;
    this.ref = ref;
    this.attRefs = attRefs;
    this.controls = controls;
    this.okfct = okfct;
  }
  AttributeDialog.builtin$cls = "AttributeDialog";
  if (!"name" in AttributeDialog)
    AttributeDialog.name = "AttributeDialog";
  $desc = $collectedClasses.AttributeDialog;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog.prototype = $desc;
  AttributeDialog.prototype.get$ref = function() {
    return this.ref;
  };
  AttributeDialog.prototype.set$ref = function(v) {
    return this.ref = v;
  };
  function AttributeDialog_show_closure(this_0, attref_1) {
    this.this_0 = this_0;
    this.attref_1 = attref_1;
  }
  AttributeDialog_show_closure.builtin$cls = "AttributeDialog_show_closure";
  if (!"name" in AttributeDialog_show_closure)
    AttributeDialog_show_closure.name = "AttributeDialog_show_closure";
  $desc = $collectedClasses.AttributeDialog_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog_show_closure.prototype = $desc;
  function AttributeDialog_show_closure0(this_2) {
    this.this_2 = this_2;
  }
  AttributeDialog_show_closure0.builtin$cls = "AttributeDialog_show_closure0";
  if (!"name" in AttributeDialog_show_closure0)
    AttributeDialog_show_closure0.name = "AttributeDialog_show_closure0";
  $desc = $collectedClasses.AttributeDialog_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog_show_closure0.prototype = $desc;
  function AttributeDialog_show_closure1(this_3) {
    this.this_3 = this_3;
  }
  AttributeDialog_show_closure1.builtin$cls = "AttributeDialog_show_closure1";
  if (!"name" in AttributeDialog_show_closure1)
    AttributeDialog_show_closure1.name = "AttributeDialog_show_closure1";
  $desc = $collectedClasses.AttributeDialog_show_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog_show_closure1.prototype = $desc;
  function AttributeDialog_showOnInsert_closure(this_0, attref_1) {
    this.this_0 = this_0;
    this.attref_1 = attref_1;
  }
  AttributeDialog_showOnInsert_closure.builtin$cls = "AttributeDialog_showOnInsert_closure";
  if (!"name" in AttributeDialog_showOnInsert_closure)
    AttributeDialog_showOnInsert_closure.name = "AttributeDialog_showOnInsert_closure";
  $desc = $collectedClasses.AttributeDialog_showOnInsert_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog_showOnInsert_closure.prototype = $desc;
  function AttributeDialog_showOnInsert_closure0(this_2) {
    this.this_2 = this_2;
  }
  AttributeDialog_showOnInsert_closure0.builtin$cls = "AttributeDialog_showOnInsert_closure0";
  if (!"name" in AttributeDialog_showOnInsert_closure0)
    AttributeDialog_showOnInsert_closure0.name = "AttributeDialog_showOnInsert_closure0";
  $desc = $collectedClasses.AttributeDialog_showOnInsert_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog_showOnInsert_closure0.prototype = $desc;
  function AttributeDialog_showOnInsert_closure1(this_3) {
    this.this_3 = this_3;
  }
  AttributeDialog_showOnInsert_closure1.builtin$cls = "AttributeDialog_showOnInsert_closure1";
  if (!"name" in AttributeDialog_showOnInsert_closure1)
    AttributeDialog_showOnInsert_closure1.name = "AttributeDialog_showOnInsert_closure1";
  $desc = $collectedClasses.AttributeDialog_showOnInsert_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttributeDialog_showOnInsert_closure1.prototype = $desc;
  function Config(_cfgroot, schemaURL, _cfgdir, _elementDisplayCache, _elementsToNamesCache, _elementsTitlesCache, _insertCache, _validPatternCache, _parametersCache, _namespaceCache, _schema, _languageNode, _savingNode, _menusNode, _displayNode, _exportsNode, _listeStrings) {
    this._cfgroot = _cfgroot;
    this.schemaURL = schemaURL;
    this._cfgdir = _cfgdir;
    this._elementDisplayCache = _elementDisplayCache;
    this._elementsToNamesCache = _elementsToNamesCache;
    this._elementsTitlesCache = _elementsTitlesCache;
    this._insertCache = _insertCache;
    this._validPatternCache = _validPatternCache;
    this._parametersCache = _parametersCache;
    this._namespaceCache = _namespaceCache;
    this._schema = _schema;
    this._languageNode = _languageNode;
    this._savingNode = _savingNode;
    this._menusNode = _menusNode;
    this._displayNode = _displayNode;
    this._exportsNode = _exportsNode;
    this._listeStrings = _listeStrings;
  }
  Config.builtin$cls = "Config";
  if (!"name" in Config)
    Config.name = "Config";
  $desc = $collectedClasses.Config;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config.prototype = $desc;
  function Config_load_closure(this_0, cfgFilePath_1, schemaFilePath_2, completer_3) {
    this.this_0 = this_0;
    this.cfgFilePath_1 = cfgFilePath_1;
    this.schemaFilePath_2 = schemaFilePath_2;
    this.completer_3 = completer_3;
  }
  Config_load_closure.builtin$cls = "Config_load_closure";
  if (!"name" in Config_load_closure)
    Config_load_closure.name = "Config_load_closure";
  $desc = $collectedClasses.Config_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config_load_closure.prototype = $desc;
  function Config_load__closure(this_4, completer_5) {
    this.this_4 = this_4;
    this.completer_5 = completer_5;
  }
  Config_load__closure.builtin$cls = "Config_load__closure";
  if (!"name" in Config_load__closure)
    Config_load__closure.name = "Config_load__closure";
  $desc = $collectedClasses.Config_load__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config_load__closure.prototype = $desc;
  function Config_load__closure0(completer_6) {
    this.completer_6 = completer_6;
  }
  Config_load__closure0.builtin$cls = "Config_load__closure0";
  if (!"name" in Config_load__closure0)
    Config_load__closure0.name = "Config_load__closure0";
  $desc = $collectedClasses.Config_load__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config_load__closure0.prototype = $desc;
  function Config_load_closure0(cfgFilePath_7, completer_8) {
    this.cfgFilePath_7 = cfgFilePath_7;
    this.completer_8 = completer_8;
  }
  Config_load_closure0.builtin$cls = "Config_load_closure0";
  if (!"name" in Config_load_closure0)
    Config_load_closure0.name = "Config_load_closure0";
  $desc = $collectedClasses.Config_load_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config_load_closure0.prototype = $desc;
  function Config__creationMenu_closure(box_0, doc_1) {
    this.box_0 = box_0;
    this.doc_1 = doc_1;
  }
  Config__creationMenu_closure.builtin$cls = "Config__creationMenu_closure";
  if (!"name" in Config__creationMenu_closure)
    Config__creationMenu_closure.name = "Config__creationMenu_closure";
  $desc = $collectedClasses.Config__creationMenu_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config__creationMenu_closure.prototype = $desc;
  function Config__creationMenu_closure0(doc_2, fonction_3, classe_4) {
    this.doc_2 = doc_2;
    this.fonction_3 = fonction_3;
    this.classe_4 = classe_4;
  }
  Config__creationMenu_closure0.builtin$cls = "Config__creationMenu_closure0";
  if (!"name" in Config__creationMenu_closure0)
    Config__creationMenu_closure0.name = "Config__creationMenu_closure0";
  $desc = $collectedClasses.Config__creationMenu_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Config__creationMenu_closure0.prototype = $desc;
  function Cursor(ta, caret, selectionStart, selectionEnd, spansSelection, selectedNodes, visible, timer, shortcuts, isime) {
    this.ta = ta;
    this.caret = caret;
    this.selectionStart = selectionStart;
    this.selectionEnd = selectionEnd;
    this.spansSelection = spansSelection;
    this.selectedNodes = selectedNodes;
    this.visible = visible;
    this.timer = timer;
    this.shortcuts = shortcuts;
    this.isime = isime;
  }
  Cursor.builtin$cls = "Cursor";
  if (!"name" in Cursor)
    Cursor.name = "Cursor";
  $desc = $collectedClasses.Cursor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cursor.prototype = $desc;
  function Cursor_closure(this_0) {
    this.this_0 = this_0;
  }
  Cursor_closure.builtin$cls = "Cursor_closure";
  if (!"name" in Cursor_closure)
    Cursor_closure.name = "Cursor_closure";
  $desc = $collectedClasses.Cursor_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cursor_closure.prototype = $desc;
  function Cursor_closure0(this_1) {
    this.this_1 = this_1;
  }
  Cursor_closure0.builtin$cls = "Cursor_closure0";
  if (!"name" in Cursor_closure0)
    Cursor_closure0.name = "Cursor_closure0";
  $desc = $collectedClasses.Cursor_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cursor_closure0.prototype = $desc;
  function Cursor_closure1(this_2) {
    this.this_2 = this_2;
  }
  Cursor_closure1.builtin$cls = "Cursor_closure1";
  if (!"name" in Cursor_closure1)
    Cursor_closure1.name = "Cursor_closure1";
  $desc = $collectedClasses.Cursor_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cursor_closure1.prototype = $desc;
  function Cursor_newTimer_closure(this_0) {
    this.this_0 = this_0;
  }
  Cursor_newTimer_closure.builtin$cls = "Cursor_newTimer_closure";
  if (!"name" in Cursor_newTimer_closure)
    Cursor_newTimer_closure.name = "Cursor_newTimer_closure";
  $desc = $collectedClasses.Cursor_newTimer_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Cursor_newTimer_closure.prototype = $desc;
  function main_closure() {
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure.prototype = $desc;
  function DaxeAttr(namespaceURI, prefix, localName, value) {
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.value = value;
  }
  DaxeAttr.builtin$cls = "DaxeAttr";
  if (!"name" in DaxeAttr)
    DaxeAttr.name = "DaxeAttr";
  $desc = $collectedClasses.DaxeAttr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeAttr.prototype = $desc;
  DaxeAttr.prototype.get$namespaceURI = function() {
    return this.namespaceURI;
  };
  DaxeAttr.prototype.get$prefix = function() {
    return this.prefix;
  };
  DaxeAttr.prototype.set$prefix = function(v) {
    return this.prefix = v;
  };
  DaxeAttr.prototype.get$localName = function(receiver) {
    return this.localName;
  };
  DaxeAttr.prototype.get$value = function(receiver) {
    return this.value;
  };
  DaxeAttr.prototype.set$value = function(receiver, v) {
    return this.value = v;
  };
  function DaxeDocument(_id_count, _idToJN, dndoc, cfg, edits, undoPosition, filePath, saveURL, textAreaId, rootNum, schemaPath) {
    this._id_count = _id_count;
    this._idToJN = _idToJN;
    this.dndoc = dndoc;
    this.cfg = cfg;
    this.edits = edits;
    this.undoPosition = undoPosition;
    this.filePath = filePath;
    this.saveURL = saveURL;
    this.textAreaId = textAreaId;
    this.rootNum = rootNum;
    this.schemaPath = schemaPath;
  }
  DaxeDocument.builtin$cls = "DaxeDocument";
  if (!"name" in DaxeDocument)
    DaxeDocument.name = "DaxeDocument";
  $desc = $collectedClasses.DaxeDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument.prototype = $desc;
  function DaxeDocument_openDocument_closure(this_0, filePath_1, completer_2) {
    this.this_0 = this_0;
    this.filePath_1 = filePath_1;
    this.completer_2 = completer_2;
  }
  DaxeDocument_openDocument_closure.builtin$cls = "DaxeDocument_openDocument_closure";
  if (!"name" in DaxeDocument_openDocument_closure)
    DaxeDocument_openDocument_closure.name = "DaxeDocument_openDocument_closure";
  $desc = $collectedClasses.DaxeDocument_openDocument_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_openDocument_closure.prototype = $desc;
  function DaxeDocument_openDocument__closure(this_3, completer_4) {
    this.this_3 = this_3;
    this.completer_4 = completer_4;
  }
  DaxeDocument_openDocument__closure.builtin$cls = "DaxeDocument_openDocument__closure";
  if (!"name" in DaxeDocument_openDocument__closure)
    DaxeDocument_openDocument__closure.name = "DaxeDocument_openDocument__closure";
  $desc = $collectedClasses.DaxeDocument_openDocument__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_openDocument__closure.prototype = $desc;
  function DaxeDocument_openDocument__closure0(this_5, filePath_6, completer_7) {
    this.this_5 = this_5;
    this.filePath_6 = filePath_6;
    this.completer_7 = completer_7;
  }
  DaxeDocument_openDocument__closure0.builtin$cls = "DaxeDocument_openDocument__closure0";
  if (!"name" in DaxeDocument_openDocument__closure0)
    DaxeDocument_openDocument__closure0.name = "DaxeDocument_openDocument__closure0";
  $desc = $collectedClasses.DaxeDocument_openDocument__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_openDocument__closure0.prototype = $desc;
  function DaxeDocument_openDocument_closure0(configPath_8, completer_9) {
    this.configPath_8 = configPath_8;
    this.completer_9 = completer_9;
  }
  DaxeDocument_openDocument_closure0.builtin$cls = "DaxeDocument_openDocument_closure0";
  if (!"name" in DaxeDocument_openDocument_closure0)
    DaxeDocument_openDocument_closure0.name = "DaxeDocument_openDocument_closure0";
  $desc = $collectedClasses.DaxeDocument_openDocument_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_openDocument_closure0.prototype = $desc;
  function DaxeDocument_openDocumentFromPost_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  }
  DaxeDocument_openDocumentFromPost_closure.builtin$cls = "DaxeDocument_openDocumentFromPost_closure";
  if (!"name" in DaxeDocument_openDocumentFromPost_closure)
    DaxeDocument_openDocumentFromPost_closure.name = "DaxeDocument_openDocumentFromPost_closure";
  $desc = $collectedClasses.DaxeDocument_openDocumentFromPost_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_openDocumentFromPost_closure.prototype = $desc;
  function DaxeDocument_openDocumentFromPost__closure(this_2, completer_3) {
    this.this_2 = this_2;
    this.completer_3 = completer_3;
  }
  DaxeDocument_openDocumentFromPost__closure.builtin$cls = "DaxeDocument_openDocumentFromPost__closure";
  if (!"name" in DaxeDocument_openDocumentFromPost__closure)
    DaxeDocument_openDocumentFromPost__closure.name = "DaxeDocument_openDocumentFromPost__closure";
  $desc = $collectedClasses.DaxeDocument_openDocumentFromPost__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_openDocumentFromPost__closure.prototype = $desc;
  function DaxeDocument_getXmlFromPost_closure(box_0, completer_1) {
    this.box_0 = box_0;
    this.completer_1 = completer_1;
  }
  DaxeDocument_getXmlFromPost_closure.builtin$cls = "DaxeDocument_getXmlFromPost_closure";
  if (!"name" in DaxeDocument_getXmlFromPost_closure)
    DaxeDocument_getXmlFromPost_closure.name = "DaxeDocument_getXmlFromPost_closure";
  $desc = $collectedClasses.DaxeDocument_getXmlFromPost_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_getXmlFromPost_closure.prototype = $desc;
  function DaxeDocument_saveOnWebJaxe_closure(completer_0, request_1) {
    this.completer_0 = completer_0;
    this.request_1 = request_1;
  }
  DaxeDocument_saveOnWebJaxe_closure.builtin$cls = "DaxeDocument_saveOnWebJaxe_closure";
  if (!"name" in DaxeDocument_saveOnWebJaxe_closure)
    DaxeDocument_saveOnWebJaxe_closure.name = "DaxeDocument_saveOnWebJaxe_closure";
  $desc = $collectedClasses.DaxeDocument_saveOnWebJaxe_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_saveOnWebJaxe_closure.prototype = $desc;
  function DaxeDocument_saveOnWebJaxe_closure0(completer_2, request_3) {
    this.completer_2 = completer_2;
    this.request_3 = request_3;
  }
  DaxeDocument_saveOnWebJaxe_closure0.builtin$cls = "DaxeDocument_saveOnWebJaxe_closure0";
  if (!"name" in DaxeDocument_saveOnWebJaxe_closure0)
    DaxeDocument_saveOnWebJaxe_closure0.name = "DaxeDocument_saveOnWebJaxe_closure0";
  $desc = $collectedClasses.DaxeDocument_saveOnWebJaxe_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_saveOnWebJaxe_closure0.prototype = $desc;
  function DaxeDocument_insertNewNode_closure(this_0, pos_1, dn_2) {
    this.this_0 = this_0;
    this.pos_1 = pos_1;
    this.dn_2 = dn_2;
  }
  DaxeDocument_insertNewNode_closure.builtin$cls = "DaxeDocument_insertNewNode_closure";
  if (!"name" in DaxeDocument_insertNewNode_closure)
    DaxeDocument_insertNewNode_closure.name = "DaxeDocument_insertNewNode_closure";
  $desc = $collectedClasses.DaxeDocument_insertNewNode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeDocument_insertNewNode_closure.prototype = $desc;
  function DaxeException(message, parentException) {
    this.message = message;
    this.parentException = parentException;
  }
  DaxeException.builtin$cls = "DaxeException";
  if (!"name" in DaxeException)
    DaxeException.name = "DaxeException";
  $desc = $collectedClasses.DaxeException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeException.prototype = $desc;
  DaxeException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function DaxeNode(ref, parent, nodeType, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove) {
    this.ref = ref;
    this.parent = parent;
    this.nodeType = nodeType;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
  }
  DaxeNode.builtin$cls = "DaxeNode";
  if (!"name" in DaxeNode)
    DaxeNode.name = "DaxeNode";
  $desc = $collectedClasses.DaxeNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeNode.prototype = $desc;
  DaxeNode.prototype.get$ref = function() {
    return this.ref;
  };
  DaxeNode.prototype.set$ref = function(v) {
    return this.ref = v;
  };
  DaxeNode.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  DaxeNode.prototype.set$parent = function(receiver, v) {
    return this.parent = v;
  };
  DaxeNode.prototype.get$nodeType = function(receiver) {
    return this.nodeType;
  };
  DaxeNode.prototype.get$prefix = function() {
    return this.prefix;
  };
  DaxeNode.prototype.set$prefix = function(v) {
    return this.prefix = v;
  };
  DaxeNode.prototype.get$localName = function(receiver) {
    return this.localName;
  };
  DaxeNode.prototype.get$nodeValue = function(receiver) {
    return this.nodeValue;
  };
  DaxeNode.prototype.set$nodeValue = function(receiver, v) {
    return this.nodeValue = v;
  };
  DaxeNode.prototype.get$firstChild = function(receiver) {
    return this.firstChild;
  };
  DaxeNode.prototype.set$firstChild = function(receiver, v) {
    return this.firstChild = v;
  };
  DaxeNode.prototype.get$nextSibling = function() {
    return this.nextSibling;
  };
  DaxeNode.prototype.set$nextSibling = function(v) {
    return this.nextSibling = v;
  };
  DaxeNode.prototype.get$attributes = function(receiver) {
    return this.attributes;
  };
  DaxeNode.prototype.set$attributes = function(receiver, v) {
    return this.attributes = v;
  };
  DaxeNode.prototype.get$userCannotRemove = function() {
    return this.userCannotRemove;
  };
  DaxeNode.prototype.set$userCannotRemove = function(v) {
    return this.userCannotRemove = v;
  };
  function FindDialog() {
  }
  FindDialog.builtin$cls = "FindDialog";
  if (!"name" in FindDialog)
    FindDialog.name = "FindDialog";
  $desc = $collectedClasses.FindDialog;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog.prototype = $desc;
  function FindDialog_show_closure(cbCaseSensitive_0) {
    this.cbCaseSensitive_0 = cbCaseSensitive_0;
  }
  FindDialog_show_closure.builtin$cls = "FindDialog_show_closure";
  if (!"name" in FindDialog_show_closure)
    FindDialog_show_closure.name = "FindDialog_show_closure";
  $desc = $collectedClasses.FindDialog_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure.prototype = $desc;
  function FindDialog_show_closure0(cbBackwards_1) {
    this.cbBackwards_1 = cbBackwards_1;
  }
  FindDialog_show_closure0.builtin$cls = "FindDialog_show_closure0";
  if (!"name" in FindDialog_show_closure0)
    FindDialog_show_closure0.name = "FindDialog_show_closure0";
  $desc = $collectedClasses.FindDialog_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure0.prototype = $desc;
  function FindDialog_show_closure1(this_2) {
    this.this_2 = this_2;
  }
  FindDialog_show_closure1.builtin$cls = "FindDialog_show_closure1";
  if (!"name" in FindDialog_show_closure1)
    FindDialog_show_closure1.name = "FindDialog_show_closure1";
  $desc = $collectedClasses.FindDialog_show_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure1.prototype = $desc;
  function FindDialog_show_closure2(this_3) {
    this.this_3 = this_3;
  }
  FindDialog_show_closure2.builtin$cls = "FindDialog_show_closure2";
  if (!"name" in FindDialog_show_closure2)
    FindDialog_show_closure2.name = "FindDialog_show_closure2";
  $desc = $collectedClasses.FindDialog_show_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure2.prototype = $desc;
  function FindDialog_show_closure3(this_4) {
    this.this_4 = this_4;
  }
  FindDialog_show_closure3.builtin$cls = "FindDialog_show_closure3";
  if (!"name" in FindDialog_show_closure3)
    FindDialog_show_closure3.name = "FindDialog_show_closure3";
  $desc = $collectedClasses.FindDialog_show_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure3.prototype = $desc;
  function FindDialog_show_closure4(this_5) {
    this.this_5 = this_5;
  }
  FindDialog_show_closure4.builtin$cls = "FindDialog_show_closure4";
  if (!"name" in FindDialog_show_closure4)
    FindDialog_show_closure4.name = "FindDialog_show_closure4";
  $desc = $collectedClasses.FindDialog_show_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure4.prototype = $desc;
  function FindDialog_show_closure5(this_6) {
    this.this_6 = this_6;
  }
  FindDialog_show_closure5.builtin$cls = "FindDialog_show_closure5";
  if (!"name" in FindDialog_show_closure5)
    FindDialog_show_closure5.name = "FindDialog_show_closure5";
  $desc = $collectedClasses.FindDialog_show_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FindDialog_show_closure5.prototype = $desc;
  function HelpDialog(elementRef, attributeRef) {
    this.elementRef = elementRef;
    this.attributeRef = attributeRef;
  }
  HelpDialog.builtin$cls = "HelpDialog";
  if (!"name" in HelpDialog)
    HelpDialog.name = "HelpDialog";
  $desc = $collectedClasses.HelpDialog;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog.prototype = $desc;
  function HelpDialog_show_closure(this_0) {
    this.this_0 = this_0;
  }
  HelpDialog_show_closure.builtin$cls = "HelpDialog_show_closure";
  if (!"name" in HelpDialog_show_closure)
    HelpDialog_show_closure.name = "HelpDialog_show_closure";
  $desc = $collectedClasses.HelpDialog_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog_show_closure.prototype = $desc;
  function HelpDialog_show_closure0(this_1) {
    this.this_1 = this_1;
  }
  HelpDialog_show_closure0.builtin$cls = "HelpDialog_show_closure0";
  if (!"name" in HelpDialog_show_closure0)
    HelpDialog_show_closure0.name = "HelpDialog_show_closure0";
  $desc = $collectedClasses.HelpDialog_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog_show_closure0.prototype = $desc;
  function HelpDialog_show_closure1(this_2) {
    this.this_2 = this_2;
  }
  HelpDialog_show_closure1.builtin$cls = "HelpDialog_show_closure1";
  if (!"name" in HelpDialog_show_closure1)
    HelpDialog_show_closure1.name = "HelpDialog_show_closure1";
  $desc = $collectedClasses.HelpDialog_show_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog_show_closure1.prototype = $desc;
  function HelpDialog_show_closure2(this_3) {
    this.this_3 = this_3;
  }
  HelpDialog_show_closure2.builtin$cls = "HelpDialog_show_closure2";
  if (!"name" in HelpDialog_show_closure2)
    HelpDialog_show_closure2.name = "HelpDialog_show_closure2";
  $desc = $collectedClasses.HelpDialog_show_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog_show_closure2.prototype = $desc;
  function HelpDialog_fillParents_closure(this_0, parentRef_1) {
    this.this_0 = this_0;
    this.parentRef_1 = parentRef_1;
  }
  HelpDialog_fillParents_closure.builtin$cls = "HelpDialog_fillParents_closure";
  if (!"name" in HelpDialog_fillParents_closure)
    HelpDialog_fillParents_closure.name = "HelpDialog_fillParents_closure";
  $desc = $collectedClasses.HelpDialog_fillParents_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog_fillParents_closure.prototype = $desc;
  function HelpDialog_fillChildren_closure(this_0, childRef_1) {
    this.this_0 = this_0;
    this.childRef_1 = childRef_1;
  }
  HelpDialog_fillChildren_closure.builtin$cls = "HelpDialog_fillChildren_closure";
  if (!"name" in HelpDialog_fillChildren_closure)
    HelpDialog_fillChildren_closure.name = "HelpDialog_fillChildren_closure";
  $desc = $collectedClasses.HelpDialog_fillChildren_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HelpDialog_fillChildren_closure.prototype = $desc;
  function InsertPanel() {
  }
  InsertPanel.builtin$cls = "InsertPanel";
  if (!"name" in InsertPanel)
    InsertPanel.name = "InsertPanel";
  $desc = $collectedClasses.InsertPanel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InsertPanel.prototype = $desc;
  function InsertPanel_update_closure(this_0, ref_1) {
    this.this_0 = this_0;
    this.ref_1 = ref_1;
  }
  InsertPanel_update_closure.builtin$cls = "InsertPanel_update_closure";
  if (!"name" in InsertPanel_update_closure)
    InsertPanel_update_closure.name = "InsertPanel_update_closure";
  $desc = $collectedClasses.InsertPanel_update_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InsertPanel_update_closure.prototype = $desc;
  function InsertPanel__makeHelpButton_closure(this_0, ref_1) {
    this.this_0 = this_0;
    this.ref_1 = ref_1;
  }
  InsertPanel__makeHelpButton_closure.builtin$cls = "InsertPanel__makeHelpButton_closure";
  if (!"name" in InsertPanel__makeHelpButton_closure)
    InsertPanel__makeHelpButton_closure.name = "InsertPanel__makeHelpButton_closure";
  $desc = $collectedClasses.InsertPanel__makeHelpButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InsertPanel__makeHelpButton_closure.prototype = $desc;
  function Locale(language, country) {
    this.language = language;
    this.country = country;
  }
  Locale.builtin$cls = "Locale";
  if (!"name" in Locale)
    Locale.name = "Locale";
  $desc = $collectedClasses.Locale;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Locale.prototype = $desc;
  Locale.prototype.get$language = function(receiver) {
    return this.language;
  };
  Locale.prototype.get$country = function() {
    return this.country;
  };
  function Menu(items, id, _title, parent, action, shortcut, data, enabled, is_separator, toolTipText) {
    this.items = items;
    this.id = id;
    this._title = _title;
    this.parent = parent;
    this.action = action;
    this.shortcut = shortcut;
    this.data = data;
    this.enabled = enabled;
    this.is_separator = is_separator;
    this.toolTipText = toolTipText;
  }
  Menu.builtin$cls = "Menu";
  if (!"name" in Menu)
    Menu.name = "Menu";
  $desc = $collectedClasses.Menu;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Menu.prototype = $desc;
  Menu.prototype.get$items = function() {
    return this.items;
  };
  function MenuItem(id, _title, parent, action, shortcut, data, enabled, is_separator, toolTipText) {
    this.id = id;
    this._title = _title;
    this.parent = parent;
    this.action = action;
    this.shortcut = shortcut;
    this.data = data;
    this.enabled = enabled;
    this.is_separator = is_separator;
    this.toolTipText = toolTipText;
  }
  MenuItem.builtin$cls = "MenuItem";
  if (!"name" in MenuItem)
    MenuItem.name = "MenuItem";
  $desc = $collectedClasses.MenuItem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuItem.prototype = $desc;
  MenuItem.prototype.get$id = function(receiver) {
    return this.id;
  };
  MenuItem.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  MenuItem.prototype.set$parent = function(receiver, v) {
    return this.parent = v;
  };
  MenuItem.prototype.get$shortcut = function() {
    return this.shortcut;
  };
  MenuItem.prototype.get$data = function(receiver) {
    return this.data;
  };
  function MenuItem_html_closure(this_0) {
    this.this_0 = this_0;
  }
  MenuItem_html_closure.builtin$cls = "MenuItem_html_closure";
  if (!"name" in MenuItem_html_closure)
    MenuItem_html_closure.name = "MenuItem_html_closure";
  $desc = $collectedClasses.MenuItem_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuItem_html_closure.prototype = $desc;
  function MenuItem_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  MenuItem_html_closure0.builtin$cls = "MenuItem_html_closure0";
  if (!"name" in MenuItem_html_closure0)
    MenuItem_html_closure0.name = "MenuItem_html_closure0";
  $desc = $collectedClasses.MenuItem_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuItem_html_closure0.prototype = $desc;
  function MenuItem_html_closure1(this_2) {
    this.this_2 = this_2;
  }
  MenuItem_html_closure1.builtin$cls = "MenuItem_html_closure1";
  if (!"name" in MenuItem_html_closure1)
    MenuItem_html_closure1.name = "MenuItem_html_closure1";
  $desc = $collectedClasses.MenuItem_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuItem_html_closure1.prototype = $desc;
  function MenuBar(menus, ignoreClick, visibleMenu) {
    this.menus = menus;
    this.ignoreClick = ignoreClick;
    this.visibleMenu = visibleMenu;
  }
  MenuBar.builtin$cls = "MenuBar";
  if (!"name" in MenuBar)
    MenuBar.name = "MenuBar";
  $desc = $collectedClasses.MenuBar;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuBar.prototype = $desc;
  function MenuBar_html_closure(this_0, m_1) {
    this.this_0 = this_0;
    this.m_1 = m_1;
  }
  MenuBar_html_closure.builtin$cls = "MenuBar_html_closure";
  if (!"name" in MenuBar_html_closure)
    MenuBar_html_closure.name = "MenuBar_html_closure";
  $desc = $collectedClasses.MenuBar_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuBar_html_closure.prototype = $desc;
  function MenuBar_html_closure0(this_2, m_3) {
    this.this_2 = this_2;
    this.m_3 = m_3;
  }
  MenuBar_html_closure0.builtin$cls = "MenuBar_html_closure0";
  if (!"name" in MenuBar_html_closure0)
    MenuBar_html_closure0.name = "MenuBar_html_closure0";
  $desc = $collectedClasses.MenuBar_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuBar_html_closure0.prototype = $desc;
  function MenuBar_html_closure1(this_4, m_5) {
    this.this_4 = this_4;
    this.m_5 = m_5;
  }
  MenuBar_html_closure1.builtin$cls = "MenuBar_html_closure1";
  if (!"name" in MenuBar_html_closure1)
    MenuBar_html_closure1.name = "MenuBar_html_closure1";
  $desc = $collectedClasses.MenuBar_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuBar_html_closure1.prototype = $desc;
  function MenuBar_html_closure2(this_6) {
    this.this_6 = this_6;
  }
  MenuBar_html_closure2.builtin$cls = "MenuBar_html_closure2";
  if (!"name" in MenuBar_html_closure2)
    MenuBar_html_closure2.name = "MenuBar_html_closure2";
  $desc = $collectedClasses.MenuBar_html_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuBar_html_closure2.prototype = $desc;
  function NodeFactory(constructorsFromRef, constructorsFromNode) {
    this.constructorsFromRef = constructorsFromRef;
    this.constructorsFromNode = constructorsFromNode;
  }
  NodeFactory.builtin$cls = "NodeFactory";
  if (!"name" in NodeFactory)
    NodeFactory.name = "NodeFactory";
  $desc = $collectedClasses.NodeFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure() {
  }
  NodeFactory_addCoreDisplayTypes_closure.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure)
    NodeFactory_addCoreDisplayTypes_closure.name = "NodeFactory_addCoreDisplayTypes_closure";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure0() {
  }
  NodeFactory_addCoreDisplayTypes_closure0.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure0";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure0)
    NodeFactory_addCoreDisplayTypes_closure0.name = "NodeFactory_addCoreDisplayTypes_closure0";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure0.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure1() {
  }
  NodeFactory_addCoreDisplayTypes_closure1.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure1";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure1)
    NodeFactory_addCoreDisplayTypes_closure1.name = "NodeFactory_addCoreDisplayTypes_closure1";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure1.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure2() {
  }
  NodeFactory_addCoreDisplayTypes_closure2.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure2";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure2)
    NodeFactory_addCoreDisplayTypes_closure2.name = "NodeFactory_addCoreDisplayTypes_closure2";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure2.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure3() {
  }
  NodeFactory_addCoreDisplayTypes_closure3.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure3";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure3)
    NodeFactory_addCoreDisplayTypes_closure3.name = "NodeFactory_addCoreDisplayTypes_closure3";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure3.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure4() {
  }
  NodeFactory_addCoreDisplayTypes_closure4.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure4";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure4)
    NodeFactory_addCoreDisplayTypes_closure4.name = "NodeFactory_addCoreDisplayTypes_closure4";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure4.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure5() {
  }
  NodeFactory_addCoreDisplayTypes_closure5.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure5";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure5)
    NodeFactory_addCoreDisplayTypes_closure5.name = "NodeFactory_addCoreDisplayTypes_closure5";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure5.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure6() {
  }
  NodeFactory_addCoreDisplayTypes_closure6.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure6";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure6)
    NodeFactory_addCoreDisplayTypes_closure6.name = "NodeFactory_addCoreDisplayTypes_closure6";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure6.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure7() {
  }
  NodeFactory_addCoreDisplayTypes_closure7.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure7";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure7)
    NodeFactory_addCoreDisplayTypes_closure7.name = "NodeFactory_addCoreDisplayTypes_closure7";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure7.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure8() {
  }
  NodeFactory_addCoreDisplayTypes_closure8.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure8";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure8)
    NodeFactory_addCoreDisplayTypes_closure8.name = "NodeFactory_addCoreDisplayTypes_closure8";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure8.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure9() {
  }
  NodeFactory_addCoreDisplayTypes_closure9.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure9";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure9)
    NodeFactory_addCoreDisplayTypes_closure9.name = "NodeFactory_addCoreDisplayTypes_closure9";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure9.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure10() {
  }
  NodeFactory_addCoreDisplayTypes_closure10.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure10";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure10)
    NodeFactory_addCoreDisplayTypes_closure10.name = "NodeFactory_addCoreDisplayTypes_closure10";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure10.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure11() {
  }
  NodeFactory_addCoreDisplayTypes_closure11.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure11";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure11)
    NodeFactory_addCoreDisplayTypes_closure11.name = "NodeFactory_addCoreDisplayTypes_closure11";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure11.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure12() {
  }
  NodeFactory_addCoreDisplayTypes_closure12.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure12";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure12)
    NodeFactory_addCoreDisplayTypes_closure12.name = "NodeFactory_addCoreDisplayTypes_closure12";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure12.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure13() {
  }
  NodeFactory_addCoreDisplayTypes_closure13.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure13";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure13)
    NodeFactory_addCoreDisplayTypes_closure13.name = "NodeFactory_addCoreDisplayTypes_closure13";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure13.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure14() {
  }
  NodeFactory_addCoreDisplayTypes_closure14.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure14";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure14)
    NodeFactory_addCoreDisplayTypes_closure14.name = "NodeFactory_addCoreDisplayTypes_closure14";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure14.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure15() {
  }
  NodeFactory_addCoreDisplayTypes_closure15.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure15";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure15)
    NodeFactory_addCoreDisplayTypes_closure15.name = "NodeFactory_addCoreDisplayTypes_closure15";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure15.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure16() {
  }
  NodeFactory_addCoreDisplayTypes_closure16.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure16";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure16)
    NodeFactory_addCoreDisplayTypes_closure16.name = "NodeFactory_addCoreDisplayTypes_closure16";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure16.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure17() {
  }
  NodeFactory_addCoreDisplayTypes_closure17.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure17";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure17)
    NodeFactory_addCoreDisplayTypes_closure17.name = "NodeFactory_addCoreDisplayTypes_closure17";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure17.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure18() {
  }
  NodeFactory_addCoreDisplayTypes_closure18.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure18";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure18)
    NodeFactory_addCoreDisplayTypes_closure18.name = "NodeFactory_addCoreDisplayTypes_closure18";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure18.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure19() {
  }
  NodeFactory_addCoreDisplayTypes_closure19.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure19";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure19)
    NodeFactory_addCoreDisplayTypes_closure19.name = "NodeFactory_addCoreDisplayTypes_closure19";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure19.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure20() {
  }
  NodeFactory_addCoreDisplayTypes_closure20.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure20";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure20)
    NodeFactory_addCoreDisplayTypes_closure20.name = "NodeFactory_addCoreDisplayTypes_closure20";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure20.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure21() {
  }
  NodeFactory_addCoreDisplayTypes_closure21.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure21";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure21)
    NodeFactory_addCoreDisplayTypes_closure21.name = "NodeFactory_addCoreDisplayTypes_closure21";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure21.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure22() {
  }
  NodeFactory_addCoreDisplayTypes_closure22.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure22";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure22)
    NodeFactory_addCoreDisplayTypes_closure22.name = "NodeFactory_addCoreDisplayTypes_closure22";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure22;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure22.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure23() {
  }
  NodeFactory_addCoreDisplayTypes_closure23.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure23";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure23)
    NodeFactory_addCoreDisplayTypes_closure23.name = "NodeFactory_addCoreDisplayTypes_closure23";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure23;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure23.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure24() {
  }
  NodeFactory_addCoreDisplayTypes_closure24.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure24";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure24)
    NodeFactory_addCoreDisplayTypes_closure24.name = "NodeFactory_addCoreDisplayTypes_closure24";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure24;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure24.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure25() {
  }
  NodeFactory_addCoreDisplayTypes_closure25.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure25";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure25)
    NodeFactory_addCoreDisplayTypes_closure25.name = "NodeFactory_addCoreDisplayTypes_closure25";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure25;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure25.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure26() {
  }
  NodeFactory_addCoreDisplayTypes_closure26.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure26";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure26)
    NodeFactory_addCoreDisplayTypes_closure26.name = "NodeFactory_addCoreDisplayTypes_closure26";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure26;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure26.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure27() {
  }
  NodeFactory_addCoreDisplayTypes_closure27.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure27";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure27)
    NodeFactory_addCoreDisplayTypes_closure27.name = "NodeFactory_addCoreDisplayTypes_closure27";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure27;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure27.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure28() {
  }
  NodeFactory_addCoreDisplayTypes_closure28.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure28";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure28)
    NodeFactory_addCoreDisplayTypes_closure28.name = "NodeFactory_addCoreDisplayTypes_closure28";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure28;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure28.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure29() {
  }
  NodeFactory_addCoreDisplayTypes_closure29.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure29";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure29)
    NodeFactory_addCoreDisplayTypes_closure29.name = "NodeFactory_addCoreDisplayTypes_closure29";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure29;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure29.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure30() {
  }
  NodeFactory_addCoreDisplayTypes_closure30.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure30";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure30)
    NodeFactory_addCoreDisplayTypes_closure30.name = "NodeFactory_addCoreDisplayTypes_closure30";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure30;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure30.prototype = $desc;
  function NodeFactory_addCoreDisplayTypes_closure31() {
  }
  NodeFactory_addCoreDisplayTypes_closure31.builtin$cls = "NodeFactory_addCoreDisplayTypes_closure31";
  if (!"name" in NodeFactory_addCoreDisplayTypes_closure31)
    NodeFactory_addCoreDisplayTypes_closure31.name = "NodeFactory_addCoreDisplayTypes_closure31";
  $desc = $collectedClasses.NodeFactory_addCoreDisplayTypes_closure31;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeFactory_addCoreDisplayTypes_closure31.prototype = $desc;
  function Position(_dn, _dnOffset) {
    this._dn = _dn;
    this._dnOffset = _dnOffset;
  }
  Position.builtin$cls = "Position";
  if (!"name" in Position)
    Position.name = "Position";
  $desc = $collectedClasses.Position;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Position.prototype = $desc;
  function Point0(x, y) {
    this.x = x;
    this.y = y;
  }
  Point0.builtin$cls = "Point0";
  if (!"name" in Point0)
    Point0.name = "Point0";
  $desc = $collectedClasses.Point0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Point0.prototype = $desc;
  Point0.prototype.get$x = function(receiver) {
    return this.x;
  };
  Point0.prototype.get$y = function(receiver) {
    return this.y;
  };
  function SourceWindow() {
  }
  SourceWindow.builtin$cls = "SourceWindow";
  if (!"name" in SourceWindow)
    SourceWindow.name = "SourceWindow";
  $desc = $collectedClasses.SourceWindow;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceWindow.prototype = $desc;
  function SourceWindow_show_closure(this_0) {
    this.this_0 = this_0;
  }
  SourceWindow_show_closure.builtin$cls = "SourceWindow_show_closure";
  if (!"name" in SourceWindow_show_closure)
    SourceWindow_show_closure.name = "SourceWindow_show_closure";
  $desc = $collectedClasses.SourceWindow_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceWindow_show_closure.prototype = $desc;
  function SourceWindow_show_closure0(this_1) {
    this.this_1 = this_1;
  }
  SourceWindow_show_closure0.builtin$cls = "SourceWindow_show_closure0";
  if (!"name" in SourceWindow_show_closure0)
    SourceWindow_show_closure0.name = "SourceWindow_show_closure0";
  $desc = $collectedClasses.SourceWindow_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceWindow_show_closure0.prototype = $desc;
  function Tag(_dn, _daxe$_type, _long, _hideElementTitle) {
    this._dn = _dn;
    this._daxe$_type = _daxe$_type;
    this._long = _long;
    this._hideElementTitle = _hideElementTitle;
  }
  Tag.builtin$cls = "Tag";
  if (!"name" in Tag)
    Tag.name = "Tag";
  $desc = $collectedClasses.Tag;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tag.prototype = $desc;
  function Tag_html_closure(this_0) {
    this.this_0 = this_0;
  }
  Tag_html_closure.builtin$cls = "Tag_html_closure";
  if (!"name" in Tag_html_closure)
    Tag_html_closure.name = "Tag_html_closure";
  $desc = $collectedClasses.Tag_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tag_html_closure.prototype = $desc;
  function Tag_html_closure0(attr_1) {
    this.attr_1 = attr_1;
  }
  Tag_html_closure0.builtin$cls = "Tag_html_closure0";
  if (!"name" in Tag_html_closure0)
    Tag_html_closure0.name = "Tag_html_closure0";
  $desc = $collectedClasses.Tag_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tag_html_closure0.prototype = $desc;
  function Tag_html_closure1(this_2) {
    this.this_2 = this_2;
  }
  Tag_html_closure1.builtin$cls = "Tag_html_closure1";
  if (!"name" in Tag_html_closure1)
    Tag_html_closure1.name = "Tag_html_closure1";
  $desc = $collectedClasses.Tag_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tag_html_closure1.prototype = $desc;
  function UndoableEdit(operation, title, pos, text, length, dn, cutNode, attributes, subEdits, updateDisplay) {
    this.operation = operation;
    this.title = title;
    this.pos = pos;
    this.text = text;
    this.length = length;
    this.dn = dn;
    this.cutNode = cutNode;
    this.attributes = attributes;
    this.subEdits = subEdits;
    this.updateDisplay = updateDisplay;
  }
  UndoableEdit.builtin$cls = "UndoableEdit";
  if (!"name" in UndoableEdit)
    UndoableEdit.name = "UndoableEdit";
  $desc = $collectedClasses.UndoableEdit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UndoableEdit.prototype = $desc;
  UndoableEdit.prototype.get$title = function(receiver) {
    return this.title;
  };
  UndoableEdit.prototype.get$length = function(receiver) {
    return this.length;
  };
  UndoableEdit.prototype.get$dn = function() {
    return this.dn;
  };
  UndoableEdit.prototype.get$attributes = function(receiver) {
    return this.attributes;
  };
  UndoableEdit.prototype.set$attributes = function(receiver, v) {
    return this.attributes = v;
  };
  UndoableEdit.prototype.get$subEdits = function() {
    return this.subEdits;
  };
  function WebPage(_insertP, _cursor, selectionStart, selectionEnd, mbar, undoMenu, redoMenu, contextualMenu, lastClickPosition, lastClickTime, selectionByWords) {
    this._insertP = _insertP;
    this._cursor = _cursor;
    this.selectionStart = selectionStart;
    this.selectionEnd = selectionEnd;
    this.mbar = mbar;
    this.undoMenu = undoMenu;
    this.redoMenu = redoMenu;
    this.contextualMenu = contextualMenu;
    this.lastClickPosition = lastClickPosition;
    this.lastClickTime = lastClickTime;
    this.selectionByWords = selectionByWords;
  }
  WebPage.builtin$cls = "WebPage";
  if (!"name" in WebPage)
    WebPage.name = "WebPage";
  $desc = $collectedClasses.WebPage;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage.prototype = $desc;
  function WebPage_openDocument_closure(this_0, filePath_1) {
    this.this_0 = this_0;
    this.filePath_1 = filePath_1;
  }
  WebPage_openDocument_closure.builtin$cls = "WebPage_openDocument_closure";
  if (!"name" in WebPage_openDocument_closure)
    WebPage_openDocument_closure.name = "WebPage_openDocument_closure";
  $desc = $collectedClasses.WebPage_openDocument_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_openDocument_closure.prototype = $desc;
  function WebPage_openDocument_closure0() {
  }
  WebPage_openDocument_closure0.builtin$cls = "WebPage_openDocument_closure0";
  if (!"name" in WebPage_openDocument_closure0)
    WebPage_openDocument_closure0.name = "WebPage_openDocument_closure0";
  $desc = $collectedClasses.WebPage_openDocument_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_openDocument_closure0.prototype = $desc;
  function WebPage_openDocumentFromPost_closure(this_0) {
    this.this_0 = this_0;
  }
  WebPage_openDocumentFromPost_closure.builtin$cls = "WebPage_openDocumentFromPost_closure";
  if (!"name" in WebPage_openDocumentFromPost_closure)
    WebPage_openDocumentFromPost_closure.name = "WebPage_openDocumentFromPost_closure";
  $desc = $collectedClasses.WebPage_openDocumentFromPost_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_openDocumentFromPost_closure.prototype = $desc;
  function WebPage_openDocumentFromPost_closure0() {
  }
  WebPage_openDocumentFromPost_closure0.builtin$cls = "WebPage_openDocumentFromPost_closure0";
  if (!"name" in WebPage_openDocumentFromPost_closure0)
    WebPage_openDocumentFromPost_closure0.name = "WebPage_openDocumentFromPost_closure0";
  $desc = $collectedClasses.WebPage_openDocumentFromPost_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_openDocumentFromPost_closure0.prototype = $desc;
  function WebPage_init_closure(this_0) {
    this.this_0 = this_0;
  }
  WebPage_init_closure.builtin$cls = "WebPage_init_closure";
  if (!"name" in WebPage_init_closure)
    WebPage_init_closure.name = "WebPage_init_closure";
  $desc = $collectedClasses.WebPage_init_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_init_closure.prototype = $desc;
  function WebPage_init_closure0(this_1) {
    this.this_1 = this_1;
  }
  WebPage_init_closure0.builtin$cls = "WebPage_init_closure0";
  if (!"name" in WebPage_init_closure0)
    WebPage_init_closure0.name = "WebPage_init_closure0";
  $desc = $collectedClasses.WebPage_init_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_init_closure0.prototype = $desc;
  function WebPage_init_closure1(this_2) {
    this.this_2 = this_2;
  }
  WebPage_init_closure1.builtin$cls = "WebPage_init_closure1";
  if (!"name" in WebPage_init_closure1)
    WebPage_init_closure1.name = "WebPage_init_closure1";
  $desc = $collectedClasses.WebPage_init_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_init_closure1.prototype = $desc;
  function WebPage_init_closure2(this_3) {
    this.this_3 = this_3;
  }
  WebPage_init_closure2.builtin$cls = "WebPage_init_closure2";
  if (!"name" in WebPage_init_closure2)
    WebPage_init_closure2.name = "WebPage_init_closure2";
  $desc = $collectedClasses.WebPage_init_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_init_closure2.prototype = $desc;
  function WebPage_init_closure3(this_4) {
    this.this_4 = this_4;
  }
  WebPage_init_closure3.builtin$cls = "WebPage_init_closure3";
  if (!"name" in WebPage_init_closure3)
    WebPage_init_closure3.name = "WebPage_init_closure3";
  $desc = $collectedClasses.WebPage_init_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_init_closure3.prototype = $desc;
  function WebPage_init_closure4(this_5) {
    this.this_5 = this_5;
  }
  WebPage_init_closure4.builtin$cls = "WebPage_init_closure4";
  if (!"name" in WebPage_init_closure4)
    WebPage_init_closure4.name = "WebPage_init_closure4";
  $desc = $collectedClasses.WebPage_init_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_init_closure4.prototype = $desc;
  function WebPage__buildMenus_closure(this_0) {
    this.this_0 = this_0;
  }
  WebPage__buildMenus_closure.builtin$cls = "WebPage__buildMenus_closure";
  if (!"name" in WebPage__buildMenus_closure)
    WebPage__buildMenus_closure.name = "WebPage__buildMenus_closure";
  $desc = $collectedClasses.WebPage__buildMenus_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage__buildMenus_closure.prototype = $desc;
  function WebPage__buildMenus_closure0(this_1) {
    this.this_1 = this_1;
  }
  WebPage__buildMenus_closure0.builtin$cls = "WebPage__buildMenus_closure0";
  if (!"name" in WebPage__buildMenus_closure0)
    WebPage__buildMenus_closure0.name = "WebPage__buildMenus_closure0";
  $desc = $collectedClasses.WebPage__buildMenus_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage__buildMenus_closure0.prototype = $desc;
  function WebPage__buildMenus_closure1(this_2) {
    this.this_2 = this_2;
  }
  WebPage__buildMenus_closure1.builtin$cls = "WebPage__buildMenus_closure1";
  if (!"name" in WebPage__buildMenus_closure1)
    WebPage__buildMenus_closure1.name = "WebPage__buildMenus_closure1";
  $desc = $collectedClasses.WebPage__buildMenus_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage__buildMenus_closure1.prototype = $desc;
  function WebPage__buildMenus_closure2() {
  }
  WebPage__buildMenus_closure2.builtin$cls = "WebPage__buildMenus_closure2";
  if (!"name" in WebPage__buildMenus_closure2)
    WebPage__buildMenus_closure2.name = "WebPage__buildMenus_closure2";
  $desc = $collectedClasses.WebPage__buildMenus_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage__buildMenus_closure2.prototype = $desc;
  function WebPage__buildMenus_closure3() {
  }
  WebPage__buildMenus_closure3.builtin$cls = "WebPage__buildMenus_closure3";
  if (!"name" in WebPage__buildMenus_closure3)
    WebPage__buildMenus_closure3.name = "WebPage__buildMenus_closure3";
  $desc = $collectedClasses.WebPage__buildMenus_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage__buildMenus_closure3.prototype = $desc;
  function WebPage__buildMenus_closure4() {
  }
  WebPage__buildMenus_closure4.builtin$cls = "WebPage__buildMenus_closure4";
  if (!"name" in WebPage__buildMenus_closure4)
    WebPage__buildMenus_closure4.name = "WebPage__buildMenus_closure4";
  $desc = $collectedClasses.WebPage__buildMenus_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage__buildMenus_closure4.prototype = $desc;
  function WebPage_showContextualMenu_closure(ref_1) {
    this.ref_1 = ref_1;
  }
  WebPage_showContextualMenu_closure.builtin$cls = "WebPage_showContextualMenu_closure";
  if (!"name" in WebPage_showContextualMenu_closure)
    WebPage_showContextualMenu_closure.name = "WebPage_showContextualMenu_closure";
  $desc = $collectedClasses.WebPage_showContextualMenu_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_showContextualMenu_closure.prototype = $desc;
  function WebPage_showContextualMenu_closure0(box_0) {
    this.box_0 = box_0;
  }
  WebPage_showContextualMenu_closure0.builtin$cls = "WebPage_showContextualMenu_closure0";
  if (!"name" in WebPage_showContextualMenu_closure0)
    WebPage_showContextualMenu_closure0.name = "WebPage_showContextualMenu_closure0";
  $desc = $collectedClasses.WebPage_showContextualMenu_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_showContextualMenu_closure0.prototype = $desc;
  function WebPage_save_closure() {
  }
  WebPage_save_closure.builtin$cls = "WebPage_save_closure";
  if (!"name" in WebPage_save_closure)
    WebPage_save_closure.name = "WebPage_save_closure";
  $desc = $collectedClasses.WebPage_save_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_save_closure.prototype = $desc;
  function WebPage_save_closure0() {
  }
  WebPage_save_closure0.builtin$cls = "WebPage_save_closure0";
  if (!"name" in WebPage_save_closure0)
    WebPage_save_closure0.name = "WebPage_save_closure0";
  $desc = $collectedClasses.WebPage_save_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WebPage_save_closure0.prototype = $desc;
  function MathElement(parent) {
    this.parent = parent;
  }
  MathElement.builtin$cls = "MathElement";
  if (!"name" in MathElement)
    MathElement.name = "MathElement";
  $desc = $collectedClasses.MathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathElement.prototype = $desc;
  MathElement.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  MathElement.prototype.set$parent = function(receiver, v) {
    return this.parent = v;
  };
  function MathFrac(_linethickness, base, parent, fontsize, children, text) {
    this._linethickness = _linethickness;
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathFrac.builtin$cls = "MathFrac";
  if (!"name" in MathFrac)
    MathFrac.name = "MathFrac";
  $desc = $collectedClasses.MathFrac;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathFrac.prototype = $desc;
  function MathIdentifier(_mathvariant, base, parent, fontsize, children, text) {
    this._mathvariant = _mathvariant;
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathIdentifier.builtin$cls = "MathIdentifier";
  if (!"name" in MathIdentifier)
    MathIdentifier.name = "MathIdentifier";
  $desc = $collectedClasses.MathIdentifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathIdentifier.prototype = $desc;
  function MathNumber(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathNumber.builtin$cls = "MathNumber";
  if (!"name" in MathNumber)
    MathNumber.name = "MathNumber";
  $desc = $collectedClasses.MathNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathNumber.prototype = $desc;
  function MathOperator(_stretchy, _lspace, _rspace, base, parent, fontsize, children, text) {
    this._stretchy = _stretchy;
    this._lspace = _lspace;
    this._rspace = _rspace;
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathOperator.builtin$cls = "MathOperator";
  if (!"name" in MathOperator)
    MathOperator.name = "MathOperator";
  $desc = $collectedClasses.MathOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathOperator.prototype = $desc;
  function MathOver(_accent, base, parent, fontsize, children, text) {
    this._accent = _accent;
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathOver.builtin$cls = "MathOver";
  if (!"name" in MathOver)
    MathOver.name = "MathOver";
  $desc = $collectedClasses.MathOver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathOver.prototype = $desc;
  function MathRoot(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathRoot.builtin$cls = "MathRoot";
  if (!"name" in MathRoot)
    MathRoot.name = "MathRoot";
  $desc = $collectedClasses.MathRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathRoot.prototype = $desc;
  function MathRootElement(_mode, _debug, base, parent, fontsize, children, text) {
    this._mode = _mode;
    this._debug = _debug;
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathRootElement.builtin$cls = "MathRootElement";
  if (!"name" in MathRootElement)
    MathRootElement.name = "MathRootElement";
  $desc = $collectedClasses.MathRootElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathRootElement.prototype = $desc;
  function MathRow(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathRow.builtin$cls = "MathRow";
  if (!"name" in MathRow)
    MathRow.name = "MathRow";
  $desc = $collectedClasses.MathRow;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathRow.prototype = $desc;
  function MathSqrt(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathSqrt.builtin$cls = "MathSqrt";
  if (!"name" in MathSqrt)
    MathSqrt.name = "MathSqrt";
  $desc = $collectedClasses.MathSqrt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathSqrt.prototype = $desc;
  function MathSub(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathSub.builtin$cls = "MathSub";
  if (!"name" in MathSub)
    MathSub.name = "MathSub";
  $desc = $collectedClasses.MathSub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathSub.prototype = $desc;
  function MathSubSup(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathSubSup.builtin$cls = "MathSubSup";
  if (!"name" in MathSubSup)
    MathSubSup.name = "MathSubSup";
  $desc = $collectedClasses.MathSubSup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathSubSup.prototype = $desc;
  function MathSup(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathSup.builtin$cls = "MathSup";
  if (!"name" in MathSup)
    MathSup.name = "MathSup";
  $desc = $collectedClasses.MathSup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathSup.prototype = $desc;
  function MathTable(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathTable.builtin$cls = "MathTable";
  if (!"name" in MathTable)
    MathTable.name = "MathTable";
  $desc = $collectedClasses.MathTable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathTable.prototype = $desc;
  function MathTableData(_columnalign, base, parent, fontsize, children, text) {
    this._columnalign = _columnalign;
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathTableData.builtin$cls = "MathTableData";
  if (!"name" in MathTableData)
    MathTableData.name = "MathTableData";
  $desc = $collectedClasses.MathTableData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathTableData.prototype = $desc;
  function MathTableRow(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathTableRow.builtin$cls = "MathTableRow";
  if (!"name" in MathTableRow)
    MathTableRow.name = "MathTableRow";
  $desc = $collectedClasses.MathTableRow;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathTableRow.prototype = $desc;
  function MathText(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathText.builtin$cls = "MathText";
  if (!"name" in MathText)
    MathText.name = "MathText";
  $desc = $collectedClasses.MathText;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathText.prototype = $desc;
  function MathUnder(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathUnder.builtin$cls = "MathUnder";
  if (!"name" in MathUnder)
    MathUnder.name = "MathUnder";
  $desc = $collectedClasses.MathUnder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathUnder.prototype = $desc;
  function MathUnderOver(base, parent, fontsize, children, text) {
    this.base = base;
    this.parent = parent;
    this.fontsize = fontsize;
    this.children = children;
    this.text = text;
  }
  MathUnderOver.builtin$cls = "MathUnderOver";
  if (!"name" in MathUnderOver)
    MathUnderOver.name = "MathUnderOver";
  $desc = $collectedClasses.MathUnderOver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathUnderOver.prototype = $desc;
  function EquationDialog(_equations$_equationText, _equations$_labelName, _equations$_labelValue, _equations$_okfct, _equations$_base) {
    this._equations$_equationText = _equations$_equationText;
    this._equations$_labelName = _equations$_labelName;
    this._equations$_labelValue = _equations$_labelValue;
    this._equations$_okfct = _equations$_okfct;
    this._equations$_base = _equations$_base;
  }
  EquationDialog.builtin$cls = "EquationDialog";
  if (!"name" in EquationDialog)
    EquationDialog.name = "EquationDialog";
  $desc = $collectedClasses.EquationDialog;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EquationDialog.prototype = $desc;
  function EquationDialog_show_closure(this_0) {
    this.this_0 = this_0;
  }
  EquationDialog_show_closure.builtin$cls = "EquationDialog_show_closure";
  if (!"name" in EquationDialog_show_closure)
    EquationDialog_show_closure.name = "EquationDialog_show_closure";
  $desc = $collectedClasses.EquationDialog_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EquationDialog_show_closure.prototype = $desc;
  function EquationDialog_show_closure0(div1_1) {
    this.div1_1 = div1_1;
  }
  EquationDialog_show_closure0.builtin$cls = "EquationDialog_show_closure0";
  if (!"name" in EquationDialog_show_closure0)
    EquationDialog_show_closure0.name = "EquationDialog_show_closure0";
  $desc = $collectedClasses.EquationDialog_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EquationDialog_show_closure0.prototype = $desc;
  function EquationDialog_show_closure1(this_2) {
    this.this_2 = this_2;
  }
  EquationDialog_show_closure1.builtin$cls = "EquationDialog_show_closure1";
  if (!"name" in EquationDialog_show_closure1)
    EquationDialog_show_closure1.name = "EquationDialog_show_closure1";
  $desc = $collectedClasses.EquationDialog_show_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EquationDialog_show_closure1.prototype = $desc;
  function MathBase(_inlinefontsize, _displayfontsize, minfontsize, maxfontsize, _fontmetrics, _debug, _mode, _rootElement, _context) {
    this._inlinefontsize = _inlinefontsize;
    this._displayfontsize = _displayfontsize;
    this.minfontsize = minfontsize;
    this.maxfontsize = maxfontsize;
    this._fontmetrics = _fontmetrics;
    this._debug = _debug;
    this._mode = _mode;
    this._rootElement = _rootElement;
    this._context = _context;
  }
  MathBase.builtin$cls = "MathBase";
  if (!"name" in MathBase)
    MathBase.name = "MathBase";
  $desc = $collectedClasses.MathBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MathBase.prototype = $desc;
  function StringMathBuilder(_rootElement) {
    this._rootElement = _rootElement;
  }
  StringMathBuilder.builtin$cls = "StringMathBuilder";
  if (!"name" in StringMathBuilder)
    StringMathBuilder.name = "StringMathBuilder";
  $desc = $collectedClasses.StringMathBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMathBuilder.prototype = $desc;
  function JEQ() {
  }
  JEQ.builtin$cls = "JEQ";
  if (!"name" in JEQ)
    JEQ.name = "JEQ";
  $desc = $collectedClasses.JEQ;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JEQ.prototype = $desc;
  function JEQFonction(nom, vp, namesExpr) {
    this.nom = nom;
    this.vp = vp;
    this.namesExpr = namesExpr;
  }
  JEQFonction.builtin$cls = "JEQFonction";
  if (!"name" in JEQFonction)
    JEQFonction.name = "JEQFonction";
  $desc = $collectedClasses.JEQFonction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JEQFonction.prototype = $desc;
  function JEQOperation(op, p1, p2, unites) {
    this.op = op;
    this.p1 = p1;
    this.p2 = p2;
    this.unites = unites;
  }
  JEQOperation.builtin$cls = "JEQOperation";
  if (!"name" in JEQOperation)
    JEQOperation.name = "JEQOperation";
  $desc = $collectedClasses.JEQOperation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JEQOperation.prototype = $desc;
  function JEQNombre(valeur) {
    this.valeur = valeur;
  }
  JEQNombre.builtin$cls = "JEQNombre";
  if (!"name" in JEQNombre)
    JEQNombre.name = "JEQNombre";
  $desc = $collectedClasses.JEQNombre;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JEQNombre.prototype = $desc;
  function JEQVariable(nom, unites, badExpr) {
    this.nom = nom;
    this.unites = unites;
    this.badExpr = badExpr;
  }
  JEQVariable.builtin$cls = "JEQVariable";
  if (!"name" in JEQVariable)
    JEQVariable.name = "JEQVariable";
  $desc = $collectedClasses.JEQVariable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JEQVariable.prototype = $desc;
  function TextMetrics(width, height, ascent, descent, actualBoundingBoxAscent, actualBoundingBoxDescent) {
    this.width = width;
    this.height = height;
    this.ascent = ascent;
    this.descent = descent;
    this.actualBoundingBoxAscent = actualBoundingBoxAscent;
    this.actualBoundingBoxDescent = actualBoundingBoxDescent;
  }
  TextMetrics.builtin$cls = "TextMetrics";
  if (!"name" in TextMetrics)
    TextMetrics.name = "TextMetrics";
  $desc = $collectedClasses.TextMetrics;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextMetrics.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
    this.values_1 = values_1;
    this.copies_2 = copies_2;
  }
  _convertDartToNative_PrepareForStructuredClone_findSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_findSlot)
    _convertDartToNative_PrepareForStructuredClone_findSlot.name = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_findSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  _convertDartToNative_PrepareForStructuredClone_readSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_readSlot)
    _convertDartToNative_PrepareForStructuredClone_readSlot.name = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_readSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
    this.copies_4 = copies_4;
  }
  _convertDartToNative_PrepareForStructuredClone_writeSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_writeSlot)
    _convertDartToNative_PrepareForStructuredClone_writeSlot.name = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_writeSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
  }
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_cleanupSlots)
    _convertDartToNative_PrepareForStructuredClone_cleanupSlots.name = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_cleanupSlots;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk(findSlot_5, readSlot_6, writeSlot_7) {
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  _convertDartToNative_PrepareForStructuredClone_walk.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk)
    _convertDartToNative_PrepareForStructuredClone_walk.name = "_convertDartToNative_PrepareForStructuredClone_walk";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk_closure(box_0, walk_8) {
    this.box_0 = box_0;
    this.walk_8 = walk_8;
  }
  _convertDartToNative_PrepareForStructuredClone_walk_closure.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk_closure)
    _convertDartToNative_PrepareForStructuredClone_walk_closure.name = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function _TypedImageData(data, height, width) {
    this.data = data;
    this.height = height;
    this.width = width;
  }
  _TypedImageData.builtin$cls = "_TypedImageData";
  if (!"name" in _TypedImageData)
    _TypedImageData.name = "_TypedImageData";
  $desc = $collectedClasses._TypedImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TypedImageData.prototype = $desc;
  _TypedImageData.prototype.get$data = function(receiver) {
    return this.data;
  };
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function CssClassSetImpl_clear_closure() {
  }
  CssClassSetImpl_clear_closure.builtin$cls = "CssClassSetImpl_clear_closure";
  if (!"name" in CssClassSetImpl_clear_closure)
    CssClassSetImpl_clear_closure.name = "CssClassSetImpl_clear_closure";
  $desc = $collectedClasses.CssClassSetImpl_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_clear_closure.prototype = $desc;
  function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function DNArea(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNArea.builtin$cls = "DNArea";
  if (!"name" in DNArea)
    DNArea.name = "DNArea";
  $desc = $collectedClasses.DNArea;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNArea.prototype = $desc;
  function DNBlock(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNBlock.builtin$cls = "DNBlock";
  if (!"name" in DNBlock)
    DNBlock.name = "DNBlock";
  $desc = $collectedClasses.DNBlock;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNBlock.prototype = $desc;
  function DNCData(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNCData.builtin$cls = "DNCData";
  if (!"name" in DNCData)
    DNCData.name = "DNCData";
  $desc = $collectedClasses.DNCData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNCData.prototype = $desc;
  function DNComment(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNComment.builtin$cls = "DNComment";
  if (!"name" in DNComment)
    DNComment.name = "DNComment";
  $desc = $collectedClasses.DNComment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNComment.prototype = $desc;
  function DNDivision(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNDivision.builtin$cls = "DNDivision";
  if (!"name" in DNDivision)
    DNDivision.name = "DNDivision";
  $desc = $collectedClasses.DNDivision;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNDivision.prototype = $desc;
  function DNDocument(xmlVersion, xmlEncoding, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.xmlVersion = xmlVersion;
    this.xmlEncoding = xmlEncoding;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNDocument.builtin$cls = "DNDocument";
  if (!"name" in DNDocument)
    DNDocument.name = "DNDocument";
  $desc = $collectedClasses.DNDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNDocument.prototype = $desc;
  DNDocument.prototype.set$xmlEncoding = function(v) {
    return this.xmlEncoding = v;
  };
  function DNEmpty(_b1, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNEmpty.builtin$cls = "DNEmpty";
  if (!"name" in DNEmpty)
    DNEmpty.name = "DNEmpty";
  $desc = $collectedClasses.DNEmpty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEmpty.prototype = $desc;
  function DNEquaTexMem(_img, _textAtt, _labelAtt, _server, _nodes$_data, _dlg, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._img = _img;
    this._textAtt = _textAtt;
    this._labelAtt = _labelAtt;
    this._server = _server;
    this._nodes$_data = _nodes$_data;
    this._dlg = _dlg;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNEquaTexMem.builtin$cls = "DNEquaTexMem";
  if (!"name" in DNEquaTexMem)
    DNEquaTexMem.name = "DNEquaTexMem";
  $desc = $collectedClasses.DNEquaTexMem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem.prototype = $desc;
  function DNEquaTexMem_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNEquaTexMem_html_closure.builtin$cls = "DNEquaTexMem_html_closure";
  if (!"name" in DNEquaTexMem_html_closure)
    DNEquaTexMem_html_closure.name = "DNEquaTexMem_html_closure";
  $desc = $collectedClasses.DNEquaTexMem_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_html_closure.prototype = $desc;
  function DNEquaTexMem_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  DNEquaTexMem_html_closure0.builtin$cls = "DNEquaTexMem_html_closure0";
  if (!"name" in DNEquaTexMem_html_closure0)
    DNEquaTexMem_html_closure0.name = "DNEquaTexMem_html_closure0";
  $desc = $collectedClasses.DNEquaTexMem_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_html_closure0.prototype = $desc;
  function DNEquaTexMem_attributeDialog_closure(this_0, okfct_1) {
    this.this_0 = this_0;
    this.okfct_1 = okfct_1;
  }
  DNEquaTexMem_attributeDialog_closure.builtin$cls = "DNEquaTexMem_attributeDialog_closure";
  if (!"name" in DNEquaTexMem_attributeDialog_closure)
    DNEquaTexMem_attributeDialog_closure.name = "DNEquaTexMem_attributeDialog_closure";
  $desc = $collectedClasses.DNEquaTexMem_attributeDialog_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_attributeDialog_closure.prototype = $desc;
  function DNEquaTexMem_updateData_closure(this_0) {
    this.this_0 = this_0;
  }
  DNEquaTexMem_updateData_closure.builtin$cls = "DNEquaTexMem_updateData_closure";
  if (!"name" in DNEquaTexMem_updateData_closure)
    DNEquaTexMem_updateData_closure.name = "DNEquaTexMem_updateData_closure";
  $desc = $collectedClasses.DNEquaTexMem_updateData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_updateData_closure.prototype = $desc;
  function DNEquaTexMem_updateData_closure0() {
  }
  DNEquaTexMem_updateData_closure0.builtin$cls = "DNEquaTexMem_updateData_closure0";
  if (!"name" in DNEquaTexMem_updateData_closure0)
    DNEquaTexMem_updateData_closure0.name = "DNEquaTexMem_updateData_closure0";
  $desc = $collectedClasses.DNEquaTexMem_updateData_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_updateData_closure0.prototype = $desc;
  function DNEquaTexMem_getData_closure(completer_0) {
    this.completer_0 = completer_0;
  }
  DNEquaTexMem_getData_closure.builtin$cls = "DNEquaTexMem_getData_closure";
  if (!"name" in DNEquaTexMem_getData_closure)
    DNEquaTexMem_getData_closure.name = "DNEquaTexMem_getData_closure";
  $desc = $collectedClasses.DNEquaTexMem_getData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_getData_closure.prototype = $desc;
  function DNEquaTexMem_getData_closure0(this_1, completer_2) {
    this.this_1 = this_1;
    this.completer_2 = completer_2;
  }
  DNEquaTexMem_getData_closure0.builtin$cls = "DNEquaTexMem_getData_closure0";
  if (!"name" in DNEquaTexMem_getData_closure0)
    DNEquaTexMem_getData_closure0.name = "DNEquaTexMem_getData_closure0";
  $desc = $collectedClasses.DNEquaTexMem_getData_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquaTexMem_getData_closure0.prototype = $desc;
  function TeXEquationDialog(_equationText, _labelName, _labelValue, _okfct, _server, _nodes$_data) {
    this._equationText = _equationText;
    this._labelName = _labelName;
    this._labelValue = _labelValue;
    this._okfct = _okfct;
    this._server = _server;
    this._nodes$_data = _nodes$_data;
  }
  TeXEquationDialog.builtin$cls = "TeXEquationDialog";
  if (!"name" in TeXEquationDialog)
    TeXEquationDialog.name = "TeXEquationDialog";
  $desc = $collectedClasses.TeXEquationDialog;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TeXEquationDialog.prototype = $desc;
  function TeXEquationDialog_show_closure(this_0) {
    this.this_0 = this_0;
  }
  TeXEquationDialog_show_closure.builtin$cls = "TeXEquationDialog_show_closure";
  if (!"name" in TeXEquationDialog_show_closure)
    TeXEquationDialog_show_closure.name = "TeXEquationDialog_show_closure";
  $desc = $collectedClasses.TeXEquationDialog_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TeXEquationDialog_show_closure.prototype = $desc;
  function TeXEquationDialog_show_closure0(this_1) {
    this.this_1 = this_1;
  }
  TeXEquationDialog_show_closure0.builtin$cls = "TeXEquationDialog_show_closure0";
  if (!"name" in TeXEquationDialog_show_closure0)
    TeXEquationDialog_show_closure0.name = "TeXEquationDialog_show_closure0";
  $desc = $collectedClasses.TeXEquationDialog_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TeXEquationDialog_show_closure0.prototype = $desc;
  function TeXEquationDialog_show_closure1(div1_2) {
    this.div1_2 = div1_2;
  }
  TeXEquationDialog_show_closure1.builtin$cls = "TeXEquationDialog_show_closure1";
  if (!"name" in TeXEquationDialog_show_closure1)
    TeXEquationDialog_show_closure1.name = "TeXEquationDialog_show_closure1";
  $desc = $collectedClasses.TeXEquationDialog_show_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TeXEquationDialog_show_closure1.prototype = $desc;
  function TeXEquationDialog_show_closure2(this_3) {
    this.this_3 = this_3;
  }
  TeXEquationDialog_show_closure2.builtin$cls = "TeXEquationDialog_show_closure2";
  if (!"name" in TeXEquationDialog_show_closure2)
    TeXEquationDialog_show_closure2.name = "TeXEquationDialog_show_closure2";
  $desc = $collectedClasses.TeXEquationDialog_show_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TeXEquationDialog_show_closure2.prototype = $desc;
  function DNEquationMem(_img, _textAtt, _nodes$_data, _dlg, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._img = _img;
    this._textAtt = _textAtt;
    this._nodes$_data = _nodes$_data;
    this._dlg = _dlg;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNEquationMem.builtin$cls = "DNEquationMem";
  if (!"name" in DNEquationMem)
    DNEquationMem.name = "DNEquationMem";
  $desc = $collectedClasses.DNEquationMem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquationMem.prototype = $desc;
  function DNEquationMem_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNEquationMem_html_closure.builtin$cls = "DNEquationMem_html_closure";
  if (!"name" in DNEquationMem_html_closure)
    DNEquationMem_html_closure.name = "DNEquationMem_html_closure";
  $desc = $collectedClasses.DNEquationMem_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquationMem_html_closure.prototype = $desc;
  function DNEquationMem_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  DNEquationMem_html_closure0.builtin$cls = "DNEquationMem_html_closure0";
  if (!"name" in DNEquationMem_html_closure0)
    DNEquationMem_html_closure0.name = "DNEquationMem_html_closure0";
  $desc = $collectedClasses.DNEquationMem_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquationMem_html_closure0.prototype = $desc;
  function DNEquationMem_attributeDialog_closure(this_0, okfct_1) {
    this.this_0 = this_0;
    this.okfct_1 = okfct_1;
  }
  DNEquationMem_attributeDialog_closure.builtin$cls = "DNEquationMem_attributeDialog_closure";
  if (!"name" in DNEquationMem_attributeDialog_closure)
    DNEquationMem_attributeDialog_closure.name = "DNEquationMem_attributeDialog_closure";
  $desc = $collectedClasses.DNEquationMem_attributeDialog_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquationMem_attributeDialog_closure.prototype = $desc;
  function DNEquationMem_attributeDialog__closure(this_2) {
    this.this_2 = this_2;
  }
  DNEquationMem_attributeDialog__closure.builtin$cls = "DNEquationMem_attributeDialog__closure";
  if (!"name" in DNEquationMem_attributeDialog__closure)
    DNEquationMem_attributeDialog__closure.name = "DNEquationMem_attributeDialog__closure";
  $desc = $collectedClasses.DNEquationMem_attributeDialog__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNEquationMem_attributeDialog__closure.prototype = $desc;
  function DNFile(_b1, _b2, _img, _srcAtt, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this._img = _img;
    this._srcAtt = _srcAtt;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNFile.builtin$cls = "DNFile";
  if (!"name" in DNFile)
    DNFile.name = "DNFile";
  $desc = $collectedClasses.DNFile;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNFile.prototype = $desc;
  function DNFile_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNFile_html_closure.builtin$cls = "DNFile_html_closure";
  if (!"name" in DNFile_html_closure)
    DNFile_html_closure.name = "DNFile_html_closure";
  $desc = $collectedClasses.DNFile_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNFile_html_closure.prototype = $desc;
  function DNFile_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  DNFile_html_closure0.builtin$cls = "DNFile_html_closure0";
  if (!"name" in DNFile_html_closure0)
    DNFile_html_closure0.name = "DNFile_html_closure0";
  $desc = $collectedClasses.DNFile_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNFile_html_closure0.prototype = $desc;
  function DNFile_writeSrc_onDataLoaded(img_0) {
    this.img_0 = img_0;
  }
  DNFile_writeSrc_onDataLoaded.builtin$cls = "DNFile_writeSrc_onDataLoaded";
  if (!"name" in DNFile_writeSrc_onDataLoaded)
    DNFile_writeSrc_onDataLoaded.name = "DNFile_writeSrc_onDataLoaded";
  $desc = $collectedClasses.DNFile_writeSrc_onDataLoaded;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNFile_writeSrc_onDataLoaded.prototype = $desc;
  function DNForm(childrenRefs, attRefs, attributeControls, simpleField, control, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.childrenRefs = childrenRefs;
    this.attRefs = attRefs;
    this.attributeControls = attributeControls;
    this.simpleField = simpleField;
    this.control = control;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNForm.builtin$cls = "DNForm";
  if (!"name" in DNForm)
    DNForm.name = "DNForm";
  $desc = $collectedClasses.DNForm;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm.prototype = $desc;
  function DNForm_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNForm_html_closure.builtin$cls = "DNForm_html_closure";
  if (!"name" in DNForm_html_closure)
    DNForm_html_closure.name = "DNForm_html_closure";
  $desc = $collectedClasses.DNForm_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm_html_closure.prototype = $desc;
  function DNForm_attributeHTML_closure(box_0, this_1, refAttr_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.refAttr_2 = refAttr_2;
  }
  DNForm_attributeHTML_closure.builtin$cls = "DNForm_attributeHTML_closure";
  if (!"name" in DNForm_attributeHTML_closure)
    DNForm_attributeHTML_closure.name = "DNForm_attributeHTML_closure";
  $desc = $collectedClasses.DNForm_attributeHTML_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm_attributeHTML_closure.prototype = $desc;
  function DNForm_addPlusMinusButtons_closure(this_0, dn_1) {
    this.this_0 = this_0;
    this.dn_1 = dn_1;
  }
  DNForm_addPlusMinusButtons_closure.builtin$cls = "DNForm_addPlusMinusButtons_closure";
  if (!"name" in DNForm_addPlusMinusButtons_closure)
    DNForm_addPlusMinusButtons_closure.name = "DNForm_addPlusMinusButtons_closure";
  $desc = $collectedClasses.DNForm_addPlusMinusButtons_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm_addPlusMinusButtons_closure.prototype = $desc;
  function DNForm_addPlusMinusButtons_closure0(dn_2) {
    this.dn_2 = dn_2;
  }
  DNForm_addPlusMinusButtons_closure0.builtin$cls = "DNForm_addPlusMinusButtons_closure0";
  if (!"name" in DNForm_addPlusMinusButtons_closure0)
    DNForm_addPlusMinusButtons_closure0.name = "DNForm_addPlusMinusButtons_closure0";
  $desc = $collectedClasses.DNForm_addPlusMinusButtons_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm_addPlusMinusButtons_closure0.prototype = $desc;
  function DNForm__makeHelpButton_closure(elementRef_0) {
    this.elementRef_0 = elementRef_0;
  }
  DNForm__makeHelpButton_closure.builtin$cls = "DNForm__makeHelpButton_closure";
  if (!"name" in DNForm__makeHelpButton_closure)
    DNForm__makeHelpButton_closure.name = "DNForm__makeHelpButton_closure";
  $desc = $collectedClasses.DNForm__makeHelpButton_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm__makeHelpButton_closure.prototype = $desc;
  function DNForm__makeHelpButton_closure0(elementRef_1, attributeRef_2) {
    this.elementRef_1 = elementRef_1;
    this.attributeRef_2 = attributeRef_2;
  }
  DNForm__makeHelpButton_closure0.builtin$cls = "DNForm__makeHelpButton_closure0";
  if (!"name" in DNForm__makeHelpButton_closure0)
    DNForm__makeHelpButton_closure0.name = "DNForm__makeHelpButton_closure0";
  $desc = $collectedClasses.DNForm__makeHelpButton_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNForm__makeHelpButton_closure0.prototype = $desc;
  function DNItem(ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNItem.builtin$cls = "DNItem";
  if (!"name" in DNItem)
    DNItem.name = "DNItem";
  $desc = $collectedClasses.DNItem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNItem.prototype = $desc;
  function DNItem_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNItem_html_closure.builtin$cls = "DNItem_html_closure";
  if (!"name" in DNItem_html_closure)
    DNItem_html_closure.name = "DNItem_html_closure";
  $desc = $collectedClasses.DNItem_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNItem_html_closure.prototype = $desc;
  function DNItem_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  DNItem_html_closure0.builtin$cls = "DNItem_html_closure0";
  if (!"name" in DNItem_html_closure0)
    DNItem_html_closure0.name = "DNItem_html_closure0";
  $desc = $collectedClasses.DNItem_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNItem_html_closure0.prototype = $desc;
  function DNItem_html_closure1(this_2) {
    this.this_2 = this_2;
  }
  DNItem_html_closure1.builtin$cls = "DNItem_html_closure1";
  if (!"name" in DNItem_html_closure1)
    DNItem_html_closure1.name = "DNItem_html_closure1";
  $desc = $collectedClasses.DNItem_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNItem_html_closure1.prototype = $desc;
  function DNItem_html_closure2(this_3) {
    this.this_3 = this_3;
  }
  DNItem_html_closure2.builtin$cls = "DNItem_html_closure2";
  if (!"name" in DNItem_html_closure2)
    DNItem_html_closure2.name = "DNItem_html_closure2";
  $desc = $collectedClasses.DNItem_html_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNItem_html_closure2.prototype = $desc;
  function DNLayout(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNLayout.builtin$cls = "DNLayout";
  if (!"name" in DNLayout)
    DNLayout.name = "DNLayout";
  $desc = $collectedClasses.DNLayout;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNLayout.prototype = $desc;
  function DNList(_b1, _b2, _itemref, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this._itemref = _itemref;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNList.builtin$cls = "DNList";
  if (!"name" in DNList)
    DNList.name = "DNList";
  $desc = $collectedClasses.DNList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNList.prototype = $desc;
  function DNProcessingInstruction(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNProcessingInstruction.builtin$cls = "DNProcessingInstruction";
  if (!"name" in DNProcessingInstruction)
    DNProcessingInstruction.name = "DNProcessingInstruction";
  $desc = $collectedClasses.DNProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNProcessingInstruction.prototype = $desc;
  function DNSection(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNSection.builtin$cls = "DNSection";
  if (!"name" in DNSection)
    DNSection.name = "DNSection";
  $desc = $collectedClasses.DNSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSection.prototype = $desc;
  function DNSimpleType(control, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.control = control;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNSimpleType.builtin$cls = "DNSimpleType";
  if (!"name" in DNSimpleType)
    DNSimpleType.name = "DNSimpleType";
  $desc = $collectedClasses.DNSimpleType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSimpleType.prototype = $desc;
  function DNSimpleType_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNSimpleType_html_closure.builtin$cls = "DNSimpleType_html_closure";
  if (!"name" in DNSimpleType_html_closure)
    DNSimpleType_html_closure.name = "DNSimpleType_html_closure";
  $desc = $collectedClasses.DNSimpleType_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSimpleType_html_closure.prototype = $desc;
  function DNSimpleType_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  DNSimpleType_html_closure0.builtin$cls = "DNSimpleType_html_closure0";
  if (!"name" in DNSimpleType_html_closure0)
    DNSimpleType_html_closure0.name = "DNSimpleType_html_closure0";
  $desc = $collectedClasses.DNSimpleType_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSimpleType_html_closure0.prototype = $desc;
  function DNSimpleType_html_closure1(this_2) {
    this.this_2 = this_2;
  }
  DNSimpleType_html_closure1.builtin$cls = "DNSimpleType_html_closure1";
  if (!"name" in DNSimpleType_html_closure1)
    DNSimpleType_html_closure1.name = "DNSimpleType_html_closure1";
  $desc = $collectedClasses.DNSimpleType_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSimpleType_html_closure1.prototype = $desc;
  function DNSpecial(_dlg, _character, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._dlg = _dlg;
    this._character = _character;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNSpecial.builtin$cls = "DNSpecial";
  if (!"name" in DNSpecial)
    DNSpecial.name = "DNSpecial";
  $desc = $collectedClasses.DNSpecial;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSpecial.prototype = $desc;
  function DNSpecial_attributeDialog_closure(this_0, okfct_1) {
    this.this_0 = this_0;
    this.okfct_1 = okfct_1;
  }
  DNSpecial_attributeDialog_closure.builtin$cls = "DNSpecial_attributeDialog_closure";
  if (!"name" in DNSpecial_attributeDialog_closure)
    DNSpecial_attributeDialog_closure.name = "DNSpecial_attributeDialog_closure";
  $desc = $collectedClasses.DNSpecial_attributeDialog_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNSpecial_attributeDialog_closure.prototype = $desc;
  function SpecialDialog(character, okfct, selectedTD) {
    this.character = character;
    this.okfct = okfct;
    this.selectedTD = selectedTD;
  }
  SpecialDialog.builtin$cls = "SpecialDialog";
  if (!"name" in SpecialDialog)
    SpecialDialog.name = "SpecialDialog";
  $desc = $collectedClasses.SpecialDialog;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecialDialog.prototype = $desc;
  function SpecialDialog_show_closure(this_0) {
    this.this_0 = this_0;
  }
  SpecialDialog_show_closure.builtin$cls = "SpecialDialog_show_closure";
  if (!"name" in SpecialDialog_show_closure)
    SpecialDialog_show_closure.name = "SpecialDialog_show_closure";
  $desc = $collectedClasses.SpecialDialog_show_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecialDialog_show_closure.prototype = $desc;
  function SpecialDialog_show_closure0(this_1) {
    this.this_1 = this_1;
  }
  SpecialDialog_show_closure0.builtin$cls = "SpecialDialog_show_closure0";
  if (!"name" in SpecialDialog_show_closure0)
    SpecialDialog_show_closure0.name = "SpecialDialog_show_closure0";
  $desc = $collectedClasses.SpecialDialog_show_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecialDialog_show_closure0.prototype = $desc;
  function SpecialDialog_show_closure1(this_2) {
    this.this_2 = this_2;
  }
  SpecialDialog_show_closure1.builtin$cls = "SpecialDialog_show_closure1";
  if (!"name" in SpecialDialog_show_closure1)
    SpecialDialog_show_closure1.name = "SpecialDialog_show_closure1";
  $desc = $collectedClasses.SpecialDialog_show_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecialDialog_show_closure1.prototype = $desc;
  function SpecialDialog_show_closure2(this_3) {
    this.this_3 = this_3;
  }
  SpecialDialog_show_closure2.builtin$cls = "SpecialDialog_show_closure2";
  if (!"name" in SpecialDialog_show_closure2)
    SpecialDialog_show_closure2.name = "SpecialDialog_show_closure2";
  $desc = $collectedClasses.SpecialDialog_show_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpecialDialog_show_closure2.prototype = $desc;
  function DNString(_b1, _b2, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._b1 = _b1;
    this._b2 = _b2;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNString.builtin$cls = "DNString";
  if (!"name" in DNString)
    DNString.name = "DNString";
  $desc = $collectedClasses.DNString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNString.prototype = $desc;
  function DNStyle(_style, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._style = _style;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNStyle.builtin$cls = "DNStyle";
  if (!"name" in DNStyle)
    DNStyle.name = "DNStyle";
  $desc = $collectedClasses.DNStyle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNStyle.prototype = $desc;
  function DNTable(_trtag, _tdtag, _thtag, _trref, _tdref, _thref, _colspanAttr, _rowspanAttr, _alignAttr, header, ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this._trtag = _trtag;
    this._tdtag = _tdtag;
    this._thtag = _thtag;
    this._trref = _trref;
    this._tdref = _tdref;
    this._thref = _thref;
    this._colspanAttr = _colspanAttr;
    this._rowspanAttr = _rowspanAttr;
    this._alignAttr = _alignAttr;
    this.header = header;
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNTable.builtin$cls = "DNTable";
  if (!"name" in DNTable)
    DNTable.name = "DNTable";
  $desc = $collectedClasses.DNTable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable.prototype = $desc;
  DNTable.prototype.get$_colspanAttr = function() {
    return this._colspanAttr;
  };
  DNTable.prototype.get$_rowspanAttr = function() {
    return this._rowspanAttr;
  };
  DNTable.prototype.get$_alignAttr = function() {
    return this._alignAttr;
  };
  function DNTable_html_closure(this_0) {
    this.this_0 = this_0;
  }
  DNTable_html_closure.builtin$cls = "DNTable_html_closure";
  if (!"name" in DNTable_html_closure)
    DNTable_html_closure.name = "DNTable_html_closure";
  $desc = $collectedClasses.DNTable_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure.prototype = $desc;
  function DNTable_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  DNTable_html_closure0.builtin$cls = "DNTable_html_closure0";
  if (!"name" in DNTable_html_closure0)
    DNTable_html_closure0.name = "DNTable_html_closure0";
  $desc = $collectedClasses.DNTable_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure0.prototype = $desc;
  function DNTable_html_closure1(this_2) {
    this.this_2 = this_2;
  }
  DNTable_html_closure1.builtin$cls = "DNTable_html_closure1";
  if (!"name" in DNTable_html_closure1)
    DNTable_html_closure1.name = "DNTable_html_closure1";
  $desc = $collectedClasses.DNTable_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure1.prototype = $desc;
  function DNTable_html_closure2(this_3) {
    this.this_3 = this_3;
  }
  DNTable_html_closure2.builtin$cls = "DNTable_html_closure2";
  if (!"name" in DNTable_html_closure2)
    DNTable_html_closure2.name = "DNTable_html_closure2";
  $desc = $collectedClasses.DNTable_html_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure2.prototype = $desc;
  function DNTable_html_closure3(this_4) {
    this.this_4 = this_4;
  }
  DNTable_html_closure3.builtin$cls = "DNTable_html_closure3";
  if (!"name" in DNTable_html_closure3)
    DNTable_html_closure3.name = "DNTable_html_closure3";
  $desc = $collectedClasses.DNTable_html_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure3.prototype = $desc;
  function DNTable_html_closure4(this_5) {
    this.this_5 = this_5;
  }
  DNTable_html_closure4.builtin$cls = "DNTable_html_closure4";
  if (!"name" in DNTable_html_closure4)
    DNTable_html_closure4.name = "DNTable_html_closure4";
  $desc = $collectedClasses.DNTable_html_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure4.prototype = $desc;
  function DNTable_html_closure5(this_6) {
    this.this_6 = this_6;
  }
  DNTable_html_closure5.builtin$cls = "DNTable_html_closure5";
  if (!"name" in DNTable_html_closure5)
    DNTable_html_closure5.name = "DNTable_html_closure5";
  $desc = $collectedClasses.DNTable_html_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure5.prototype = $desc;
  function DNTable_html_closure6(this_7) {
    this.this_7 = this_7;
  }
  DNTable_html_closure6.builtin$cls = "DNTable_html_closure6";
  if (!"name" in DNTable_html_closure6)
    DNTable_html_closure6.name = "DNTable_html_closure6";
  $desc = $collectedClasses.DNTable_html_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure6.prototype = $desc;
  function DNTable_html_closure7(this_8) {
    this.this_8 = this_8;
  }
  DNTable_html_closure7.builtin$cls = "DNTable_html_closure7";
  if (!"name" in DNTable_html_closure7)
    DNTable_html_closure7.name = "DNTable_html_closure7";
  $desc = $collectedClasses.DNTable_html_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure7.prototype = $desc;
  function DNTable_html_closure8(this_9) {
    this.this_9 = this_9;
  }
  DNTable_html_closure8.builtin$cls = "DNTable_html_closure8";
  if (!"name" in DNTable_html_closure8)
    DNTable_html_closure8.name = "DNTable_html_closure8";
  $desc = $collectedClasses.DNTable_html_closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure8.prototype = $desc;
  function DNTable_html_closure9(this_10) {
    this.this_10 = this_10;
  }
  DNTable_html_closure9.builtin$cls = "DNTable_html_closure9";
  if (!"name" in DNTable_html_closure9)
    DNTable_html_closure9.name = "DNTable_html_closure9";
  $desc = $collectedClasses.DNTable_html_closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure9.prototype = $desc;
  function DNTable_html_closure10(this_11) {
    this.this_11 = this_11;
  }
  DNTable_html_closure10.builtin$cls = "DNTable_html_closure10";
  if (!"name" in DNTable_html_closure10)
    DNTable_html_closure10.name = "DNTable_html_closure10";
  $desc = $collectedClasses.DNTable_html_closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTable_html_closure10.prototype = $desc;
  function DNTR(ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNTR.builtin$cls = "DNTR";
  if (!"name" in DNTR)
    DNTR.name = "DNTR";
  $desc = $collectedClasses.DNTR;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTR.prototype = $desc;
  function DNTD(ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNTD.builtin$cls = "DNTD";
  if (!"name" in DNTD)
    DNTD.name = "DNTD";
  $desc = $collectedClasses.DNTD;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTD.prototype = $desc;
  function DNTD_rowspan_closure() {
  }
  DNTD_rowspan_closure.builtin$cls = "DNTD_rowspan_closure";
  if (!"name" in DNTD_rowspan_closure)
    DNTD_rowspan_closure.name = "DNTD_rowspan_closure";
  $desc = $collectedClasses.DNTD_rowspan_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTD_rowspan_closure.prototype = $desc;
  function DNTD_colspan_closure() {
  }
  DNTD_colspan_closure.builtin$cls = "DNTD_colspan_closure";
  if (!"name" in DNTD_colspan_closure)
    DNTD_colspan_closure.name = "DNTD_colspan_closure";
  $desc = $collectedClasses.DNTD_colspan_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTD_colspan_closure.prototype = $desc;
  function DNTH(ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNTH.builtin$cls = "DNTH";
  if (!"name" in DNTH)
    DNTH.name = "DNTH";
  $desc = $collectedClasses.DNTH;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNTH.prototype = $desc;
  function DNText(ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  DNText.builtin$cls = "DNText";
  if (!"name" in DNText)
    DNText.name = "DNText";
  $desc = $collectedClasses.DNText;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DNText.prototype = $desc;
  function ParentUpdatingDNText(ref, _id, parent, nodeType, _namespaceURI, prefix, localName, nodeValue, firstChild, nextSibling, attributes, userCannotRemove, valid) {
    this.ref = ref;
    this._id = _id;
    this.parent = parent;
    this.nodeType = nodeType;
    this._namespaceURI = _namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
    this.nodeValue = nodeValue;
    this.firstChild = firstChild;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.userCannotRemove = userCannotRemove;
    this.valid = valid;
  }
  ParentUpdatingDNText.builtin$cls = "ParentUpdatingDNText";
  if (!"name" in ParentUpdatingDNText)
    ParentUpdatingDNText.name = "ParentUpdatingDNText";
  $desc = $collectedClasses.ParentUpdatingDNText;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParentUpdatingDNText.prototype = $desc;
  function SimpleTypeControl(refElement, refAttribute, value, _uniqueName, values, suggestedValues, hcontrol, valueChanged, catchUndo) {
    this.refElement = refElement;
    this.refAttribute = refAttribute;
    this.value = value;
    this._uniqueName = _uniqueName;
    this.values = values;
    this.suggestedValues = suggestedValues;
    this.hcontrol = hcontrol;
    this.valueChanged = valueChanged;
    this.catchUndo = catchUndo;
  }
  SimpleTypeControl.builtin$cls = "SimpleTypeControl";
  if (!"name" in SimpleTypeControl)
    SimpleTypeControl.name = "SimpleTypeControl";
  $desc = $collectedClasses.SimpleTypeControl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl.prototype = $desc;
  SimpleTypeControl.prototype.get$value = function(receiver) {
    return this.value;
  };
  function SimpleTypeControl_html_closure(this_0) {
    this.this_0 = this_0;
  }
  SimpleTypeControl_html_closure.builtin$cls = "SimpleTypeControl_html_closure";
  if (!"name" in SimpleTypeControl_html_closure)
    SimpleTypeControl_html_closure.name = "SimpleTypeControl_html_closure";
  $desc = $collectedClasses.SimpleTypeControl_html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl_html_closure.prototype = $desc;
  function SimpleTypeControl_html_closure0(this_1) {
    this.this_1 = this_1;
  }
  SimpleTypeControl_html_closure0.builtin$cls = "SimpleTypeControl_html_closure0";
  if (!"name" in SimpleTypeControl_html_closure0)
    SimpleTypeControl_html_closure0.name = "SimpleTypeControl_html_closure0";
  $desc = $collectedClasses.SimpleTypeControl_html_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl_html_closure0.prototype = $desc;
  function SimpleTypeControl_html_closure1(this_2) {
    this.this_2 = this_2;
  }
  SimpleTypeControl_html_closure1.builtin$cls = "SimpleTypeControl_html_closure1";
  if (!"name" in SimpleTypeControl_html_closure1)
    SimpleTypeControl_html_closure1.name = "SimpleTypeControl_html_closure1";
  $desc = $collectedClasses.SimpleTypeControl_html_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl_html_closure1.prototype = $desc;
  function SimpleTypeControl_html_closure2(this_3) {
    this.this_3 = this_3;
  }
  SimpleTypeControl_html_closure2.builtin$cls = "SimpleTypeControl_html_closure2";
  if (!"name" in SimpleTypeControl_html_closure2)
    SimpleTypeControl_html_closure2.name = "SimpleTypeControl_html_closure2";
  $desc = $collectedClasses.SimpleTypeControl_html_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl_html_closure2.prototype = $desc;
  function SimpleTypeControl_html_closure3() {
  }
  SimpleTypeControl_html_closure3.builtin$cls = "SimpleTypeControl_html_closure3";
  if (!"name" in SimpleTypeControl_html_closure3)
    SimpleTypeControl_html_closure3.name = "SimpleTypeControl_html_closure3";
  $desc = $collectedClasses.SimpleTypeControl_html_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl_html_closure3.prototype = $desc;
  function SimpleTypeControl_html_closure4() {
  }
  SimpleTypeControl_html_closure4.builtin$cls = "SimpleTypeControl_html_closure4";
  if (!"name" in SimpleTypeControl_html_closure4)
    SimpleTypeControl_html_closure4.name = "SimpleTypeControl_html_closure4";
  $desc = $collectedClasses.SimpleTypeControl_html_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SimpleTypeControl_html_closure4.prototype = $desc;
  function DaxeWXS(_wxs$_schema, _hRefElementVersWXS, _hRefAttributVersWXS, _hNomVersWXS, _espaceVersPrefixe, _lTousElements, _schemasInclu, _hashTitres) {
    this._wxs$_schema = _wxs$_schema;
    this._hRefElementVersWXS = _hRefElementVersWXS;
    this._hRefAttributVersWXS = _hRefAttributVersWXS;
    this._hNomVersWXS = _hNomVersWXS;
    this._espaceVersPrefixe = _espaceVersPrefixe;
    this._lTousElements = _lTousElements;
    this._schemasInclu = _schemasInclu;
    this._hashTitres = _hashTitres;
  }
  DaxeWXS.builtin$cls = "DaxeWXS";
  if (!"name" in DaxeWXS)
    DaxeWXS.name = "DaxeWXS";
  $desc = $collectedClasses.DaxeWXS;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS.prototype = $desc;
  function DaxeWXS_load_closure(this_0, schemaURL_1, completer_2) {
    this.this_0 = this_0;
    this.schemaURL_1 = schemaURL_1;
    this.completer_2 = completer_2;
  }
  DaxeWXS_load_closure.builtin$cls = "DaxeWXS_load_closure";
  if (!"name" in DaxeWXS_load_closure)
    DaxeWXS_load_closure.name = "DaxeWXS_load_closure";
  $desc = $collectedClasses.DaxeWXS_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS_load_closure.prototype = $desc;
  function DaxeWXS_load__closure(this_3, completer_4) {
    this.this_3 = this_3;
    this.completer_4 = completer_4;
  }
  DaxeWXS_load__closure.builtin$cls = "DaxeWXS_load__closure";
  if (!"name" in DaxeWXS_load__closure)
    DaxeWXS_load__closure.name = "DaxeWXS_load__closure";
  $desc = $collectedClasses.DaxeWXS_load__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS_load__closure.prototype = $desc;
  function DaxeWXS_load_closure0(completer_5) {
    this.completer_5 = completer_5;
  }
  DaxeWXS_load_closure0.builtin$cls = "DaxeWXS_load_closure0";
  if (!"name" in DaxeWXS_load_closure0)
    DaxeWXS_load_closure0.name = "DaxeWXS_load_closure0";
  $desc = $collectedClasses.DaxeWXS_load_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS_load_closure0.prototype = $desc;
  function DaxeWXS__newIncludedSchema_closure(box_0, this_1, importNamespace_2, parentSchema_3, completer_4) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.importNamespace_2 = importNamespace_2;
    this.parentSchema_3 = parentSchema_3;
    this.completer_4 = completer_4;
  }
  DaxeWXS__newIncludedSchema_closure.builtin$cls = "DaxeWXS__newIncludedSchema_closure";
  if (!"name" in DaxeWXS__newIncludedSchema_closure)
    DaxeWXS__newIncludedSchema_closure.name = "DaxeWXS__newIncludedSchema_closure";
  $desc = $collectedClasses.DaxeWXS__newIncludedSchema_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS__newIncludedSchema_closure.prototype = $desc;
  function DaxeWXS__newIncludedSchema__closure(completer_5, schemaInclu_6) {
    this.completer_5 = completer_5;
    this.schemaInclu_6 = schemaInclu_6;
  }
  DaxeWXS__newIncludedSchema__closure.builtin$cls = "DaxeWXS__newIncludedSchema__closure";
  if (!"name" in DaxeWXS__newIncludedSchema__closure)
    DaxeWXS__newIncludedSchema__closure.name = "DaxeWXS__newIncludedSchema__closure";
  $desc = $collectedClasses.DaxeWXS__newIncludedSchema__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS__newIncludedSchema__closure.prototype = $desc;
  function DaxeWXS__newIncludedSchema__closure0(completer_7) {
    this.completer_7 = completer_7;
  }
  DaxeWXS__newIncludedSchema__closure0.builtin$cls = "DaxeWXS__newIncludedSchema__closure0";
  if (!"name" in DaxeWXS__newIncludedSchema__closure0)
    DaxeWXS__newIncludedSchema__closure0.name = "DaxeWXS__newIncludedSchema__closure0";
  $desc = $collectedClasses.DaxeWXS__newIncludedSchema__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS__newIncludedSchema__closure0.prototype = $desc;
  function DaxeWXS__newIncludedSchema_closure0(completer_8) {
    this.completer_8 = completer_8;
  }
  DaxeWXS__newIncludedSchema_closure0.builtin$cls = "DaxeWXS__newIncludedSchema_closure0";
  if (!"name" in DaxeWXS__newIncludedSchema_closure0)
    DaxeWXS__newIncludedSchema_closure0.name = "DaxeWXS__newIncludedSchema_closure0";
  $desc = $collectedClasses.DaxeWXS__newIncludedSchema_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS__newIncludedSchema_closure0.prototype = $desc;
  function DaxeWXS__readDocument_closure(completer_0) {
    this.completer_0 = completer_0;
  }
  DaxeWXS__readDocument_closure.builtin$cls = "DaxeWXS__readDocument_closure";
  if (!"name" in DaxeWXS__readDocument_closure)
    DaxeWXS__readDocument_closure.name = "DaxeWXS__readDocument_closure";
  $desc = $collectedClasses.DaxeWXS__readDocument_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS__readDocument_closure.prototype = $desc;
  function DaxeWXS__readDocument_closure0(schemaURL_1, completer_2) {
    this.schemaURL_1 = schemaURL_1;
    this.completer_2 = completer_2;
  }
  DaxeWXS__readDocument_closure0.builtin$cls = "DaxeWXS__readDocument_closure0";
  if (!"name" in DaxeWXS__readDocument_closure0)
    DaxeWXS__readDocument_closure0.name = "DaxeWXS__readDocument_closure0";
  $desc = $collectedClasses.DaxeWXS__readDocument_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DaxeWXS__readDocument_closure0.prototype = $desc;
  function WithSubElements() {
  }
  WithSubElements.builtin$cls = "WithSubElements";
  if (!"name" in WithSubElements)
    WithSubElements.name = "WithSubElements";
  $desc = $collectedClasses.WithSubElements;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WithSubElements.prototype = $desc;
  function WXSAll(_elements, _minOccurs, _maxOccurs, _parent, _annotation) {
    this._elements = _elements;
    this._minOccurs = _minOccurs;
    this._maxOccurs = _maxOccurs;
    this._parent = _parent;
    this._annotation = _annotation;
  }
  WXSAll.builtin$cls = "WXSAll";
  if (!"name" in WXSAll)
    WXSAll.name = "WXSAll";
  $desc = $collectedClasses.WXSAll;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSAll.prototype = $desc;
  function WXSAnnotated() {
  }
  WXSAnnotated.builtin$cls = "WXSAnnotated";
  if (!"name" in WXSAnnotated)
    WXSAnnotated.name = "WXSAnnotated";
  $desc = $collectedClasses.WXSAnnotated;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSAnnotated.prototype = $desc;
  function WXSAnnotation(_documentations) {
    this._documentations = _documentations;
  }
  WXSAnnotation.builtin$cls = "WXSAnnotation";
  if (!"name" in WXSAnnotation)
    WXSAnnotation.name = "WXSAnnotation";
  $desc = $collectedClasses.WXSAnnotation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSAnnotation.prototype = $desc;
  function WXSAny(_namespace, _processContents, _minOccurs, _maxOccurs, _parent, _wxs$_schema, _elements, _annotation) {
    this._namespace = _namespace;
    this._processContents = _processContents;
    this._minOccurs = _minOccurs;
    this._maxOccurs = _maxOccurs;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._elements = _elements;
    this._annotation = _annotation;
  }
  WXSAny.builtin$cls = "WXSAny";
  if (!"name" in WXSAny)
    WXSAny.name = "WXSAny";
  $desc = $collectedClasses.WXSAny;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSAny.prototype = $desc;
  function WXSAttribute(_simpleType, _wxs$_name, _ref, _type, _use, _defaultAtt, _fixed, _form, _wxsRef, _domElement, _parent, _wxs$_schema, _annotation) {
    this._simpleType = _simpleType;
    this._wxs$_name = _wxs$_name;
    this._ref = _ref;
    this._type = _type;
    this._use = _use;
    this._defaultAtt = _defaultAtt;
    this._fixed = _fixed;
    this._form = _form;
    this._wxsRef = _wxsRef;
    this._domElement = _domElement;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._annotation = _annotation;
  }
  WXSAttribute.builtin$cls = "WXSAttribute";
  if (!"name" in WXSAttribute)
    WXSAttribute.name = "WXSAttribute";
  $desc = $collectedClasses.WXSAttribute;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSAttribute.prototype = $desc;
  function WXSAttributeGroup(_attrDecls, _wxs$_name, _ref, _wxsRef, _domElement, _parent, _wxs$_schema, _annotation) {
    this._attrDecls = _attrDecls;
    this._wxs$_name = _wxs$_name;
    this._ref = _ref;
    this._wxsRef = _wxsRef;
    this._domElement = _domElement;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._annotation = _annotation;
  }
  WXSAttributeGroup.builtin$cls = "WXSAttributeGroup";
  if (!"name" in WXSAttributeGroup)
    WXSAttributeGroup.name = "WXSAttributeGroup";
  $desc = $collectedClasses.WXSAttributeGroup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSAttributeGroup.prototype = $desc;
  function WXSChoice(_nestedParticles, _minOccurs, _maxOccurs, _parent, _annotation) {
    this._nestedParticles = _nestedParticles;
    this._minOccurs = _minOccurs;
    this._maxOccurs = _maxOccurs;
    this._parent = _parent;
    this._annotation = _annotation;
  }
  WXSChoice.builtin$cls = "WXSChoice";
  if (!"name" in WXSChoice)
    WXSChoice.name = "WXSChoice";
  $desc = $collectedClasses.WXSChoice;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSChoice.prototype = $desc;
  function WXSComplexContent(_modele, _mixed, _parent, _annotation) {
    this._modele = _modele;
    this._mixed = _mixed;
    this._parent = _parent;
    this._annotation = _annotation;
  }
  WXSComplexContent.builtin$cls = "WXSComplexContent";
  if (!"name" in WXSComplexContent)
    WXSComplexContent.name = "WXSComplexContent";
  $desc = $collectedClasses.WXSComplexContent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSComplexContent.prototype = $desc;
  function WXSComplexType(_simpleContent, _modele, _attrDecls, _wxs$_name, _mixed, _abstractAtt, _parent, _wxs$_schema, _references, _extensions, _annotation) {
    this._simpleContent = _simpleContent;
    this._modele = _modele;
    this._attrDecls = _attrDecls;
    this._wxs$_name = _wxs$_name;
    this._mixed = _mixed;
    this._abstractAtt = _abstractAtt;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._references = _references;
    this._extensions = _extensions;
    this._annotation = _annotation;
  }
  WXSComplexType.builtin$cls = "WXSComplexType";
  if (!"name" in WXSComplexType)
    WXSComplexType.name = "WXSComplexType";
  $desc = $collectedClasses.WXSComplexType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSComplexType.prototype = $desc;
  function WXSDocumentation(_source, _lang, _wxs$_value) {
    this._source = _source;
    this._lang = _lang;
    this._wxs$_value = _wxs$_value;
  }
  WXSDocumentation.builtin$cls = "WXSDocumentation";
  if (!"name" in WXSDocumentation)
    WXSDocumentation.name = "WXSDocumentation";
  $desc = $collectedClasses.WXSDocumentation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSDocumentation.prototype = $desc;
  function WXSElement(_simpleType, _complexType, _identityConstraints, _wxs$_name, _ref, _type, _substitutionGroup, _minOccurs, _maxOccurs, _defaultAtt, _fixed, _abstractAtt, _form, _wxsRef, _wxsSubstitutionGroup, _domElement, _parent, _wxs$_schema, _references, _substitutions, _correspondant, _sousElements, _annotation) {
    this._simpleType = _simpleType;
    this._complexType = _complexType;
    this._identityConstraints = _identityConstraints;
    this._wxs$_name = _wxs$_name;
    this._ref = _ref;
    this._type = _type;
    this._substitutionGroup = _substitutionGroup;
    this._minOccurs = _minOccurs;
    this._maxOccurs = _maxOccurs;
    this._defaultAtt = _defaultAtt;
    this._fixed = _fixed;
    this._abstractAtt = _abstractAtt;
    this._form = _form;
    this._wxsRef = _wxsRef;
    this._wxsSubstitutionGroup = _wxsSubstitutionGroup;
    this._domElement = _domElement;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._references = _references;
    this._substitutions = _substitutions;
    this._correspondant = _correspondant;
    this._sousElements = _sousElements;
    this._annotation = _annotation;
  }
  WXSElement.builtin$cls = "WXSElement";
  if (!"name" in WXSElement)
    WXSElement.name = "WXSElement";
  $desc = $collectedClasses.WXSElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSElement.prototype = $desc;
  function WXSException(message, parentException) {
    this.message = message;
    this.parentException = parentException;
  }
  WXSException.builtin$cls = "WXSException";
  if (!"name" in WXSException)
    WXSException.name = "WXSException";
  $desc = $collectedClasses.WXSException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSException.prototype = $desc;
  WXSException.prototype.get$message = function(receiver) {
    return this.message;
  };
  function WXSExplicitGroup() {
  }
  WXSExplicitGroup.builtin$cls = "WXSExplicitGroup";
  if (!"name" in WXSExplicitGroup)
    WXSExplicitGroup.name = "WXSExplicitGroup";
  $desc = $collectedClasses.WXSExplicitGroup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSExplicitGroup.prototype = $desc;
  function WXSExtension(_modele, _attrDecls, _base, _wxsBase, _domElement, _parent, _annotation) {
    this._modele = _modele;
    this._attrDecls = _attrDecls;
    this._base = _base;
    this._wxsBase = _wxsBase;
    this._domElement = _domElement;
    this._parent = _parent;
    this._annotation = _annotation;
  }
  WXSExtension.builtin$cls = "WXSExtension";
  if (!"name" in WXSExtension)
    WXSExtension.name = "WXSExtension";
  $desc = $collectedClasses.WXSExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSExtension.prototype = $desc;
  function WXSFacet(_facet, _wxs$_value, _fixed, _iparam, _annotation) {
    this._facet = _facet;
    this._wxs$_value = _wxs$_value;
    this._fixed = _fixed;
    this._iparam = _iparam;
    this._annotation = _annotation;
  }
  WXSFacet.builtin$cls = "WXSFacet";
  if (!"name" in WXSFacet)
    WXSFacet.name = "WXSFacet";
  $desc = $collectedClasses.WXSFacet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSFacet.prototype = $desc;
  function WXSFacet_closure() {
  }
  WXSFacet_closure.builtin$cls = "WXSFacet_closure";
  if (!"name" in WXSFacet_closure)
    WXSFacet_closure.name = "WXSFacet_closure";
  $desc = $collectedClasses.WXSFacet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSFacet_closure.prototype = $desc;
  function WXSField(_xpath, _annotation) {
    this._xpath = _xpath;
    this._annotation = _annotation;
  }
  WXSField.builtin$cls = "WXSField";
  if (!"name" in WXSField)
    WXSField.name = "WXSField";
  $desc = $collectedClasses.WXSField;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSField.prototype = $desc;
  function WXSGroup(_modele, _wxs$_name, _ref, _wxsRef, _minOccurs, _maxOccurs, _domElement, _parent, _wxs$_schema, _references, _annotation) {
    this._modele = _modele;
    this._wxs$_name = _wxs$_name;
    this._ref = _ref;
    this._wxsRef = _wxsRef;
    this._minOccurs = _minOccurs;
    this._maxOccurs = _maxOccurs;
    this._domElement = _domElement;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._references = _references;
    this._annotation = _annotation;
  }
  WXSGroup.builtin$cls = "WXSGroup";
  if (!"name" in WXSGroup)
    WXSGroup.name = "WXSGroup";
  $desc = $collectedClasses.WXSGroup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSGroup.prototype = $desc;
  function WXSImport(_namespace, _schemaLocation, _schemaInclu, _annotation) {
    this._namespace = _namespace;
    this._schemaLocation = _schemaLocation;
    this._schemaInclu = _schemaInclu;
    this._annotation = _annotation;
  }
  WXSImport.builtin$cls = "WXSImport";
  if (!"name" in WXSImport)
    WXSImport.name = "WXSImport";
  $desc = $collectedClasses.WXSImport;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSImport.prototype = $desc;
  function WXSImport__inclusions_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  }
  WXSImport__inclusions_closure.builtin$cls = "WXSImport__inclusions_closure";
  if (!"name" in WXSImport__inclusions_closure)
    WXSImport__inclusions_closure.name = "WXSImport__inclusions_closure";
  $desc = $collectedClasses.WXSImport__inclusions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSImport__inclusions_closure.prototype = $desc;
  function WXSImport__inclusions_closure0(completer_2) {
    this.completer_2 = completer_2;
  }
  WXSImport__inclusions_closure0.builtin$cls = "WXSImport__inclusions_closure0";
  if (!"name" in WXSImport__inclusions_closure0)
    WXSImport__inclusions_closure0.name = "WXSImport__inclusions_closure0";
  $desc = $collectedClasses.WXSImport__inclusions_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSImport__inclusions_closure0.prototype = $desc;
  function WXSInclude(_schemaLocation, _schemaInclu, _annotation) {
    this._schemaLocation = _schemaLocation;
    this._schemaInclu = _schemaInclu;
    this._annotation = _annotation;
  }
  WXSInclude.builtin$cls = "WXSInclude";
  if (!"name" in WXSInclude)
    WXSInclude.name = "WXSInclude";
  $desc = $collectedClasses.WXSInclude;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSInclude.prototype = $desc;
  function WXSInclude__inclusions_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  }
  WXSInclude__inclusions_closure.builtin$cls = "WXSInclude__inclusions_closure";
  if (!"name" in WXSInclude__inclusions_closure)
    WXSInclude__inclusions_closure.name = "WXSInclude__inclusions_closure";
  $desc = $collectedClasses.WXSInclude__inclusions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSInclude__inclusions_closure.prototype = $desc;
  function WXSInclude__inclusions_closure0(completer_2) {
    this.completer_2 = completer_2;
  }
  WXSInclude__inclusions_closure0.builtin$cls = "WXSInclude__inclusions_closure0";
  if (!"name" in WXSInclude__inclusions_closure0)
    WXSInclude__inclusions_closure0.name = "WXSInclude__inclusions_closure0";
  $desc = $collectedClasses.WXSInclude__inclusions_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSInclude__inclusions_closure0.prototype = $desc;
  function WXSKey(_selector, _fields, _wxs$_name, _annotation) {
    this._selector = _selector;
    this._fields = _fields;
    this._wxs$_name = _wxs$_name;
    this._annotation = _annotation;
  }
  WXSKey.builtin$cls = "WXSKey";
  if (!"name" in WXSKey)
    WXSKey.name = "WXSKey";
  $desc = $collectedClasses.WXSKey;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSKey.prototype = $desc;
  function WXSKeybase() {
  }
  WXSKeybase.builtin$cls = "WXSKeybase";
  if (!"name" in WXSKeybase)
    WXSKeybase.name = "WXSKeybase";
  $desc = $collectedClasses.WXSKeybase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSKeybase.prototype = $desc;
  function WXSKeyref(_refer, _selector, _fields, _wxs$_name, _annotation) {
    this._refer = _refer;
    this._selector = _selector;
    this._fields = _fields;
    this._wxs$_name = _wxs$_name;
    this._annotation = _annotation;
  }
  WXSKeyref.builtin$cls = "WXSKeyref";
  if (!"name" in WXSKeyref)
    WXSKeyref.name = "WXSKeyref";
  $desc = $collectedClasses.WXSKeyref;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSKeyref.prototype = $desc;
  function WXSList(_simpleType, _itemType, _domElement, _annotation) {
    this._simpleType = _simpleType;
    this._itemType = _itemType;
    this._domElement = _domElement;
    this._annotation = _annotation;
  }
  WXSList.builtin$cls = "WXSList";
  if (!"name" in WXSList)
    WXSList.name = "WXSList";
  $desc = $collectedClasses.WXSList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSList.prototype = $desc;
  function WXSRedefine(_redefinables, _schemaLocation, _schemaInclu, _wxs$_schema) {
    this._redefinables = _redefinables;
    this._schemaLocation = _schemaLocation;
    this._schemaInclu = _schemaInclu;
    this._wxs$_schema = _wxs$_schema;
  }
  WXSRedefine.builtin$cls = "WXSRedefine";
  if (!"name" in WXSRedefine)
    WXSRedefine.name = "WXSRedefine";
  $desc = $collectedClasses.WXSRedefine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSRedefine.prototype = $desc;
  function WXSRedefine__inclusions_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  }
  WXSRedefine__inclusions_closure.builtin$cls = "WXSRedefine__inclusions_closure";
  if (!"name" in WXSRedefine__inclusions_closure)
    WXSRedefine__inclusions_closure.name = "WXSRedefine__inclusions_closure";
  $desc = $collectedClasses.WXSRedefine__inclusions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSRedefine__inclusions_closure.prototype = $desc;
  function WXSRedefine__inclusions_closure0(completer_2) {
    this.completer_2 = completer_2;
  }
  WXSRedefine__inclusions_closure0.builtin$cls = "WXSRedefine__inclusions_closure0";
  if (!"name" in WXSRedefine__inclusions_closure0)
    WXSRedefine__inclusions_closure0.name = "WXSRedefine__inclusions_closure0";
  $desc = $collectedClasses.WXSRedefine__inclusions_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSRedefine__inclusions_closure0.prototype = $desc;
  function WXSRestriction(_simpleType, _facets, _modele, _attrDecls, _base, _wxsBase, _domElement, _parent, _annotation) {
    this._simpleType = _simpleType;
    this._facets = _facets;
    this._modele = _modele;
    this._attrDecls = _attrDecls;
    this._base = _base;
    this._wxsBase = _wxsBase;
    this._domElement = _domElement;
    this._parent = _parent;
    this._annotation = _annotation;
  }
  WXSRestriction.builtin$cls = "WXSRestriction";
  if (!"name" in WXSRestriction)
    WXSRestriction.name = "WXSRestriction";
  $desc = $collectedClasses.WXSRestriction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSRestriction.prototype = $desc;
  function WXSSchema(_includes, _imports, _redefines, _simpleTypes, _complexTypes, _groups, _attributeGroups, _elements, _attributes, _targetNamespace, _attributeFormDefault, _elementFormDefault, _url, _jwxs, _includedSchemas, _parentSchema, _namespaceToPrefix) {
    this._includes = _includes;
    this._imports = _imports;
    this._redefines = _redefines;
    this._simpleTypes = _simpleTypes;
    this._complexTypes = _complexTypes;
    this._groups = _groups;
    this._attributeGroups = _attributeGroups;
    this._elements = _elements;
    this._attributes = _attributes;
    this._targetNamespace = _targetNamespace;
    this._attributeFormDefault = _attributeFormDefault;
    this._elementFormDefault = _elementFormDefault;
    this._url = _url;
    this._jwxs = _jwxs;
    this._includedSchemas = _includedSchemas;
    this._parentSchema = _parentSchema;
    this._namespaceToPrefix = _namespaceToPrefix;
  }
  WXSSchema.builtin$cls = "WXSSchema";
  if (!"name" in WXSSchema)
    WXSSchema.name = "WXSSchema";
  $desc = $collectedClasses.WXSSchema;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSchema.prototype = $desc;
  function WXSSchema_newIncludedSchema_closure(this_0, completer_1) {
    this.this_0 = this_0;
    this.completer_1 = completer_1;
  }
  WXSSchema_newIncludedSchema_closure.builtin$cls = "WXSSchema_newIncludedSchema_closure";
  if (!"name" in WXSSchema_newIncludedSchema_closure)
    WXSSchema_newIncludedSchema_closure.name = "WXSSchema_newIncludedSchema_closure";
  $desc = $collectedClasses.WXSSchema_newIncludedSchema_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSchema_newIncludedSchema_closure.prototype = $desc;
  function WXSSchema_newIncludedSchema_closure0(completer_2) {
    this.completer_2 = completer_2;
  }
  WXSSchema_newIncludedSchema_closure0.builtin$cls = "WXSSchema_newIncludedSchema_closure0";
  if (!"name" in WXSSchema_newIncludedSchema_closure0)
    WXSSchema_newIncludedSchema_closure0.name = "WXSSchema_newIncludedSchema_closure0";
  $desc = $collectedClasses.WXSSchema_newIncludedSchema_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSchema_newIncludedSchema_closure0.prototype = $desc;
  function WXSSelector(_xpath, _annotation) {
    this._xpath = _xpath;
    this._annotation = _annotation;
  }
  WXSSelector.builtin$cls = "WXSSelector";
  if (!"name" in WXSSelector)
    WXSSelector.name = "WXSSelector";
  $desc = $collectedClasses.WXSSelector;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSelector.prototype = $desc;
  function WXSSequence(_nestedParticles, _minOccurs, _maxOccurs, _parent, _annotation) {
    this._nestedParticles = _nestedParticles;
    this._minOccurs = _minOccurs;
    this._maxOccurs = _maxOccurs;
    this._parent = _parent;
    this._annotation = _annotation;
  }
  WXSSequence.builtin$cls = "WXSSequence";
  if (!"name" in WXSSequence)
    WXSSequence.name = "WXSSequence";
  $desc = $collectedClasses.WXSSequence;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSequence.prototype = $desc;
  function WXSSimpleContent(_restriction, _extension, _annotation) {
    this._restriction = _restriction;
    this._extension = _extension;
    this._annotation = _annotation;
  }
  WXSSimpleContent.builtin$cls = "WXSSimpleContent";
  if (!"name" in WXSSimpleContent)
    WXSSimpleContent.name = "WXSSimpleContent";
  $desc = $collectedClasses.WXSSimpleContent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSimpleContent.prototype = $desc;
  function WXSSimpleType(_restriction, _list, _union, _wxs$_name, _parent, _wxs$_schema, _annotation) {
    this._restriction = _restriction;
    this._list = _list;
    this._union = _union;
    this._wxs$_name = _wxs$_name;
    this._parent = _parent;
    this._wxs$_schema = _wxs$_schema;
    this._annotation = _annotation;
  }
  WXSSimpleType.builtin$cls = "WXSSimpleType";
  if (!"name" in WXSSimpleType)
    WXSSimpleType.name = "WXSSimpleType";
  $desc = $collectedClasses.WXSSimpleType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSSimpleType.prototype = $desc;
  function WXSThing() {
  }
  WXSThing.builtin$cls = "WXSThing";
  if (!"name" in WXSThing)
    WXSThing.name = "WXSThing";
  $desc = $collectedClasses.WXSThing;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSThing.prototype = $desc;
  function WXSUnion(_simpleTypes, _memberTypes, _domElement, _wxsMemberTypes, _annotation) {
    this._simpleTypes = _simpleTypes;
    this._memberTypes = _memberTypes;
    this._domElement = _domElement;
    this._wxsMemberTypes = _wxsMemberTypes;
    this._annotation = _annotation;
  }
  WXSUnion.builtin$cls = "WXSUnion";
  if (!"name" in WXSUnion)
    WXSUnion.name = "WXSUnion";
  $desc = $collectedClasses.WXSUnion;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSUnion.prototype = $desc;
  function WXSUnique(_selector, _fields, _wxs$_name, _annotation) {
    this._selector = _selector;
    this._fields = _fields;
    this._wxs$_name = _wxs$_name;
    this._annotation = _annotation;
  }
  WXSUnique.builtin$cls = "WXSUnique";
  if (!"name" in WXSUnique)
    WXSUnique.name = "WXSUnique";
  $desc = $collectedClasses.WXSUnique;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WXSUnique.prototype = $desc;
  function Attr() {
  }
  Attr.builtin$cls = "Attr";
  if (!"name" in Attr)
    Attr.name = "Attr";
  $desc = $collectedClasses.Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Attr.prototype = $desc;
  function AttrImpl(specified, ownerElement, isId, nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.specified = specified;
    this.ownerElement = ownerElement;
    this.isId = isId;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  AttrImpl.builtin$cls = "AttrImpl";
  if (!"name" in AttrImpl)
    AttrImpl.name = "AttrImpl";
  $desc = $collectedClasses.AttrImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AttrImpl.prototype = $desc;
  AttrImpl.prototype.set$ownerElement = function(v) {
    return this.ownerElement = v;
  };
  function CDATASectionImpl(nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  CDATASectionImpl.builtin$cls = "CDATASectionImpl";
  if (!"name" in CDATASectionImpl)
    CDATASectionImpl.name = "CDATASectionImpl";
  $desc = $collectedClasses.CDATASectionImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDATASectionImpl.prototype = $desc;
  function CommentImpl(nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  CommentImpl.builtin$cls = "CommentImpl";
  if (!"name" in CommentImpl)
    CommentImpl.name = "CommentImpl";
  $desc = $collectedClasses.CommentImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CommentImpl.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentImpl(implementation, documentElement, inputEncoding, xmlEncoding, xmlStandalone, xmlVersion, documentURI, doctype, _idToElement, nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.implementation = implementation;
    this.documentElement = documentElement;
    this.inputEncoding = inputEncoding;
    this.xmlEncoding = xmlEncoding;
    this.xmlStandalone = xmlStandalone;
    this.xmlVersion = xmlVersion;
    this.documentURI = documentURI;
    this.doctype = doctype;
    this._idToElement = _idToElement;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  DocumentImpl.builtin$cls = "DocumentImpl";
  if (!"name" in DocumentImpl)
    DocumentImpl.name = "DocumentImpl";
  $desc = $collectedClasses.DocumentImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentImpl.prototype = $desc;
  DocumentImpl.prototype.get$documentElement = function(receiver) {
    return this.documentElement;
  };
  DocumentImpl.prototype.get$xmlEncoding = function() {
    return this.xmlEncoding;
  };
  DocumentImpl.prototype.set$xmlEncoding = function(v) {
    return this.xmlEncoding = v;
  };
  DocumentImpl.prototype.get$xmlVersion = function() {
    return this.xmlVersion;
  };
  function DocumentTypeImpl(name, publicId, systemId, nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.name = name;
    this.publicId = publicId;
    this.systemId = systemId;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  DocumentTypeImpl.builtin$cls = "DocumentTypeImpl";
  if (!"name" in DocumentTypeImpl)
    DocumentTypeImpl.name = "DocumentTypeImpl";
  $desc = $collectedClasses.DocumentTypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentTypeImpl.prototype = $desc;
  DocumentTypeImpl.prototype.get$name = function(receiver) {
    return this.name;
  };
  function DOMException(message, errorCode) {
    this.message = message;
    this.errorCode = errorCode;
  }
  DOMException.builtin$cls = "DOMException";
  if (!"name" in DOMException)
    DOMException.name = "DOMException";
  $desc = $collectedClasses.DOMException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DOMException.prototype = $desc;
  DOMException.prototype.get$message = function(receiver) {
    return this.message;
  };
  DOMException.prototype.get$errorCode = function(receiver) {
    return this.errorCode;
  };
  function DOMImplementationImpl() {
  }
  DOMImplementationImpl.builtin$cls = "DOMImplementationImpl";
  if (!"name" in DOMImplementationImpl)
    DOMImplementationImpl.name = "DOMImplementationImpl";
  $desc = $collectedClasses.DOMImplementationImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DOMImplementationImpl.prototype = $desc;
  function DOMParser() {
  }
  DOMParser.builtin$cls = "DOMParser";
  if (!"name" in DOMParser)
    DOMParser.name = "DOMParser";
  $desc = $collectedClasses.DOMParser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DOMParser.prototype = $desc;
  function DOMParser_parseFromURL_closure(box_0, this_1, completer_2, request_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.completer_2 = completer_2;
    this.request_3 = request_3;
  }
  DOMParser_parseFromURL_closure.builtin$cls = "DOMParser_parseFromURL_closure";
  if (!"name" in DOMParser_parseFromURL_closure)
    DOMParser_parseFromURL_closure.name = "DOMParser_parseFromURL_closure";
  $desc = $collectedClasses.DOMParser_parseFromURL_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DOMParser_parseFromURL_closure.prototype = $desc;
  function DOMParser_parseFromURL_closure0(box_0, completer_4) {
    this.box_0 = box_0;
    this.completer_4 = completer_4;
  }
  DOMParser_parseFromURL_closure0.builtin$cls = "DOMParser_parseFromURL_closure0";
  if (!"name" in DOMParser_parseFromURL_closure0)
    DOMParser_parseFromURL_closure0.name = "DOMParser_parseFromURL_closure0";
  $desc = $collectedClasses.DOMParser_parseFromURL_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DOMParser_parseFromURL_closure0.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  function ElementImpl(tagName, nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.tagName = tagName;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  ElementImpl.builtin$cls = "ElementImpl";
  if (!"name" in ElementImpl)
    ElementImpl.name = "ElementImpl";
  $desc = $collectedClasses.ElementImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ElementImpl.prototype = $desc;
  function EntityReferenceImpl(nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  EntityReferenceImpl.builtin$cls = "EntityReferenceImpl";
  if (!"name" in EntityReferenceImpl)
    EntityReferenceImpl.name = "EntityReferenceImpl";
  $desc = $collectedClasses.EntityReferenceImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EntityReferenceImpl.prototype = $desc;
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  function NodeImpl(nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  NodeImpl.builtin$cls = "NodeImpl";
  if (!"name" in NodeImpl)
    NodeImpl.name = "NodeImpl";
  $desc = $collectedClasses.NodeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeImpl.prototype = $desc;
  NodeImpl.prototype.get$nodeName = function(receiver) {
    return this.nodeName;
  };
  NodeImpl.prototype.get$nodeValue = function(receiver) {
    return this.nodeValue;
  };
  NodeImpl.prototype.set$nodeValue = function(receiver, v) {
    return this.nodeValue = v;
  };
  NodeImpl.prototype.get$nodeType = function(receiver) {
    return this.nodeType;
  };
  NodeImpl.prototype.get$parentNode = function(receiver) {
    return this.parentNode;
  };
  NodeImpl.prototype.set$parentNode = function(receiver, v) {
    return this.parentNode = v;
  };
  NodeImpl.prototype.get$childNodes = function(receiver) {
    return this.childNodes;
  };
  NodeImpl.prototype.get$firstChild = function(receiver) {
    return this.firstChild;
  };
  NodeImpl.prototype.set$firstChild = function(receiver, v) {
    return this.firstChild = v;
  };
  NodeImpl.prototype.get$lastChild = function(receiver) {
    return this.lastChild;
  };
  NodeImpl.prototype.get$previousSibling = function() {
    return this.previousSibling;
  };
  NodeImpl.prototype.set$previousSibling = function(v) {
    return this.previousSibling = v;
  };
  NodeImpl.prototype.get$nextSibling = function() {
    return this.nextSibling;
  };
  NodeImpl.prototype.set$nextSibling = function(v) {
    return this.nextSibling = v;
  };
  NodeImpl.prototype.get$attributes = function(receiver) {
    return this.attributes;
  };
  NodeImpl.prototype.set$attributes = function(receiver, v) {
    return this.attributes = v;
  };
  NodeImpl.prototype.get$ownerDocument = function(receiver) {
    return this.ownerDocument;
  };
  NodeImpl.prototype.get$namespaceURI = function() {
    return this.namespaceURI;
  };
  NodeImpl.prototype.set$namespaceURI = function(v) {
    return this.namespaceURI = v;
  };
  NodeImpl.prototype.get$prefix = function() {
    return this.prefix;
  };
  NodeImpl.prototype.set$prefix = function(v) {
    return this.prefix = v;
  };
  NodeImpl.prototype.get$localName = function(receiver) {
    return this.localName;
  };
  function Engine(rules, states) {
    this.rules = rules;
    this.states = states;
  }
  Engine.builtin$cls = "Engine";
  if (!"name" in Engine)
    Engine.name = "Engine";
  $desc = $collectedClasses.Engine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Engine.prototype = $desc;
  function MatchResult(nbMatched, characters, tokens) {
    this.nbMatched = nbMatched;
    this.characters = characters;
    this.tokens = tokens;
  }
  MatchResult.builtin$cls = "MatchResult";
  if (!"name" in MatchResult)
    MatchResult.name = "MatchResult";
  $desc = $collectedClasses.MatchResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MatchResult.prototype = $desc;
  function StateChange(name, value) {
    this.name = name;
    this.value = value;
  }
  StateChange.builtin$cls = "StateChange";
  if (!"name" in StateChange)
    StateChange.name = "StateChange";
  $desc = $collectedClasses.StateChange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateChange.prototype = $desc;
  StateChange.prototype.get$name = function(receiver) {
    return this.name;
  };
  StateChange.prototype.get$value = function(receiver) {
    return this.value;
  };
  function StateCondition(name, value) {
    this.name = name;
    this.value = value;
  }
  StateCondition.builtin$cls = "StateCondition";
  if (!"name" in StateCondition)
    StateCondition.name = "StateCondition";
  $desc = $collectedClasses.StateCondition;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateCondition.prototype = $desc;
  StateCondition.prototype.get$name = function(receiver) {
    return this.name;
  };
  StateCondition.prototype.get$value = function(receiver) {
    return this.value;
  };
  function Token(id, matchedString, matchedTokens, data, position) {
    this.id = id;
    this.matchedString = matchedString;
    this.matchedTokens = matchedTokens;
    this.data = data;
    this.position = position;
  }
  Token.builtin$cls = "Token";
  if (!"name" in Token)
    Token.name = "Token";
  $desc = $collectedClasses.Token;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Token.prototype = $desc;
  Token.prototype.get$id = function(receiver) {
    return this.id;
  };
  Token.prototype.get$matchedString = function() {
    return this.matchedString;
  };
  Token.prototype.get$matchedTokens = function() {
    return this.matchedTokens;
  };
  Token.prototype.get$data = function(receiver) {
    return this.data;
  };
  Token.prototype.get$position = function(receiver) {
    return this.position;
  };
  function TokenChar(character, isdigit, isletter, isany, exceptions) {
    this.character = character;
    this.isdigit = isdigit;
    this.isletter = isletter;
    this.isany = isany;
    this.exceptions = exceptions;
  }
  TokenChar.builtin$cls = "TokenChar";
  if (!"name" in TokenChar)
    TokenChar.name = "TokenChar";
  $desc = $collectedClasses.TokenChar;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenChar.prototype = $desc;
  function TokenChoice(items) {
    this.items = items;
  }
  TokenChoice.builtin$cls = "TokenChoice";
  if (!"name" in TokenChoice)
    TokenChoice.name = "TokenChoice";
  $desc = $collectedClasses.TokenChoice;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenChoice.prototype = $desc;
  TokenChoice.prototype.get$items = function() {
    return this.items;
  };
  function TokenId(id) {
    this.id = id;
  }
  TokenId.builtin$cls = "TokenId";
  if (!"name" in TokenId)
    TokenId.name = "TokenId";
  $desc = $collectedClasses.TokenId;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenId.prototype = $desc;
  TokenId.prototype.get$id = function(receiver) {
    return this.id;
  };
  function TokenItem() {
  }
  TokenItem.builtin$cls = "TokenItem";
  if (!"name" in TokenItem)
    TokenItem.name = "TokenItem";
  $desc = $collectedClasses.TokenItem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenItem.prototype = $desc;
  function TokenRepeat(repeat, item) {
    this.repeat = repeat;
    this.item = item;
  }
  TokenRepeat.builtin$cls = "TokenRepeat";
  if (!"name" in TokenRepeat)
    TokenRepeat.name = "TokenRepeat";
  $desc = $collectedClasses.TokenRepeat;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenRepeat.prototype = $desc;
  function TokenRule(id, conditions, changes, content, ignore, action, engine) {
    this.id = id;
    this.conditions = conditions;
    this.changes = changes;
    this.content = content;
    this.ignore = ignore;
    this.action = action;
    this.engine = engine;
  }
  TokenRule.builtin$cls = "TokenRule";
  if (!"name" in TokenRule)
    TokenRule.name = "TokenRule";
  $desc = $collectedClasses.TokenRule;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenRule.prototype = $desc;
  TokenRule.prototype.get$id = function(receiver) {
    return this.id;
  };
  TokenRule.prototype.set$engine = function(v) {
    return this.engine = v;
  };
  function TokenSequence(items) {
    this.items = items;
  }
  TokenSequence.builtin$cls = "TokenSequence";
  if (!"name" in TokenSequence)
    TokenSequence.name = "TokenSequence";
  $desc = $collectedClasses.TokenSequence;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TokenSequence.prototype = $desc;
  TokenSequence.prototype.get$items = function() {
    return this.items;
  };
  function XMLParser(lexRules, xmlRules, doc) {
    this.lexRules = lexRules;
    this.xmlRules = xmlRules;
    this.doc = doc;
  }
  XMLParser.builtin$cls = "XMLParser";
  if (!"name" in XMLParser)
    XMLParser.name = "XMLParser";
  $desc = $collectedClasses.XMLParser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser.prototype = $desc;
  function XMLParser__initRules_closure() {
  }
  XMLParser__initRules_closure.builtin$cls = "XMLParser__initRules_closure";
  if (!"name" in XMLParser__initRules_closure)
    XMLParser__initRules_closure.name = "XMLParser__initRules_closure";
  $desc = $collectedClasses.XMLParser__initRules_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure.prototype = $desc;
  function XMLParser__initRules_closure0(this_0) {
    this.this_0 = this_0;
  }
  XMLParser__initRules_closure0.builtin$cls = "XMLParser__initRules_closure0";
  if (!"name" in XMLParser__initRules_closure0)
    XMLParser__initRules_closure0.name = "XMLParser__initRules_closure0";
  $desc = $collectedClasses.XMLParser__initRules_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure0.prototype = $desc;
  function XMLParser__initRules_closure1(this_1) {
    this.this_1 = this_1;
  }
  XMLParser__initRules_closure1.builtin$cls = "XMLParser__initRules_closure1";
  if (!"name" in XMLParser__initRules_closure1)
    XMLParser__initRules_closure1.name = "XMLParser__initRules_closure1";
  $desc = $collectedClasses.XMLParser__initRules_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure1.prototype = $desc;
  function XMLParser__initRules_closure2(this_2) {
    this.this_2 = this_2;
  }
  XMLParser__initRules_closure2.builtin$cls = "XMLParser__initRules_closure2";
  if (!"name" in XMLParser__initRules_closure2)
    XMLParser__initRules_closure2.name = "XMLParser__initRules_closure2";
  $desc = $collectedClasses.XMLParser__initRules_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure2.prototype = $desc;
  function XMLParser__initRules_closure3(this_3) {
    this.this_3 = this_3;
  }
  XMLParser__initRules_closure3.builtin$cls = "XMLParser__initRules_closure3";
  if (!"name" in XMLParser__initRules_closure3)
    XMLParser__initRules_closure3.name = "XMLParser__initRules_closure3";
  $desc = $collectedClasses.XMLParser__initRules_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure3.prototype = $desc;
  function XMLParser__initRules_closure4(this_4) {
    this.this_4 = this_4;
  }
  XMLParser__initRules_closure4.builtin$cls = "XMLParser__initRules_closure4";
  if (!"name" in XMLParser__initRules_closure4)
    XMLParser__initRules_closure4.name = "XMLParser__initRules_closure4";
  $desc = $collectedClasses.XMLParser__initRules_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure4.prototype = $desc;
  function XMLParser__initRules_closure5(this_5) {
    this.this_5 = this_5;
  }
  XMLParser__initRules_closure5.builtin$cls = "XMLParser__initRules_closure5";
  if (!"name" in XMLParser__initRules_closure5)
    XMLParser__initRules_closure5.name = "XMLParser__initRules_closure5";
  $desc = $collectedClasses.XMLParser__initRules_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure5.prototype = $desc;
  function XMLParser__initRules_closure6(this_6) {
    this.this_6 = this_6;
  }
  XMLParser__initRules_closure6.builtin$cls = "XMLParser__initRules_closure6";
  if (!"name" in XMLParser__initRules_closure6)
    XMLParser__initRules_closure6.name = "XMLParser__initRules_closure6";
  $desc = $collectedClasses.XMLParser__initRules_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure6.prototype = $desc;
  function XMLParser__initRules_closure7(this_7) {
    this.this_7 = this_7;
  }
  XMLParser__initRules_closure7.builtin$cls = "XMLParser__initRules_closure7";
  if (!"name" in XMLParser__initRules_closure7)
    XMLParser__initRules_closure7.name = "XMLParser__initRules_closure7";
  $desc = $collectedClasses.XMLParser__initRules_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XMLParser__initRules_closure7.prototype = $desc;
  function ProcessingInstructionImpl(target, data, nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.target = target;
    this.data = data;
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  ProcessingInstructionImpl.builtin$cls = "ProcessingInstructionImpl";
  if (!"name" in ProcessingInstructionImpl)
    ProcessingInstructionImpl.name = "ProcessingInstructionImpl";
  $desc = $collectedClasses.ProcessingInstructionImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstructionImpl.prototype = $desc;
  ProcessingInstructionImpl.prototype.get$target = function(receiver) {
    return this.target;
  };
  ProcessingInstructionImpl.prototype.get$data = function(receiver) {
    return this.data;
  };
  function TextImpl(nodeName, nodeValue, nodeType, parentNode, childNodes, firstChild, lastChild, previousSibling, nextSibling, attributes, ownerDocument, namespaceURI, prefix, localName) {
    this.nodeName = nodeName;
    this.nodeValue = nodeValue;
    this.nodeType = nodeType;
    this.parentNode = parentNode;
    this.childNodes = childNodes;
    this.firstChild = firstChild;
    this.lastChild = lastChild;
    this.previousSibling = previousSibling;
    this.nextSibling = nextSibling;
    this.attributes = attributes;
    this.ownerDocument = ownerDocument;
    this.namespaceURI = namespaceURI;
    this.prefix = prefix;
    this.localName = localName;
  }
  TextImpl.builtin$cls = "TextImpl";
  if (!"name" in TextImpl)
    TextImpl.name = "TextImpl";
  $desc = $collectedClasses.TextImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextImpl.prototype = $desc;
  return [HtmlElement, AnchorElement, AnimationEvent, AnimationPlayerEvent, ApplicationCacheErrorEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CanvasGradient, CanvasPattern, CanvasRenderingContext2D, CharacterData, CloseEvent, Comment0, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceLightEvent, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document0, DocumentFragment, DomError, DomException, DomImplementation, Element0, EmbedElement, ErrorEvent, Event, EventTarget, FetchEvent, FieldSetElement, File, FileError, FocusEvent, FormElement, GamepadEvent, HRElement, HashChangeEvent, HeadElement, HeadingElement, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, InstallEvent, InstallPhaseEvent, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, Navigator, NavigatorCpu, NavigatorUserMediaError, Node0, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PictureElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction0, ProgressElement, ProgressEvent, PushEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement, SecurityPolicyViolationEvent, SelectElement, Selection, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechRecognitionError, SpeechRecognitionEvent, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TextMetrics0, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, XmlDocument, _Attr, _ClientRect, _ClientRectList, _DocumentType, _HTMLAppletElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _XMLHttpRequestProgressEvent, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, DiscardElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GeometryElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement0, SetElement, StopElement, StyleElement0, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, NativeByteBuffer, NativeTypedData, NativeByteData, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, Strings_load_closure, Strings_load__closure, Strings_load__closure0, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSArray_forEach_getLength, JSNumber, JSInt, JSDouble, JSString, _CodeUnits, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_respond, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, TimerImpl$periodic_closure, CapabilityImpl, ReflectionInfo, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure, TearOffClosure, BoundClosure, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, IterableMixinWorkaround, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, ReversedListIterable, _AsyncRun__initializeScheduleImmediate_internalCallback, _AsyncRun__initializeScheduleImmediate_closure, _AsyncRun__scheduleImmediateJsOverride_internalCallback, _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, _UncaughtAsyncError, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_length_closure, Stream_length_closure0, StreamSubscription, _EventSink, _DelayedEvent, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, Timer, AsyncError, _Zone, _rootHandleUncaughtError_closure, _RootZone, _RootZone_bindCallback_closure, _RootZone_bindCallback_closure0, _RootZone_bindUnaryCallback_closure, _RootZone_bindUnaryCallback_closure0, _HashMap, _HashMap_values_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, UnmodifiableListView, HashMap, _HashSetBase, IterableBase, ListBase, Object_ListMixin, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, SetMixin, SetBase, _JsonMap, _JsonMap_values_closure, Codec, Converter, Encoding, JsonCodec, JsonDecoder, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, _Utf8Decoder_convert_scanOneByteCharacters, _Utf8Decoder_convert_addSingleBytes, NoSuchMethodError_toString_closure, bool, DateTime, $double, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, Expando, Function, $int, Iterator, List, Null, num, Object, Pattern, Match, StackTrace, String, StringBuffer, Symbol, Uri__uriEncode_byteToHex, Interceptor_CssStyleDeclarationBase, _CssStyleDeclarationSet, Object_CssStyleDeclarationBase, _CssStyleDeclarationSet_closure, _CssStyleDeclarationSet_setProperty_closure, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, Element_Element$html_closure, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, HttpRequest_getString_closure, HttpRequest_request_closure0, HttpRequest_request_closure, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, SelectElement_options_closure, SelectElement_selectedOptions_closure, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, _AttributeMap, _ElementAttributeMap, _ElementCssClassSet, _EventStream, _ElementEventStreamImpl, _EventStreamSubscription, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, FixedSizeListIterator, _DOMWindowCrossFrame, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, Capability, _JSRandom, Point, _RectangleBase, Rectangle, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, AttributeDialog, AttributeDialog_show_closure, AttributeDialog_show_closure0, AttributeDialog_show_closure1, AttributeDialog_showOnInsert_closure, AttributeDialog_showOnInsert_closure0, AttributeDialog_showOnInsert_closure1, Config, Config_load_closure, Config_load__closure, Config_load__closure0, Config_load_closure0, Config__creationMenu_closure, Config__creationMenu_closure0, Cursor, Cursor_closure, Cursor_closure0, Cursor_closure1, Cursor_newTimer_closure, main_closure, DaxeAttr, DaxeDocument, DaxeDocument_openDocument_closure, DaxeDocument_openDocument__closure, DaxeDocument_openDocument__closure0, DaxeDocument_openDocument_closure0, DaxeDocument_openDocumentFromPost_closure, DaxeDocument_openDocumentFromPost__closure, DaxeDocument_getXmlFromPost_closure, DaxeDocument_saveOnWebJaxe_closure, DaxeDocument_saveOnWebJaxe_closure0, DaxeDocument_insertNewNode_closure, DaxeException, DaxeNode, FindDialog, FindDialog_show_closure, FindDialog_show_closure0, FindDialog_show_closure1, FindDialog_show_closure2, FindDialog_show_closure3, FindDialog_show_closure4, FindDialog_show_closure5, HelpDialog, HelpDialog_show_closure, HelpDialog_show_closure0, HelpDialog_show_closure1, HelpDialog_show_closure2, HelpDialog_fillParents_closure, HelpDialog_fillChildren_closure, InsertPanel, InsertPanel_update_closure, InsertPanel__makeHelpButton_closure, Locale, Menu, MenuItem, MenuItem_html_closure, MenuItem_html_closure0, MenuItem_html_closure1, MenuBar, MenuBar_html_closure, MenuBar_html_closure0, MenuBar_html_closure1, MenuBar_html_closure2, NodeFactory, NodeFactory_addCoreDisplayTypes_closure, NodeFactory_addCoreDisplayTypes_closure0, NodeFactory_addCoreDisplayTypes_closure1, NodeFactory_addCoreDisplayTypes_closure2, NodeFactory_addCoreDisplayTypes_closure3, NodeFactory_addCoreDisplayTypes_closure4, NodeFactory_addCoreDisplayTypes_closure5, NodeFactory_addCoreDisplayTypes_closure6, NodeFactory_addCoreDisplayTypes_closure7, NodeFactory_addCoreDisplayTypes_closure8, NodeFactory_addCoreDisplayTypes_closure9, NodeFactory_addCoreDisplayTypes_closure10, NodeFactory_addCoreDisplayTypes_closure11, NodeFactory_addCoreDisplayTypes_closure12, NodeFactory_addCoreDisplayTypes_closure13, NodeFactory_addCoreDisplayTypes_closure14, NodeFactory_addCoreDisplayTypes_closure15, NodeFactory_addCoreDisplayTypes_closure16, NodeFactory_addCoreDisplayTypes_closure17, NodeFactory_addCoreDisplayTypes_closure18, NodeFactory_addCoreDisplayTypes_closure19, NodeFactory_addCoreDisplayTypes_closure20, NodeFactory_addCoreDisplayTypes_closure21, NodeFactory_addCoreDisplayTypes_closure22, NodeFactory_addCoreDisplayTypes_closure23, NodeFactory_addCoreDisplayTypes_closure24, NodeFactory_addCoreDisplayTypes_closure25, NodeFactory_addCoreDisplayTypes_closure26, NodeFactory_addCoreDisplayTypes_closure27, NodeFactory_addCoreDisplayTypes_closure28, NodeFactory_addCoreDisplayTypes_closure29, NodeFactory_addCoreDisplayTypes_closure30, NodeFactory_addCoreDisplayTypes_closure31, Position, Point0, SourceWindow, SourceWindow_show_closure, SourceWindow_show_closure0, Tag, Tag_html_closure, Tag_html_closure0, Tag_html_closure1, UndoableEdit, WebPage, WebPage_openDocument_closure, WebPage_openDocument_closure0, WebPage_openDocumentFromPost_closure, WebPage_openDocumentFromPost_closure0, WebPage_init_closure, WebPage_init_closure0, WebPage_init_closure1, WebPage_init_closure2, WebPage_init_closure3, WebPage_init_closure4, WebPage__buildMenus_closure, WebPage__buildMenus_closure0, WebPage__buildMenus_closure1, WebPage__buildMenus_closure2, WebPage__buildMenus_closure3, WebPage__buildMenus_closure4, WebPage_showContextualMenu_closure, WebPage_showContextualMenu_closure0, WebPage_save_closure, WebPage_save_closure0, MathElement, MathFrac, MathIdentifier, MathNumber, MathOperator, MathOver, MathRoot, MathRootElement, MathRow, MathSqrt, MathSub, MathSubSup, MathSup, MathTable, MathTableData, MathTableRow, MathText, MathUnder, MathUnderOver, EquationDialog, EquationDialog_show_closure, EquationDialog_show_closure0, EquationDialog_show_closure1, MathBase, StringMathBuilder, JEQ, JEQFonction, JEQOperation, JEQNombre, JEQVariable, TextMetrics, _convertDartToNative_PrepareForStructuredClone_findSlot, _convertDartToNative_PrepareForStructuredClone_readSlot, _convertDartToNative_PrepareForStructuredClone_writeSlot, _convertDartToNative_PrepareForStructuredClone_cleanupSlots, _convertDartToNative_PrepareForStructuredClone_walk, _convertDartToNative_PrepareForStructuredClone_walk_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, _TypedImageData, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_clear_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, DNArea, DNBlock, DNCData, DNComment, DNDivision, DNDocument, DNEmpty, DNEquaTexMem, DNEquaTexMem_html_closure, DNEquaTexMem_html_closure0, DNEquaTexMem_attributeDialog_closure, DNEquaTexMem_updateData_closure, DNEquaTexMem_updateData_closure0, DNEquaTexMem_getData_closure, DNEquaTexMem_getData_closure0, TeXEquationDialog, TeXEquationDialog_show_closure, TeXEquationDialog_show_closure0, TeXEquationDialog_show_closure1, TeXEquationDialog_show_closure2, DNEquationMem, DNEquationMem_html_closure, DNEquationMem_html_closure0, DNEquationMem_attributeDialog_closure, DNEquationMem_attributeDialog__closure, DNFile, DNFile_html_closure, DNFile_html_closure0, DNFile_writeSrc_onDataLoaded, DNForm, DNForm_html_closure, DNForm_attributeHTML_closure, DNForm_addPlusMinusButtons_closure, DNForm_addPlusMinusButtons_closure0, DNForm__makeHelpButton_closure, DNForm__makeHelpButton_closure0, DNItem, DNItem_html_closure, DNItem_html_closure0, DNItem_html_closure1, DNItem_html_closure2, DNLayout, DNList, DNProcessingInstruction, DNSection, DNSimpleType, DNSimpleType_html_closure, DNSimpleType_html_closure0, DNSimpleType_html_closure1, DNSpecial, DNSpecial_attributeDialog_closure, SpecialDialog, SpecialDialog_show_closure, SpecialDialog_show_closure0, SpecialDialog_show_closure1, SpecialDialog_show_closure2, DNString, DNStyle, DNTable, DNTable_html_closure, DNTable_html_closure0, DNTable_html_closure1, DNTable_html_closure2, DNTable_html_closure3, DNTable_html_closure4, DNTable_html_closure5, DNTable_html_closure6, DNTable_html_closure7, DNTable_html_closure8, DNTable_html_closure9, DNTable_html_closure10, DNTR, DNTD, DNTD_rowspan_closure, DNTD_colspan_closure, DNTH, DNText, ParentUpdatingDNText, SimpleTypeControl, SimpleTypeControl_html_closure, SimpleTypeControl_html_closure0, SimpleTypeControl_html_closure1, SimpleTypeControl_html_closure2, SimpleTypeControl_html_closure3, SimpleTypeControl_html_closure4, DaxeWXS, DaxeWXS_load_closure, DaxeWXS_load__closure, DaxeWXS_load_closure0, DaxeWXS__newIncludedSchema_closure, DaxeWXS__newIncludedSchema__closure, DaxeWXS__newIncludedSchema__closure0, DaxeWXS__newIncludedSchema_closure0, DaxeWXS__readDocument_closure, DaxeWXS__readDocument_closure0, WithSubElements, WXSAll, WXSAnnotated, WXSAnnotation, WXSAny, WXSAttribute, WXSAttributeGroup, WXSChoice, WXSComplexContent, WXSComplexType, WXSDocumentation, WXSElement, WXSException, WXSExplicitGroup, WXSExtension, WXSFacet, WXSFacet_closure, WXSField, WXSGroup, WXSImport, WXSImport__inclusions_closure, WXSImport__inclusions_closure0, WXSInclude, WXSInclude__inclusions_closure, WXSInclude__inclusions_closure0, WXSKey, WXSKeybase, WXSKeyref, WXSList, WXSRedefine, WXSRedefine__inclusions_closure, WXSRedefine__inclusions_closure0, WXSRestriction, WXSSchema, WXSSchema_newIncludedSchema_closure, WXSSchema_newIncludedSchema_closure0, WXSSelector, WXSSequence, WXSSimpleContent, WXSSimpleType, WXSThing, WXSUnion, WXSUnique, Attr, AttrImpl, CDATASectionImpl, CommentImpl, Document, DocumentImpl, DocumentTypeImpl, DOMException, DOMImplementationImpl, DOMParser, DOMParser_parseFromURL_closure, DOMParser_parseFromURL_closure0, Element, ElementImpl, EntityReferenceImpl, Node, NodeImpl, Engine, MatchResult, StateChange, StateCondition, Token, TokenChar, TokenChoice, TokenId, TokenItem, TokenRepeat, TokenRule, TokenSequence, XMLParser, XMLParser__initRules_closure, XMLParser__initRules_closure0, XMLParser__initRules_closure1, XMLParser__initRules_closure2, XMLParser__initRules_closure3, XMLParser__initRules_closure4, XMLParser__initRules_closure5, XMLParser__initRules_closure6, XMLParser__initRules_closure7, ProcessingInstructionImpl, TextImpl];
}
